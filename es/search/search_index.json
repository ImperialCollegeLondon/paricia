{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#paricia","title":"Paricia","text":"<p>Paricia es un sistema de gesti\u00f3n de datos hidroclim\u00e1ticos. Originalmente enfocado en la gesti\u00f3n de datos de estaciones de la regi\u00f3n de los Andes, recientemente se ha generalizado para poder ingerir datos de cualquier parte del mundo.</p> <p>Se puede encontrar una versi\u00f3n en vivo de la herramienta en:</p> <p></p> <p>Paricia esta desarrollado en el Imperial College London por el equipo de Ingenier\u00eda de Software de Investigaci\u00f3n dentro del Research Computing Group. El proyecto est\u00e1 coordinado por el Prof. Wouter Buytaert (https://www.imperial.ac.uk/people/w.buytaert), quien lidera un grupo en el Departamento de Ingenier\u00eda Civil y que se enfoca en el impacto del cambio ambiental en el ciclo del agua y sus consecuencias para la gesti\u00f3n de los recursos h\u00eddricos. Este trabajo implica la recopilaci\u00f3n y el procesamiento de datos de series temporales como el nivel de agua, el flujo y la temperatura de varias estaciones de monitoreo ubicadas en \u00e1reas monta\u00f1osas como los Andes y el Himalaya.</p> <p>El c\u00f3digo se bas\u00f3 originalmente en la plataforma SEDC desarrollado por el Fondo para la Proteccion del Agua (FONAG) y la Empresa P\u00fablica Metropolitana de Agua Potable Y Saneamiento de Quito (EPMAPS) del Ecuador. Agradecemos a esas instituciones por compartir su c\u00f3digo para usarlo como punto de partida para Paricia.</p>"},{"location":"adding_elements/","title":"A\u00f1adir elementos","text":"<p>Los usuarios registrados pueden utilizar elementos existentes (formatos, variables, etc.) siempre que sean p\u00fablicos (consulte la secci\u00f3n Permisos), pero tambi\u00e9n pueden crear elementos suyos propios para satisfacer sus necesidades espec\u00edficas.</p> <p>Todos los elementos que se pueden crear en Paricia (excepto la importaci\u00f3n de datos, que se analiza en su propia secci\u00f3n) siguen un flujo de trabajo similar:</p> <ul> <li>Seleccione el elemento de inter\u00e9s en el submen\u00fa de la barra superior, por ejemplo, <code>Variable</code> dentro del men\u00fa <code>Variables</code>.</li> </ul> <p>Figure 1: Selecci\u00f3n de un elemento en el men\u00fa superior</p> <ul> <li>La p\u00e1gina ahora muestra la lista de elementos existentes de ese tipo que el usuario puede ver, es decir, los que son p\u00fablicos o los que son propios. Puede ordenar las entradas haciendo clic en los nombres de las columnas o filtrarlas para seleccionar solo algunas entradas.</li> </ul> <p>Figure 2: Lista de variables que un usuario puede ver</p> <ul> <li>Al hacer clic en el ID de un elemento existente, puede ver los detalles de ese elemento y editarlo, si el usuario tiene permiso para hacerlo.</li> <li>Al hacer clic en el bot\u00f3n <code>Nuevo</code> en la parte superior, puede crear un nuevo elemento de ese tipo.</li> </ul> <p>Se abrir\u00e1 un nuevo formulario con los campos que deben completarse para ese elemento.</p> <p>Algunos elementos son muy simples y solo tienen uno o dos campos para completar. Otros son m\u00e1s complicados y vinculan, a su vez, a otros elementos. No todos los campos son obligatorios, en general. Si un campo obligatorio no se completa, se marcar\u00e1 al intentar guardar el elemento.</p> <p>Tomemos como ejemplo el formulario de creaci\u00f3n de variables.</p> <p>Figure 3: Formulario utilizado para crear una nueva variable</p> <p>Como podemos ver en este formulario, hay un campo llamado <code>Visibilidad</code>. Todos los elementos tienen este campo y define qui\u00e9n m\u00e1s puede ver los detalles y usar el elemento para definir sus propios elementos.</p> <p>Otros campos, como <code>Unidad</code>, son claves externas a otros elementos y, en este caso, son solo informativos - metadatos para comprender mejor la variable.</p> <p>Finalmente, algunos campos se utilizan durante el proceso de validaci\u00f3n o importaci\u00f3n. Ese es el caso del error m\u00e1ximo, m\u00ednimo o de diferencia, en este caso, que ayuda a Paricia a identificar y marcar entradas sospechosas.</p> <p>Al crear un nuevo elemento, es importante que se comprenda correctamente el significado y el prop\u00f3sito de los campos. Todos ellos deben tener una descripci\u00f3n debajo explicando para qu\u00e9 sirven, pero si dicha informaci\u00f3n no est\u00e1 completa o clara, por favor rep\u00f3rtelo siguiendo las instrucciones de las Pautas de contribuci\u00f3n.</p>"},{"location":"admin/","title":"Administrador de Paricia","text":"<p>Los administradores de Paricia (o superusuarios) tienen plenos poderes para controlar cualquier aspecto de Paricia, desde otorgar permisos a otros usuarios hasta cambiar la visibilidad de los objetos. La excepci\u00f3n a esto es eliminar objetos que tienen dependientes, como se explica en la secci\u00f3n permisos.</p> <p>Hay dos formas de convertirse en un usuario administrador</p> <ol> <li>Pedirle a otro administrador que le d\u00e9 permisos de superusuario a ese usuario. Esto se hace a trav\u00e9s del administrador de Paricia. Dentro de la aplicaci\u00f3n <code>Usuarios</code>, seleccione el usuario cuyos permisos necesitan cambiarse y marque la casilla que le otorga al usuario <code>Estado de superusuario</code>, como se muestra en esta imagen:</li> </ol> <p>Figure 1: Marcar la tercera casilla le otorga al usuario todos los permisos de Paricia</p> <ol> <li> <p>A trav\u00e9s de la l\u00ednea de comandos. Este es un m\u00e9todo m\u00e1s avanzado y, por lo general, solo se requiere cuando se configura Paricia por primera vez, ya sea localmente para el desarrollo o en un servidor nuevo. Supondremos que Paricia se ha lanzado usando <code>docker compose</code>, como se indica en las instrucciones de instalaci\u00f3n. Los pasos en este caso son:</p> </li> <li> <p>Abra una terminal y acceda al servidor, si no es para desarrollo local, mediante SSH u otro m\u00e9todo.</p> </li> <li>Busque el nombre del contenedor que ejecuta la imagen <code>paricia</code> ejecutando <code>docker ps</code>. Deber\u00eda ser algo como <code>paricia-web-1</code> o <code>paricia-app-1</code>.</li> <li>Cree el superusuario con <code>docker exec -it paricia-web-1 python manage.py createsuperuser</code>.</li> <li>Se le solicitar\u00e1 un nombre de usuario, correo electr\u00f3nico y contrase\u00f1a. Complete todos los detalles.</li> </ol> <p>Una vez hecho esto, deber\u00eda poder iniciar sesi\u00f3n en Paricia a trav\u00e9s de la interfaz web y acceder al administrador de Paricia.</p>"},{"location":"contributing/","title":"Contribuir a Paricia","text":"<p>\u00a1Gracias por tomarte el tiempo de contribuir a Paricia!</p> <p>El siguiente es un conjunto de pautas para contribuir a Paricia, un proyecto de sistema de gesti\u00f3n de datos hidroclim\u00e1ticos basado en Python. El objetivo de estas pautas es hacer que el desarrollo del proyecto sea eficiente y sostenible y garantizar que cada env\u00edo lo haga mejor, m\u00e1s legible, m\u00e1s s\u00f3lido y mejor documentado. No dudes en sugerir cambios y mejoras.</p>"},{"location":"contributing/#indice","title":"\u00cdndice","text":"<p>C\u00f3digo de conducta</p> <p>\u00bfC\u00f3mo puedo contribuir?</p> <ul> <li>Informar errores</li> <li>Sugerir mejoras</li> <li>Tu primera contribuci\u00f3n de c\u00f3digo</li> <li>Solicitudes de incorporaci\u00f3n de cambios</li> </ul> <p>Gu\u00edas de estilo</p> <ul> <li>Mensajes de confirmaci\u00f3n de Git</li> <li>Gu\u00eda de estilo de la documentaci\u00f3n</li> </ul>"},{"location":"contributing/#codigo-de-conducta","title":"C\u00f3digo de conducta","text":"<p>Este proyecto y todos los participantes en \u00e9l se rigen por el C\u00f3digo de conducta de Paricia. Al participar, se espera que respetes este c\u00f3digo. Por favor, informe cualquier comportamiento inaceptable al Administrador del repositorio.</p>"},{"location":"contributing/#como-puedo-contribuir","title":"\u00bfC\u00f3mo puedo contribuir?","text":""},{"location":"contributing/#informar-errores","title":"Informar errores","text":"<p>Esta secci\u00f3n le gu\u00eda a trav\u00e9s del env\u00edo de un informe de error para Paricia. Seguir estas pautas ayuda a los encargados del mantenimiento y a la comunidad a:</p> <ul> <li> comprender su informe</li> <li> reproducir el comportamiento</li> <li> encontrar informes relacionados</li> </ul> <p>Antes de crear informes de error, consulte esta lista (incluidos los problemas cerrados) ya que puede descubrir que no necesita crear uno. Cuando est\u00e9 creando un informe de error, incluya tantos detalles como sea posible.</p> <p>Nota: Si encuentra un problema Cerrado que parece ser lo mismo que est\u00e1 experimentando, abra un nuevo problema e incluya un enlace al problema original en el cuerpo del nuevo.</p>"},{"location":"contributing/#como-envio-un-buen-informe-de-error","title":"\u00bfC\u00f3mo env\u00edo un (buen) informe de error?","text":"<p>Los errores se registran como problemas de GitHub. Explique el problema e incluya detalles adicionales para ayudar a los encargados de mantenimiento a reproducirlo:</p> <ul> <li>Use un t\u00edtulo claro y descriptivo para el problema para identificarlo.</li> <li>Describe los pasos exactos que reproducen el problema con tantos detalles como sea posible. Por ejemplo, comience explicando c\u00f3mo instal\u00f3 Paricia y qu\u00e9 estaba tratando de hacer.</li> <li>Proporcione ejemplos espec\u00edficos para demostrar los pasos. Incluya enlaces a archivos o proyectos de GitHub, o fragmentos que se puedan copiar y pegar, que use en esos ejemplos. Si proporciona fragmentos en el problema, utilice bloques de c\u00f3digo Markdown.</li> <li>Describe el comportamiento que observaste despu\u00e9s de seguir los pasos y se\u00f1ala cu\u00e1l es exactamente el problema con ese comportamiento.</li> <li>Explica qu\u00e9 comportamiento esperabas ver en su lugar y por qu\u00e9.</li> <li>Si hay alg\u00fan resultado de error en la terminal, incluye ese resultado en tu informe.</li> </ul> <p>Proporciona m\u00e1s contexto respondiendo estas preguntas:</p> <ul> <li>\u00bfEl problema comenz\u00f3 a ocurrir recientemente (por ejemplo, despu\u00e9s de actualizar a una nueva versi\u00f3n de Paricia) o siempre fue un problema?</li> <li>Si el problema comenz\u00f3 a ocurrir recientemente, \u00bfpuedes reproducir el problema en una versi\u00f3n anterior de Paricia? \u00bfCu\u00e1l es la versi\u00f3n m\u00e1s reciente en la que no ocurre el problema? Puedes descargar versiones anteriores de Paricia desde la p\u00e1gina de versiones.</li> <li>\u00bfPuedes reproducir el problema de manera confiable? Si no, proporciona detalles sobre la frecuencia con la que ocurre el problema y bajo qu\u00e9 condiciones ocurre normalmente.</li> </ul> <p>Incluye detalles sobre tu configuraci\u00f3n y entorno:</p> <ul> <li>\u00bfQu\u00e9 versi\u00f3n de Paricia est\u00e1s usando?</li> <li>\u00bfCu\u00e1l es el nombre y la versi\u00f3n del sistema operativo que est\u00e1s usando?</li> <li>\u00bfEst\u00e1s ejecutando Paricia en una m\u00e1quina virtual? Si es as\u00ed, \u00bfqu\u00e9 software de VM est\u00e1s usando y qu\u00e9 sistemas operativos y versiones se usan para el host y el invitado?</li> </ul>"},{"location":"contributing/#sugerencias-de-mejoras","title":"Sugerencias de mejoras","text":"<p>Esta secci\u00f3n te gu\u00eda a trav\u00e9s del env\u00edo de una sugerencia de mejora para Paricia, incluidas caracter\u00edsticas completamente nuevas y mejoras menores a la funcionalidad existente. Seguir estas pautas ayuda a los encargados del mantenimiento y a la comunidad a comprender tu sugerencia y encontrar otras relacionadas.</p> <p>Antes de crear sugerencias de mejora, consulta esta lista (incluidos los problemas cerrados), ya que es posible que descubras que no necesitas crear una. Cuando cree una sugerencia de mejora, incluya tantos detalles como sea posible (#\u00bfC\u00f3mo env\u00edo una buena sugerencia de mejora?).</p>"},{"location":"contributing/#como-envio-una-buena-sugerencia-de-mejora","title":"\u00bfC\u00f3mo env\u00edo una buena sugerencia de mejora?","text":"<p>Las sugerencias de mejora se registran como problemas de GitHub. Cree un problema en ese repositorio y proporcione la siguiente informaci\u00f3n:</p>"},{"location":"contributing/#tu-primera-contribucion-de-codigo","title":"Tu primera contribuci\u00f3n de c\u00f3digo","text":"<p>\u00bfNo est\u00e1s seguro de por d\u00f3nde empezar a contribuir con Paricia? Puedes empezar por revisar estos problemas para principiantes y para quienes necesitan ayuda:</p> <ul> <li>Problemas para principiantes: problemas que solo deber\u00edan requerir unas pocas l\u00edneas de c\u00f3digo y una o dos pruebas.</li> <li>Problemas para quienes necesitan ayuda: problemas que deber\u00edan ser un poco m\u00e1s complejos que los problemas para principiantes.</li> </ul>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<p>El proceso que se describe aqu\u00ed tiene varios objetivos:</p> <ul> <li>Mantener la calidad de Paricia</li> <li>Solucionar problemas que son importantes para los usuarios</li> <li>Involucrar a la comunidad en el trabajo para lograr la mejor Paricia posible</li> <li>Permitir un sistema sostenible para que los encargados de mantenimiento de Paricia revisen las contribuciones</li> </ul> <p>Siga estos pasos para que los encargados de mantenimiento consideren su contribuci\u00f3n:</p> <ol> <li>Describa claramente cu\u00e1l es el prop\u00f3sito de la pull request. Consulte los problemas relevantes en Errores o Mejoras. En general, un problema siempre debe abrirse antes de una pull request, para discutir su contenido con un encargado de mantenimiento y asegurarse de que tenga sentido para Paricia. Si la pull request es un trabajo en progreso que llevar\u00e1 alg\u00fan tiempo para estar listo pero a\u00fan as\u00ed desea discutirlo con la comunidad, abra un borrador de pull request.</li> <li>Incluya pruebas unitarias y pruebas de integraci\u00f3n relevantes, cuando sea necesario. El conjunto de pruebas de Paricia es bastante limitado en este momento. Estamos trabajando para mejorar esto y probar tantas caracter\u00edsticas como sea posible, por lo que cualquier nueva incorporaci\u00f3n al c\u00f3digo debe venir con su propio conjunto de pruebas para evitar retroceder en este asunto.</li> <li>Para nuevas caracter\u00edsticas y mejoras, incluya documentaci\u00f3n y ejemplos. Tanto en el c\u00f3digo, como cadenas de documentaci\u00f3n en clases, funciones y m\u00f3dulos, y como documentaci\u00f3n adecuada que describa c\u00f3mo usar la nueva caracter\u00edstica.</li> <li>Siga las gu\u00edas de estilo</li> <li>Despu\u00e9s de enviar su solicitud de extracci\u00f3n, verifique que todas las verificaciones de estado est\u00e9n pasando \u00bfQu\u00e9 pasa si las verificaciones de estado fallan?Si una verificaci\u00f3n de estado falla y cree que el error no est\u00e1 relacionado con su cambio, deje un comentario en la solicitud de extracci\u00f3n explicando por qu\u00e9 cree que el error no est\u00e1 relacionado. Un encargado de mantenimiento volver\u00e1 a ejecutar la verificaci\u00f3n de estado por usted. Si concluimos que el error fue un falso positivo, abriremos un problema para rastrear ese problema con nuestro conjunto de verificaci\u00f3n de estado.</li> </ol> <p>Si bien los requisitos previos anteriores deben cumplirse antes de que se revise su solicitud de incorporaci\u00f3n de cambios, el revisor o los revisores pueden solicitarle que complete trabajo de dise\u00f1o adicional, pruebas u otros cambios antes de que su solicitud de incorporaci\u00f3n de cambios pueda ser finalmente aceptada.</p>"},{"location":"contributing/#guias-de-estilo","title":"Gu\u00edas de estilo","text":""},{"location":"contributing/#mensajes-de-confirmacion-de-git","title":"Mensajes de confirmaci\u00f3n de Git","text":"<ul> <li>Use el tiempo presente (\"Agregar caracter\u00edstica\" no \"Caracter\u00edstica agregada\")</li> <li>Use el modo imperativo (\"Mover el cursor a...\" no \"Mueve el cursor a...\")</li> <li>Limite la primera l\u00ednea a 72 caracteres o menos</li> <li>Haga referencia a problemas y solicitudes de incorporaci\u00f3n de cambios generosamente despu\u00e9s de la primera l\u00ednea</li> <li>Cuando solo cambie la documentaci\u00f3n, incluya <code>[ci skip]</code> en el t\u00edtulo de la confirmaci\u00f3n</li> <li>Considere comenzar el mensaje de confirmaci\u00f3n con un emoji aplicable:</li> <li> <code>:art:</code> cuando mejore el formato/estructura del c\u00f3digo</li> <li> <code>:racehorse:</code> cuando mejore el rendimiento</li> <li> <code>:non-potable_water:</code> cuando solucione fugas de memoria</li> <li> <code>:memo:</code> cuando escriba documentaci\u00f3n</li> <li> <code>:penguin:</code> cuando arregle algo en Linux</li> <li> <code>:apple:</code> cuando arregle algo en macOS</li> <li> <code>:checkered_flag:</code> al reparar algo en Windows</li> <li> <code>:bug:</code> al reparar un error</li> <li> <code>:fire:</code> al eliminar c\u00f3digo o archivos</li> <li> <code>:green_heart:</code> al reparar la compilaci\u00f3n de CI</li> <li> <code>:white_check_mark:</code> al agregar pruebas</li> <li> <code>:lock:</code> al lidiar con la seguridad</li> <li> <code>:arrow_up:</code> al actualizar dependencias</li> <li> <code>:arrow_down:</code> al degradar dependencias</li> <li> <code>:shirt:</code> al eliminar advertencias de linter</li> </ul>"},{"location":"contributing/#guia-de-estilo-de-la-documentacion","title":"Gu\u00eda de estilo de la documentaci\u00f3n","text":"<ul> <li>Use Markdown.</li> <li>M\u00e9todos y clases de referencia en Markdown con la notaci\u00f3n personalizada <code>{}</code>:</li> <li>Clases de referencia con <code>{ClassName}</code></li> <li>M\u00e9todos de instancia de referencia con <code>{ClassName::methodName}</code></li> <li>M\u00e9todos de clase de referencia con <code>{ClassName.methodName}</code></li> </ul>"},{"location":"importing_data/","title":"Importaci\u00f3n de datos","text":"<p>La raz\u00f3n de ser de Paricia es almacenar y facilitar el acceso a los datos hidrol\u00f3gicos. Por lo tanto, uno de sus componentes principales, que depende de todo lo dem\u00e1s, es el proceso de ingesta de datos.</p>"},{"location":"importing_data/#enviar-la-importacion-de-datos","title":"Enviar la importaci\u00f3n de datos","text":"<p>La importaci\u00f3n de datos se realiza a trav\u00e9s de la lista de importaci\u00f3n de Paricia, haciendo clic en el bot\u00f3n <code>Nuevo</code> en la parte superior de la p\u00e1gina.</p> <p>Figure 1: Lista de importaci\u00f3n de datos</p> <p>Se abrir\u00e1 un formulario en una nueva p\u00e1gina, que contiene varios campos para que los usuarios completen.</p> <p>Figure 2: Formulario para importar nuevos datos</p>"},{"location":"importing_data/#formato","title":"Formato","text":"<p>El Formato es la opci\u00f3n m\u00e1s importante a elegir. Si el formato no es correcto, el proceso de importaci\u00f3n fallar\u00e1, con suerte con un mensaje de error significativo que indique qu\u00e9 sali\u00f3 mal. Si no est\u00e1 seguro sobre qu\u00e9 formato elegir, puede explorar las opciones disponibles en el men\u00fa <code>Formato -&gt; Formato</code> y abrir los formatos sobre los que desea obtener m\u00e1s informaci\u00f3n.</p> <p>Dentro de la p\u00e1gina de formato espec\u00edfico, entre los diferentes ajustes como las columnas de fecha y hora, separador, etc. encontrar\u00e1 las Clasificaciones, es decir, la lista de variables y las columnas desde las que se importar\u00e1n si se utiliza ese formato. Los \u00edndices de las columnas comienzan en 0, por lo que una variable importada de la columna n\u00famero 2, por ejemplo, se importar\u00e1 desde la 3.\u00aa columna del archivo. Aseg\u00farese de que esta lista de clasificaciones coincida con la informaci\u00f3n que desea importar desde el archivo de datos.</p> <p>La siguiente figura muestra las clasificaciones disponibles para un formato en particular:</p> <p>Figure 3: Lista de clasificaciones de variables en columnas</p> <p>Al hacer clic en el <code>id</code> de cada clasificaci\u00f3n, se mostrar\u00e1 m\u00e1s informaci\u00f3n sobre esa clasificaci\u00f3n en particular. Tenga en cuenta que es posible que no tenga permiso para ver los detalles de esa clasificaci\u00f3n.</p>"},{"location":"importing_data/#estacion","title":"Estaci\u00f3n","text":"<p>Para la Estaci\u00f3n, el usuario solo podr\u00e1 elegir aquellas para las que tenga permiso <code>cambiar</code>. Para el Formato, podr\u00e1 elegir sus propios formatos y aquellos etiquetados como <code>p\u00fablicos</code>.</p> <p>La estaci\u00f3n debe estar completa, es decir, debe tener todos los campos obligatorios llenos, algo que podr\u00eda no ser el caso si la estaci\u00f3n fue importada a Paricia. Un campo que suele faltar es el <code>timezone</code>, si ese fuera el caso, se le notificar\u00e1 al intentar guardar la importaci\u00f3n de datos. Para solucionarlo, simplemente vaya a la p\u00e1gina de la estaci\u00f3n - <code>Station -&gt; Station</code> en el men\u00fa superior - y actualice los campos que faltan.</p>"},{"location":"importing_data/#procesar-los-datos","title":"Procesar los datos","text":"<p>Una vez que el formulario est\u00e9 completo, haga clic en <code>Save</code> en la parte superior de la p\u00e1gina y comenzar\u00e1 el proceso de importaci\u00f3n. Los datos se ingieren de forma asincr\u00f3nica, por lo que el usuario puede seguir utilizando Paricia. El estado del objeto de importaci\u00f3n de datos indica c\u00f3mo va el proceso:</p> <ul> <li>Not Queued: La ingesta de datos a\u00fan no ha comenzado.</li> </ul> <p>Figure 4: Ingesti\u00f3n de datos no en cola</p> <ul> <li>Queued: La ingesta de datos ha comenzado. El archivo de datos se ha abierto y se est\u00e1 procesando.</li> </ul> <p>Figure 5: Ingesti\u00f3n de datos en cola</p> <ul> <li>Completado: la ingesta de datos se ha completado correctamente. La informaci\u00f3n sobre las fechas de inicio y finalizaci\u00f3n de los datos en la zona horaria local del usuario, as\u00ed como la cantidad de registros, aparecer\u00e1n actualizadas</li> </ul> <p>Figure 6: Ingesti\u00f3n de datos completada</p> <ul> <li>Error: la ingesta de datos fall\u00f3. La informaci\u00f3n sobre lo que sali\u00f3 mal deber\u00eda aparecer en el cuadro de registro en la parte inferior del detalle de la importaci\u00f3n de datos. Intente solucionar los problemas, seg\u00fan los comentarios proporcionados, marque la casilla \"Reprocesar datos\" y guarde el formulario nuevamente para activar otro proceso de ingesta de datos.</li> </ul> <p>Figure 7: Error en la ingesta de datos</p> <p>Una vez que los datos se hayan ingerido correctamente, estar\u00e1n disponibles para su validaci\u00f3n en la Pantalla de validaci\u00f3n y en la pantalla de Informe, si la estaci\u00f3n a la que pertenecen est\u00e1 etiquetada como p\u00fablica o interna.</p>"},{"location":"installation/","title":"Instalaci\u00f3n","text":"<p>Hay dos configuraciones b\u00e1sicas que se pueden implementar para desarrollar y probar Paricia localmente:</p> <ul> <li>Entorno virtual, utilizado para el desarrollo diario del c\u00f3digo y la documentaci\u00f3n. Consulte la secci\u00f3n sobre configuraci\u00f3n del entorno virtual.</li> <li>Docker, utilizado para ejecutar la herramienta localmente, accesible en el navegador as\u00ed como para ejecutar pruebas. Consulte la secci\u00f3n sobre docker.</li> </ul>"},{"location":"installation/#entorno-virtual","title":"Entorno virtual","text":"<p>El desarrollo normal de software debe realizarse dentro de un entorno virtual, donde se instalan las herramientas y todas las dependencias que requiere Paricia. Esto permite ejecutar los linters, formateadores de c\u00f3digo y funciones de autocompletado apropiados del editor de c\u00f3digo espec\u00edficamente para Paricia. Adem\u00e1s, tambi\u00e9n le permite crear y desarrollar la documentaci\u00f3n.</p> <p>Para configurar un entorno virtual con todos los requisitos, navegue hasta el directorio ra\u00edz de Paricia en una terminal y ejecute (esto deber\u00eda funcionar en todas las plataformas):</p> <pre><code>python -m venv .venv\n</code></pre> <p>Esto crear\u00e1 un entorno Python aislado dentro de un directorio llamado <code>.venv</code>. Tenga en cuenta que Paricia requiere Python 3.11 o superior para funcionar. Una vez creado el entorno, podr\u00e1s activarlo con:</p> <pre><code>.venv\\Scripts\\activate\n</code></pre> <p>en Powershell, o</p> <pre><code>source .venv/bin/activate\n</code></pre> <p>en Bash/Zsh.</p> <p>Una vez en el entorno virtual se pueden instalar dependencias para desarrollo (linters, formateador, etc.) y documentaci\u00f3n, respectivamente, con:</p> <pre><code>python -m pip install -r requirements-dev.txt\npython -m pip install -r requirements-doc.txt\n</code></pre> <p>Entonces, la propia paricia se puede instalar con:</p> <pre><code>python -m pip install -e .\n</code></pre> <p>Eso deber\u00eda ser todo. El entorno virtual deber\u00e1 estar preparado para el desarrollo de Paricia y su documentaci\u00f3n. Simplemente indique a su editor de c\u00f3digo qu\u00e9 entorno est\u00e1 utilizando en caso de que no lo seleccione autom\u00e1ticamente.</p> <p>Ejecutando Paricia y pruebas</p> <p>No podr\u00e1 ejecutar Paricia ni las pruebas desde el entorno virtual porque esto requiere TimescaleDB, que no est\u00e1 instalado como parte del entorno virtual. Consulte la secci\u00f3n implementaci\u00f3n de Docker para aprender c\u00f3mo hacerlo.</p>"},{"location":"installation/#implementacion-de-docker","title":"Implementaci\u00f3n de Docker","text":"<p>La configuraci\u00f3n del desarrollador de Paricia requiere el uso de \"docker\" para administrar f\u00e1cilmente los diferentes servicios que lo componen, es decir, la aplicaci\u00f3n web en s\u00ed y la base de datos, y hacer que la herramienta sea accesible desde el navegador web. Tambi\u00e9n es necesario realizar las pruebas.</p> <p>Los pasos para configurar su sistema en este caso son:</p> <ul> <li>Instalar [Docker] (https://www.docker.com/)</li> <li>En una terminal, ejecute <code>docker-compose up --build</code>. Esto extraer\u00e1 las im\u00e1genes de la ventana acoplable de Internet, crear\u00e1 las locales e iniciar\u00e1 los servicios. Dependiendo de su conexi\u00f3n a Internet, es posible que tarde unos minutos en completarse.</li> <li>Despu\u00e9s de descargar y crear las im\u00e1genes, Paricia ahora deber\u00eda estar disponible a trav\u00e9s de un navegador web en <code>http://localhost:8000/</code>.</li> <li>Cree un usuario admin siguiendo las instrucciones de la l\u00ednea de comando descritas en la secci\u00f3n Administrador de Paricia.</li> </ul> <p>Si quieres cargar datos iniciales (variables, unidades, estaciones...):</p> <ul> <li>En una terminal separada, ejecute <code>docker exec -it &lt;name_of_docker_container&gt; bash</code>, p. <code>docker exec -it paricia-web-1 bash</code> para iniciar una sesi\u00f3n bash en el contenedor. Puede encontrar el nombre del contenedor en la GUI de Docker Desktop o ejecutando <code>docker ps</code>.</li> <li>Ejecute <code>python enable.py shell &lt;utilidades/load_initial_data.py</code>.</li> </ul>"},{"location":"installation/#ejecutando-paricia-despues-de-la-instalacion-inicial","title":"Ejecutando Paricia despu\u00e9s de la instalaci\u00f3n inicial","text":"<p>Una vez realizada la configuraci\u00f3n inicial, puede:</p> <ul> <li>Detener los contenedores con <code>docker compose down</code></li> <li>Reiniciar los contenedores con <code>docker compose up</code>. No es necesario ejecutar con el indicador <code>--build</code> a menos que alguna dependencia haya cambiado.</li> <li>Si desea utilizar el mismo terminal, puede ejecutar los servicios en modo independiente con <code>docker compose up -d</code>.</li> </ul> <p>A menos que destruya el volumen de Docker que contiene la base de datos o lo vac\u00ede manualmente, la base de datos persistir\u00e1 entre llamadas posteriores a Docker Compose.</p>"},{"location":"installation/#construyendo-la-documentacion","title":"Construyendo la documentaci\u00f3n","text":"<p>La documentaci\u00f3n utiliza <code>mkdocs</code>. Esto deber\u00eda haberse instalado junto con todas las dem\u00e1s dependencias relacionadas con documentos si ejecuta <code>python -m pip install -r requisitos-doc.txt</code>, como se describe anteriormente. No es necesario utilizar <code>docker</code> para crear la documentaci\u00f3n localmente.</p> <p>Debido a la naturaleza multiling\u00fce de la documentaci\u00f3n, la forma normal de servir la documentaci\u00f3n (a trav\u00e9s de los comandos 'mkdocs build' y 'mkdocs serve') no funcionar\u00e1 aqu\u00ed. En su lugar, debe utilizar los siguientes comandos para crear la documentaci\u00f3n:</p> <pre><code>mkdocs build -f config/en/mkdocs.yml\nmkdocs build -f config/es/mkdocs.yml\n</code></pre> <p>La documentaci\u00f3n ahora est\u00e1 disponible en la carpeta sites/. Desde all\u00ed, puede servirla con el servidor http de Python:</p> <pre><code>cd sites/\npython3 -m http.server 8001\n</code></pre> <p>Ahora se puede acceder al sitio de documentaci\u00f3n a trav\u00e9s de un navegador web en http://localhost:8001</p> <p>La raz\u00f3n para usar expl\u00edcitamente <code>localhost:8001</code> es porque el puerto <code>8000</code>, el predeterminado, probablemente ya est\u00e9 en uso por la aplicaci\u00f3n web Paricia.</p>"},{"location":"introduction/","title":"Introducci\u00f3n","text":"<p>Esta gu\u00eda ayudar\u00e1 a los usuarios de Paricia a familiarizarse con su funcionalidad y comenzar a utilizar sus caracter\u00edsticas.</p> <p>Hay dos tipos de usuarios de Paricia: aquellos que est\u00e1n interesados \u200b\u200ben explorar los datos disponibles (ya sean usuarios registrados o no) y aquellos que administran estaciones y desean crear nuevas entradas en la base de datos. El primer grupo puede simplemente consultar la documentaci\u00f3n de Informes, ya que contiene toda la informaci\u00f3n que necesitar\u00e1n. Los dem\u00e1s deben familiarizarse con todas las p\u00e1ginas de esta gu\u00eda de usuario.</p> <p>No deber\u00eda ser necesario consultar la documentaci\u00f3n para desarrolladores, pero puede ser \u00fatil, ocasionalmente, echar un vistazo a las Pautas de contribuci\u00f3n si detecta algo que no funciona como se espera y desea informarlo, y a la P\u00e1gina de aplicaciones, donde hay descripciones muy detalladas de los modelos que componen Paricia.</p>"},{"location":"permissions/","title":"Sistema de permisos","text":"<p>El sistema de permisos de Paricia est\u00e1 dise\u00f1ado para permitir que los administradores de datos agreguen y validen nuevos datos, y que el p\u00fablico en general vea y recupere los datos publicados p\u00fablicamente. Al mismo tiempo, garantiza la coherencia de los datos al evitar que los datos enviados se vuelvan hu\u00e9rfanos, por ejemplo, por la eliminaci\u00f3n accidental de informaci\u00f3n clave de la que dependen.</p> <p>Se aplican los siguientes principios:</p> <ul> <li>Los usuarios an\u00f3nimos (usuarios no registrados) pueden ver datos en la herramienta de informes de estaciones que est\u00e1n etiquetadas como p\u00fablicas. Estas estaciones tambi\u00e9n aparecen en el mapa de la p\u00e1gina principal.</li> <li>Los usuarios registrados pueden:</li> <li>Ver datos de estaciones propiedad de otros usuarios y etiquetadas como p\u00fablicas o internas, as\u00ed como sus propios datos.</li> <li>Crear nuevos elementos, como formatos, sensores, estaciones, etc. Estos elementos pueden depender de otros objetos p\u00fablicos u objetos privados propiedad del usuario.</li> <li>Cargar nuevos datos en estaciones para las que tienen permiso de <code>cambio</code> (esto incluye estaciones de su propiedad).</li> <li>Validar datos asociados a estaciones para las que tienen permiso de \"cambio\" (esto incluye estaciones de su propiedad).</li> <li>Los Usuarios administradores pueden:</li> <li>Administrar todos los datos y objetos, privados o p\u00fablicos.</li> <li>Administrar usuarios.</li> </ul> <p>Eliminaci\u00f3n de objetos</p> <p>Los objetos en la base de datos no se pueden eliminar si son utilizados por otros objetos, independientemente de los permisos del usuario (incluso en el caso de usuarios administradores). Por ejemplo, si un formato particular usa cierto delimitador, ese objeto delimitador no se puede eliminar. Todos los objetos asociados deben eliminarse primero. Ver discusi\u00f3n aqu\u00ed.</p>"},{"location":"permissions/#visibilidad-de-objetos","title":"Visibilidad de objetos","text":"<p>El atributo visibilidad de todos los objetos en la base de datos controla si el objeto puede ser visto por usuarios an\u00f3nimos y referenciado por otros usuarios registrados en sus propios objetos. Al crear un nuevo objeto, los usuarios deben tener cuidado de seleccionar un nivel de visibilidad apropiado para su caso de uso (p\u00fablico o privado). Si el objeto es p\u00fablico, entonces puede ser referenciado por objetos de otros usuarios y por lo tanto no ser\u00e1 posible eliminarlo, si fuera necesario en alg\u00fan momento, ya que el propietario del objeto no tendr\u00e1 acceso a los objetos asociados que hacen referencia a los suyos.</p> <p>Las estaciones son un poco diferentes a otros objetos en el siguiente sentido:</p> <ul> <li>Para poder hacer referencia a ellas, un usuario debe tener permiso de <code>cambio</code> para esa estaci\u00f3n. Hacerlas p\u00fablicas no es suficiente, eso solo hace que sus datos est\u00e9n disponibles p\u00fablicamente.</li> <li>Tienen otro nivel de visibilidad, <code>interno</code>, que permite que los datos de la estaci\u00f3n sean visibles solo para usuarios registrados.</li> </ul> <p>La visibilidad de los nuevos objetos siempre es privada por defecto.</p> <p>Permiso de <code>cambio</code> de estaciones</p> <p>Solo los usuarios administradores pueden dar permiso de <code>cambio</code> para una estaci\u00f3n a otro usuario. Esto se hace a trav\u00e9s de la p\u00e1gina de administraci\u00f3n de esa estaci\u00f3n.</p>"},{"location":"quality_assurance/","title":"Seguro de calidad","text":""},{"location":"quality_assurance/#pruebas","title":"Pruebas","text":"<p>Las pruebas se ejecutan con <code>python enable.py test</code> desde el interior del contenedor acoplable (consulte las instrucciones de instalaci\u00f3n para ver c\u00f3mo hacerlo).</p> <p>Para que eso funcione, es necesario instalar dependencias relacionadas con el desarrollo. Ya deber\u00edan estarlo, pero si no es as\u00ed, entra en el contenedor y ejecuta:</p> <pre><code>python -m pip install -r requirements-dev.txt\n</code></pre> <p>Las pruebas se crean utilizando el marco \"unittest\". Lea la documentaci\u00f3n de Pruebas en Django sobre c\u00f3mo escribir pruebas para una aplicaci\u00f3n Django.</p>"},{"location":"quality_assurance/#ejecutar-pruebas-seleccionadas","title":"Ejecutar pruebas seleccionadas","text":"<p>El comando anterior ejecutar\u00e1 todas las pruebas disponibles. Sin embargo, a menudo (especialmente durante la depuraci\u00f3n) querr\u00e1s ejecutar s\u00f3lo pruebas espec\u00edficas. Para hacerlo, escriba las pruebas o grupo o pruebas que desea ejecutar usando la notaci\u00f3n de puntos para indicar la ruta a la prueba:</p> <ul> <li>Ejecutar una prueba espec\u00edfica, por ejemplo. <code>test_launch_reports_calculation</code></li> </ul> <pre><code>python manage.py test tests.measurement.test_reporting.TestReporting.test_launch_reports_calculation\n</code></pre> <ul> <li>Ejecutar todas las pruebas dentro de una clase de prueba, por ejemplo. <code>TestReporting</code></li> </ul> <pre><code>python manage.py test tests.measurement.test_reporting.TestReporting\n</code></pre> <ul> <li>Ejecutar todas las pruebas dentro de un directorio, por ejemplo. <code>measurement</code>, dentro del directorio <code>test</code></li> </ul> <pre><code>python manage.py test tests.measurement\n</code></pre>"},{"location":"quality_assurance/#integracion-continua","title":"Integraci\u00f3n continua","text":""},{"location":"quality_assurance/#ganchos-de-confirmacion-previa","title":"Ganchos de confirmaci\u00f3n previa","text":"<p>Los enlaces de confirmaci\u00f3n previa est\u00e1n configurados para ejecutar comprobaciones de calidad del c\u00f3digo (<code>ruff</code> y <code>mypy</code>) antes de la confirmaci\u00f3n. Para ejecutarlos localmente, necesitar\u00e1 \"pip install pre-commit\" y luego \"pre-commit install\". Ahora, las herramientas de control de calidad se ejecutar\u00e1n autom\u00e1ticamente con cada confirmaci\u00f3n.</p>"},{"location":"quality_assurance/#flujos-de-trabajo-de-github","title":"Flujos de trabajo de GitHub","text":"<p>Los flujos de trabajo de Github est\u00e1n configurados para ejecutar lo siguiente autom\u00e1ticamente:</p> <ul> <li>Con cada env\u00edo a una sucursal con una solicitud de extracci\u00f3n abierta:</li> <li>Ejecute la confirmaci\u00f3n previa en todos los archivos (como ejecutar localmente <code>pre-commit run --all-files</code>). Esto se hace en un servicio externo, precommit.ci</li> <li>Ejecute el conjunto de pruebas completo.</li> <li>Consultar enlaces en la documentaci\u00f3n.</li> <li>Construir la documentaci\u00f3n (no implementarla)</li> <li>Cuando se crea una nueva versi\u00f3n en GitHub:</li> <li>Todo lo anterior, y en caso de tener \u00e9xito,</li> <li>La nueva versi\u00f3n de la documentaci\u00f3n est\u00e1 publicada en GitHub Pages</li> <li>Se crea una imagen acoplable para Paricia y se publica en el [Registro de contenedores de GitHub] (https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry)</li> </ul> <p>Si alguna implementaci\u00f3n de Paricia est\u00e1 buscando nuevas versiones en el registro, la nueva versi\u00f3n podr\u00eda desencadenar una actualizaci\u00f3n autom\u00e1tica de dicha implementaci\u00f3n.</p> <p>Adem\u00e1s, el repositorio de Paricia est\u00e1 configurado para recibir actualizaciones autom\u00e1ticas de paquetes y dependencias a trav\u00e9s de bots <code>dependabot</code> y <code>pre-commit</code>. Peri\u00f3dicamente, abrir\u00e1n solicitudes de extracci\u00f3n con las versiones actualizadas y, si las comprobaciones anteriores tienen \u00e9xito, se fusionar\u00e1n autom\u00e1ticamente. Si bien a veces es necesaria la intervenci\u00f3n manual si las versiones actualizadas no funcionan, este proceso ayuda a mantener Paricia actualizada y simplifica el trabajo de los mantenedores.</p>"},{"location":"reports/","title":"Informes","text":"<p>Patricia expone los datos que contiene a trav\u00e9s de la p\u00e1gina Informes.</p> <p>Esta p\u00e1gina contiene un formulario en el lado izquierdo y un gr\u00e1fico en el derecho, que mostrar\u00e1 los datos seleccionados en el formulario. No se muestran datos en el gr\u00e1fico al acceder a la p\u00e1gina.</p> <p>Figure 1: Formulario para completar en la p\u00e1gina del informe</p>"},{"location":"reports/#tipos-de-informes","title":"Tipos de informes","text":"<p>Hay 5 tipos de informes que se pueden seleccionar:</p> <ul> <li>Mediciones en bruto: Las mediciones originales, tal como fueron enviadas desde la estaci\u00f3n.</li> <li>Mediciones validadas: Son las mediciones validadas luego de ser revisadas por un operador, el cual podr\u00e1 eliminar o cambiar algunas de ellas por resultar incorrectas o sospechosas.</li> <li>Horario: Agregaci\u00f3n de los datos validados en periodos horarios.</li> <li>Diaria: Agregando los datos horarios en periodos diarios.</li> <li>Mensual: Agregando los datos diarios en periodos mensuales.</li> </ul> <p>Todos los datos tendr\u00e1n un informe de mediciones sin procesar, pero los dem\u00e1s estar\u00e1n disponibles solo si los datos han sido validados.</p>"},{"location":"reports/#estaciones-variables-y-rango-de-fechas","title":"Estaciones, variables, y rango de fechas","text":"<p>El usuario solo podr\u00e1 seleccionar estaciones que pueda ver, lo que significa que los usuarios que no est\u00e9n registrados ver\u00e1n solo estaciones que sean p\u00fablicas. Los usuarios registrados ver\u00e1n estaciones p\u00fablicas e internas, as\u00ed como las suyas propias, si las hubiera. Consulte los Permisos para obtener m\u00e1s detalles sobre los permisos de cada usuario.</p> <p>Despu\u00e9s de seleccionar una estaci\u00f3n, al usuario se le presentar\u00e1n las variables disponibles para esa estaci\u00f3n, as\u00ed como el rango de datos.</p> <p>Una vez que se selecciona la estaci\u00f3n, la variable y el rango de fechas elegidos, hay dos opciones: descargar los datos, que descargar\u00e1 el registro como un archivo CSV, o trazar los datos.</p>"},{"location":"reports/#informe-de-trama","title":"Informe de trama","text":"<p>El gr\u00e1fico del informe implementa un zoom progresivo, lo que significa que, en general, no mostrar\u00e1 todos los datos dentro del rango (que podr\u00edan ser millones de puntos), sino s\u00f3lo una fracci\u00f3n de ellos, para acelerar la transferencia de datos desde el servidor.</p> <p>El usuario puede hacer zoom, seleccionar la regi\u00f3n de inter\u00e9s y se mostrar\u00e1n datos m\u00e1s precisos en esa \u00e1rea. Esto puede continuar hasta que los datos mostrados sean el conjunto de datos completo para ese rango. El t\u00edtulo del gr\u00e1fico indica el nivel de agregaci\u00f3n, es decir, la diferencia de tiempo promedio entre los puntos de datos que se muestra si no se muestran todos los puntos de datos.</p> <p>La siguiente figura muestra la temperatura ambiente en un periodo de unas semanas. El t\u00edtulo indica un nivel de agregaci\u00f3n de alrededor de 23 minutos, lo que significa que los puntos de datos mostrados est\u00e1n separados por 23 minutos en promedio. Tenga en cuenta que no se realiza ning\u00fan procesamiento en los datos - no hay promedio ni manipulaci\u00f3n de otro tipo - simplemente se traza una selecci\u00f3n de puntos de datos existentes en todo el rango. En otras palabras, si la separaci\u00f3n de datos original fue de 5 minutos, entonces un nivel de agregaci\u00f3n de 23 minutos significa que solo se traza 1 punto entre 4 o 5.</p> <p>Figure 2: Gr\u00e1fico con agregaci\u00f3n de datos de 23,6 minutos</p> <p>En el siguiente gr\u00e1fico, hemos ampliado un poco y ahora la separaci\u00f3n media es de 15 min.</p> <p>Figure 3: Gr\u00e1fico con agregaci\u00f3n de datos de 15 minutos</p> <p>En el gr\u00e1fico final, el zoom es lo suficientemente alto como para que no sea necesaria ninguna agregaci\u00f3n.</p> <p>Figure 4: Gr\u00e1fico sin agregaci\u00f3n de datos</p> <p>En todos los casos, para volver al rango completo, utilice las herramientas en la esquina superior derecha del gr\u00e1fico o haga doble clic en \u00e9l.</p>"},{"location":"reports/#picos-faltantes","title":"Picos faltantes","text":"<p>El enfoque elegido para seleccionar los datos a trazar (s\u00f3lo omitiendo puntos) es extremadamente r\u00e1pido ya que no se requiere procesamiento de datos, pero tiene algunos inconvenientes. En particular, como la visualizaci\u00f3n de los datos omite algunos puntos, cuantos m\u00e1s puntos, mayor ser\u00e1 el nivel de agregaci\u00f3n, es posible que se pierdan algunas caracter\u00edsticas de los datos.</p> <p>Por ejemplo, si ampliamos la primera parte de la serie, podemos ver algunos puntos de datos (muy probablemente incorrectos) que disparan hasta 50. Estos no eran visibles en la vista general.</p> <p>Figure 5: Trazar con picos cuando hay suficiente zoom</p>"},{"location":"synthetic_data/","title":"Datos sint\u00e9ticos","text":"<p>Los datos sint\u00e9ticos se pueden agregar a la base de datos para fines de evaluaci\u00f3n comparativa utilizando uno de los escenarios en \"utilidades/evaluaci\u00f3n comparativa\" o creando uno propio. Para hacerlo:</p> <ul> <li>Complete la base de datos con algunos datos iniciales para la <code>Station</code>, la <code>Variable</code> y todos los modelos requeridos (consulte la secci\u00f3n Introducci\u00f3n).</li> <li>Instalar las dependencias de desarrollo (lea la secci\u00f3n Pruebas)</li> <li>Ejecute el escenario de datos sint\u00e9ticos que desee.</li> </ul> <p>Si ejecuta uno de los integrados, deber\u00eda ver una barra de progreso para el proceso y, si inicia sesi\u00f3n en el administrador de Django de Paricia (<code>http://localhost:8000/admin</code>), ver\u00e1 los registros. para el modelo <code>Medidas</code> creciente.</p>"},{"location":"validation/","title":"Validaci\u00f3n","text":"<p>La validaci\u00f3n es el proceso mediante el cual un operador revisa los datos ingeridos por la base de datos y los descarta, modifica o acepta y, por lo tanto, se utiliza para crear informes.</p>"},{"location":"validation/#seleccionando-los-datos-a-validar","title":"Seleccionando los datos a validar","text":"<p>El proceso comienza seleccionando los datos a validar en la p\u00e1gina de validaci\u00f3n. Solo los usuarios registrados con permisos de cambio para una estaci\u00f3n en particular pueden validar los datos de esa estaci\u00f3n. Una vez seleccionada la estaci\u00f3n, se muestran las variables disponibles para esa estaci\u00f3n, as\u00ed como otros filtros basados en sus valores, rango de fechas o estado. De forma predeterminada, todos los datos no validados para la variable y estaci\u00f3n seleccionadas se muestran una vez que se hace clic en el bot\u00f3n \"Enviar\".</p> <p>Figure 1: Selecci\u00f3n de los datos a validar</p> <p>Minimizar el intervalo de fechas</p> <p>Si bien la base de datos puede manejar consultas de millones de entradas a la vez, dichos datos deber\u00e1n manipularse, analizarse previamente en busca de valores sospechosos y luego enviarse desde el servidor al navegador e incluirse en la tabla y el gr\u00e1fico debajo. Por lo tanto, es importante que los usuarios elijan s\u00f3lo el rango de fechas que les interesa explorar para minimizar los tiempos de carga y hacer que todo el proceso sea m\u00e1s fluido.</p>"},{"location":"validation/#el-informe-diario","title":"El informe diario","text":"<p>Despu\u00e9s de enviar la solicitud de datos, se muestra una tabla con un informe diario, as\u00ed como un gr\u00e1fico debajo. Ambos son \u00fatiles para identificar entradas sospechosas en los datos que deben corregirse o descartarse manualmente.</p> <p>Por ejemplo, la siguiente imagen muestra que hay un problema el primer d\u00eda, 2023-03-14, resaltando en rojo la celda problem\u00e1tica. En particular, muestra que, seg\u00fan la diferencia horaria esperada entre puntos de datos (tomada como la moda de la diferencia horaria para todos los datos en el rango), solo se espera el 80% de los datos para este d\u00eda. Adem\u00e1s, ese d\u00eda hay 2 entradas sospechosas.</p> <p>Figure 2: Informe diario que muestra algunas entradas sospechosas</p> <p>Si nos desplazamos hacia abajo en la tabla, podemos ver que hay m\u00e1s problemas con estos datos. El \u00faltimo d\u00eda s\u00f3lo tiene el 21% de los datos esperados, dos entradas sospechosas y un problema con el campo <code>valor</code>. El pen\u00faltimo es a\u00fan peor, con el doble de entradas de las que deber\u00eda y m\u00e1s de 303 de ellas sospechosas. El gr\u00e1fico siguiente tambi\u00e9n apunta a un problema potencial: una brecha en la serie de datos.</p> <p>Figure 3: Informe diario con m\u00e1s entradas sospechosas y la trama</p>"},{"location":"validation/#el-detalle-del-dia","title":"El detalle del d\u00eda","text":"<p>Para saber exactamente de qu\u00e9 se tratan las entradas sospechosas, podemos seleccionar el d\u00eda concreto en el selector de fechas de la esquina inferior derecha. Las entradas del d\u00eda seleccionado se mostrar\u00e1n en otra pesta\u00f1a dentro de la misma tabla.</p> <p>Podemos encontrar las entradas sospechosas, 2 en el primer caso, desplaz\u00e1ndonos por la tabla en busca de celdas marcadas. Podemos ver que dos entradas est\u00e1n marcadas juntas, en la columna de tiempo. Esto indica un problema con el momento de estas entradas. Se puede observar que el problema es que la periodicidad no es la correcta, con una separaci\u00f3n de 2 y 3 minutos respecto al punto anterior, mientras que esa separaci\u00f3n deber\u00eda ser de 5 min seg\u00fan los metadatos de la estaci\u00f3n. Lo m\u00e1s probable es que el punto de la l\u00ednea 95 no est\u00e9 all\u00ed.</p> <p>Figure 4: Explorando el origen de las entradas sospechosas</p> <p>El segundo caso tiene errores m\u00e1s dr\u00e1sticos. Cuando entramos en el detalle del 30-03-2023 podemos ver que todas las entradas est\u00e1n duplicadas, teniendo dos puntos por marca de tiempo (o casi, con apenas 1 o 2 segundos de diferencia). Esto, combinado con los datos faltantes para el 31-03-2023 y el hecho de que tenemos exactamente el doble de registros, sugiere que la mitad de ellos en realidad corresponden al d\u00eda siguiente. A continuaci\u00f3n vemos c\u00f3mo editar las entradas.</p> <p>Pero ese no es el \u00fanico problema. Algunas celdas de valores tambi\u00e9n est\u00e1n marcadas. En este caso, la entrada ha sido marcada, muy probablemente, porque hay una diferencia demasiado grande con el punto anterior. La diferencia aceptable se define en [Objeto variable] (Aplicaciones/variable.md). Si nos desplazamos hacia abajo podremos ver muchas otras entradas que tienen el mismo problema.</p> <p>Figure 5: Explorando m\u00e1s entradas sospechosas</p>"},{"location":"validation/#que-esta-marcado","title":"\u00bfQu\u00e9 est\u00e1 marcado?","text":"<p>La siguiente lista muestra las comprobaciones que se realizan para decidir si una entrada es sospechosa o no:</p> <ul> <li>La diferencia horaria respecto al punto anterior es igual (dentro de una cierta tolerancia) que la diferencia horaria m\u00e1s habitual para el rango horario solicitado.</li> <li>El n\u00famero de entradas del d\u00eda es correcto, es decir, la fracci\u00f3n de recuento diario es 1, bas\u00e1ndose en la misma diferencia horaria.</li> <li>El valor est\u00e1 dentro del m\u00ednimo y m\u00e1ximo.</li> <li>El valor no difiere demasiado respecto al anterior.</li> </ul>"},{"location":"validation/#editar-datos-manualmente","title":"Editar datos manualmente","text":"<p>Una vez que una entrada ha sido identificada como sospechosa, se pueden hacer dos cosas:</p> <ol> <li>Desmarca esa entrada, para que quede desactivada y no utilizada en los informes. Puedes deseleccionar d\u00edas completos, no solo entradas individuales.</li> <li>Edite manualmente la entrada</li> </ol> <p>Para hacer esto, simplemente haga doble clic en la celda para editar y cambiar el valor al que sea necesario. Tenga cuidado al editar fechas, ya que el formato debe ser el correcto para que sea una entrada v\u00e1lida.</p> <p>Figure 6: Editando una entrada</p>"},{"location":"validation/#confirmando-validacion","title":"Confirmando validaci\u00f3n","text":"<p>Una vez que hayas deseleccionado los datos que no son v\u00e1lidos o los hayas editado, entonces estar\u00e1 listo para ser validado. Para hacer esto, simplemente haga clic en el bot\u00f3n \"Validar\" en la parte inferior izquierda de la tabla. Puedes validar d\u00edas individuales, si est\u00e1s en la vista Detallada, o toda la tabla.</p> <p>Los datos que hayan sido deseleccionados ser\u00e1n validados pero fijados como inactivos, es decir, no ser\u00e1n utilizados para el c\u00e1lculo de los informes horarios, diarios y mensuales.</p> <p>La validaci\u00f3n de los datos activa autom\u00e1ticamente el c\u00e1lculo del informe. Este c\u00e1lculo puede llevar m\u00e1s o menos tiempo seg\u00fan el tama\u00f1o del conjunto de datos. Una vez concluido, la p\u00e1gina se actualiza y no deber\u00eda mostrar ning\u00fan dato en la tabla, ya que los filtros seleccionados inicialmente, que inclu\u00edan mostrar solo datos no validados, no tienen ninguna coincidencia.</p>"},{"location":"Applications/","title":"Aplicaciones de Paricia","text":"<p>Toda la funcionalidad de Parcia est\u00e1 contenida en varias aplicaciones de Django, cada una de ellas, a su vez, incluye uno o m\u00e1s modelos de base de datos que definen esa funcionalidad.</p> <ul> <li>Formatting: definiciones de los diferentes formatos de archivo que se pueden importar, incluyendo detalles sobre delimitadores, encabezados, etc.</li> <li>Variable: Informaci\u00f3n sobre las variables medidas, incluyendo unidades, valores m\u00e1ximos/m\u00ednimos permitidos, etc.</li> <li>Sensor: Informaci\u00f3n sobre sensores f\u00edsicos, incluyendo marca y tipo.</li> <li>Station: Todo lo relacionado con las estaciones f\u00edsicas, incluida su ubicaci\u00f3n, regi\u00f3n, ecosistema, etc.</li> <li>Importing: Las entradas se crean en esta aplicaci\u00f3n cuando se importan conjuntos de datos, almacenando informaci\u00f3n sobre el archivo de datos sin procesar, el usuario, el momento de la importaci\u00f3n, etc.</li> <li>Measurement: Los datos de series temporales reales se almacenan aqu\u00ed cuando se importan archivos de datos sin procesar.</li> </ul> <p>Los objetos de todas estas aplicaciones, excepto Measurements, pueden ser administrados por usuarios registrados a trav\u00e9s de los formularios correspondientes en el front-end, y para superusuarios tambi\u00e9n a trav\u00e9s de las p\u00e1ginas de administraci\u00f3n.</p>"},{"location":"Applications/#otras-utilidades","title":"Otras utilidades","text":"<p>Adem\u00e1s de las aplicaciones que contienen la funcionalidad real, la estructura de archivos del proyecto tiene otros directorios que son de inter\u00e9s solo para los desarrolladores.</p> <ul> <li>El directorio de nivel superior contiene varios archivos de configuraci\u00f3n y directorios para git, github, docker y pip.</li> <li>Cada aplicaci\u00f3n de Django se encuentra en un subdirectorio y <code>djangomain</code> contiene las configuraciones, vistas y URL principales de Django.</li> <li>La aplicaci\u00f3n Management contiene el modelo de usuario personalizado, las clases de permisos base y las vistas base, que utilizan todas las dem\u00e1s aplicaciones para guardar el c\u00f3digo repetitivo.</li> <li>El directorio <code>static</code> contiene los archivos est\u00e1ticos del proyecto.</li> <li>El directorio <code>templates</code> contiene las plantillas del proyecto, que se utilizan para representar las diferentes vistas en el navegador.</li> <li>El directorio <code>utilities</code> contiene funciones auxiliares para el proyecto.</li> <li>El directorio <code>tests</code> contiene todas las pruebas unitarias del proyecto.`az</li> </ul>"},{"location":"Applications/formatting/","title":"Formato","text":""},{"location":"Applications/formatting/#introduccion","title":"Introducci\u00f3n","text":"<p>La aplicaci\u00f3n de formato describe c\u00f3mo se debe ingerir un archivo de datos: qu\u00e9 columnas considerar, qu\u00e9 variables contienen, el formato de fecha y hora, etc. Un resumen de los modelos involucrados se puede ver en el siguiente diagrama:</p> <p>Figure 1: Diagrama UML de los modelos de la aplicaci\u00f3n de formato.</p>"},{"location":"Applications/formatting/#componentes-basicos","title":"Componentes b\u00e1sicos","text":""},{"location":"Applications/formatting/#formatting.models.Extension","title":"<code>Extension</code>","text":"<p>Extension of the data file.</p> <p>It is mostly used to choose the tool to be employed to ingest the data. While it can take any value, there is currently explicit support only for <code>xlsx</code> and <code>xlx</code>. Anything else will be interpreted as a text file and loaded using <code>pandas.read_csv</code>.</p> <p>Attributes:</p> Name Type Description <code>extension_id</code> <code>AutoField</code> <p>Primary key.</p> <code>value</code> <code>CharField</code> <p>The extension value. eg. <code>xlsx</code>, <code>xlx</code>, <code>txt</code>.</p>"},{"location":"Applications/formatting/#formatting.models.Delimiter","title":"<code>Delimiter</code>","text":"<p>Delimiter between columns in the data file.</p> <p>One or more characters that separate columns in a text file. The most common values are <code>,</code>, <code>;</code>, and <code>\\t</code> (tab).</p> <p>Attributes:</p> Name Type Description <code>delimiter_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>The name of the delimiter. eg. <code>comma</code>, <code>semicolon</code>, <code>tab</code>.</p> <code>character</code> <code>CharField</code> <p>The character used as a delimiter. eg. <code>,</code>, <code>;</code>, <code>\\t</code>.</p>"},{"location":"Applications/formatting/#formatting.models.Date","title":"<code>Date</code>","text":"<p>Date format.</p> <p>Format string for the date column. It is used to parse the date column in the data file. The format string must be compatible with the <code>datetime</code> module in Python. See the datetime documentation for more information on valid format codes.</p> <p>Attributes:</p> Name Type Description <code>date_id</code> <code>AutoField</code> <p>Primary key.</p> <code>date_format</code> <code>CharField</code> <p>The format string for the date column in human readable form, eg. <code>DD-MM-YYYY</code>.</p> <code>code</code> <code>CharField</code> <p>The code used to parse the date column, eg. <code>%d-%m-%Y</code>.</p>"},{"location":"Applications/formatting/#formatting.models.Time","title":"<code>Time</code>","text":"<p>Time format.</p> <p>Format string for the time column. It is used to parse the time column in the data file. The format string must be compatible with the <code>datetime</code> module in Python. See the datetime documentation for more information on valid format codes.</p> <p>Attributes:</p> Name Type Description <code>date_id</code> <code>AutoField</code> <p>Primary key.</p> <code>date_format</code> <code>CharField</code> <p>The format string for the date column in human readable form, eg. <code>HH:MM:SS 24H</code>.</p> <code>code</code> <code>CharField</code> <p>The code used to parse the date column, eg. <code>%H:%M:%S</code>.</p>"},{"location":"Applications/formatting/#componentes-principales","title":"Componentes principales","text":""},{"location":"Applications/formatting/#formatting.models.Format","title":"<code>Format</code>","text":"<p>Details of the data file format, describing how to read the file.</p> <p>It combines several properties, such as the file extension, the delimiter, the date and time formats, and the column indices for the date and time columns, instructing how to read the data file and parse the dates. It is mostly used to ingest data from text files, like CSV.</p> <p>Attributes:</p> Name Type Description <code>format_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Short name of the format entry.</p> <code>description</code> <code>TextField</code> <p>Description of the format.</p> <code>extension</code> <code>ForeignKey</code> <p>The extension of the data file.</p> <code>delimiter</code> <code>ForeignKey</code> <p>The delimiter between columns in the data file. Only required for text files.</p> <code>first_row</code> <code>PositiveSmallIntegerField</code> <p>Index of the first row with data, starting in 0.</p> <code>footer_rows</code> <code>PositiveSmallIntegerField</code> <p>Number of footer rows to be ignored at the end.</p> <code>date</code> <code>ForeignKey</code> <p>Format for the date column. Only required for text files.</p> <code>date_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the date column, starting in 0.</p> <code>time</code> <code>ForeignKey</code> <p>Format for the time column. Only required for text files.</p> <code>time_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the time column, starting in 0.</p>"},{"location":"Applications/formatting/#formatting.models.Classification","title":"<code>Classification</code>","text":"<p>Contains instructions on how to classify the data into a specific variable.</p> <p>In particular, it links a format to a variable, and provides the column indices for the value, maximum, and minimum columns, as well as the validator columns. It also contains information on whether the data is accumulated, incremental, and the resolution of the data.</p> <p>Attributes:</p> Name Type Description <code>cls_id</code> <code>AutoField</code> <p>Primary key.</p> <code>format</code> <code>ForeignKey</code> <p>The format of the data file.</p> <code>variable</code> <code>ForeignKey</code> <p>The variable to which the data belongs.</p> <code>value</code> <code>PositiveSmallIntegerField</code> <p>Index of the value column, starting in 0.</p> <code>maximum</code> <code>PositiveSmallIntegerField</code> <p>Index of the maximum value column, starting in 0.</p> <code>minimum</code> <code>PositiveSmallIntegerField</code> <p>Index of the minimum value column, starting in 0.</p> <code>value_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the value validator column, starting in 0.</p> <code>value_validator_text</code> <code>CharField</code> <p>Value validator text.</p> <code>maximum_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the maximum value validator column, starting in 0.</p> <code>maximum_validator_text</code> <code>CharField</code> <p>Maximum value validator text.</p> <code>minimum_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the minimum value validator column, starting in 0.</p> <code>minimum_validator_text</code> <code>CharField</code> <p>Minimum value validator text.</p> <code>accumulate</code> <code>PositiveSmallIntegerField</code> <p>If set to a number of minutes, the data will be accumulated over that period.</p> <code>resolution</code> <code>DecimalField</code> <p>Resolution of the data. Only used if it is to be accumulated.</p> <code>incremental</code> <code>BooleanField</code> <p>Whether the data is an incremental counter. If it is, any value below the previous one will be removed.</p> <code>decimal_comma</code> <code>BooleanField</code> <p>Whether the data uses a comma as a decimal separator.</p>"},{"location":"Applications/importing/","title":"Formato","text":""},{"location":"Applications/importing/#importacion","title":"Importaci\u00f3n","text":"<p>Importar datos a la base de datos es la acci\u00f3n fundamental que muchos usuarios querr\u00e1n llevar a cabo. Si bien el modelo que impulsa el proceso es simple, como se muestra a continuaci\u00f3n, depende de muchos otros que se describen en otras secciones y, por lo tanto, las inconsistencias en las opciones (por ejemplo, un formato de datos que no es compatible con el archivo de datos) har\u00e1n que el proceso falle.</p> <p>En la secci\u00f3n Importaci\u00f3n de datos se puede encontrar una gu\u00eda pr\u00e1ctica sobre c\u00f3mo enviar datos a Paricia.</p>"},{"location":"Applications/importing/#componente","title":"Componente","text":""},{"location":"Applications/importing/#importing.models.DataImport","title":"<code>DataImport</code>","text":"<p>Model to store the data imports.</p> <p>This model stores the data imports, which are files with data that are uploaded to the system. The data is then processed asynchronously and stored in the database.</p> <p>Attributes:</p> Name Type Description <code>station</code> <code>ForeignKey</code> <p>Station to which the data belongs.</p> <code>format</code> <code>ForeignKey</code> <p>Format of the data.</p> <code>rawfile</code> <code>FileField</code> <p>File with the data to be imported.</p> <code>date</code> <code>DateTimeField</code> <p>Date of submission of the data.</p> <code>start_date</code> <code>DateTimeField</code> <p>Start date of the data.</p> <code>end_date</code> <code>DateTimeField</code> <p>End date of the data.</p> <code>records</code> <code>IntegerField</code> <p>Number of records in the data.</p> <code>observations</code> <code>TextField</code> <p>Notes or observations about the data.</p> <code>status</code> <code>TextField</code> <p>Status of the import.</p> <code>log</code> <code>TextField</code> <p>Log of the data ingestion, indicating any errors.</p> <code>reprocess</code> <code>BooleanField</code> <p>If checked, the data will be reprocessed.</p>"},{"location":"Applications/measurement/","title":"Medici\u00f3n","text":""},{"location":"Applications/measurement/#introduccion","title":"Introducci\u00f3n","text":"<p>Todos los datos que se introducen o procesan en Paricia toman la forma de objetos de <code>Medici\u00f3n</code> o <code>Informe</code>. A diferencia de otros elementos de Paricia, estos no est\u00e1n pensados \u200b\u200bpara crearse manualmente a trav\u00e9s de las p\u00e1ginas de administraci\u00f3n, sino en segundo plano al importar o validar datos.</p> <p>No edite las mediciones en la p\u00e1gina de administraci\u00f3n</p> <p>Se desaconseja editar mediciones directamente en las p\u00e1ginas de administraci\u00f3n, ya que puede generar inconsistencias entre los datos sin procesar, validados e informados. En su lugar, utilice las herramientas de validaci\u00f3n. Consulte la secci\u00f3n de validaci\u00f3n</p> <p>En ambos casos, representan un \u00fanico punto de datos en una serie temporal, correspondiente a una <code>Variable</code> espec\u00edfica en una <code>Estaci\u00f3n</code> espec\u00edfica. Solo los datos correspondientes a estaciones p\u00fablicas estar\u00e1n disponibles para su verificaci\u00f3n en el caso de usuarios an\u00f3nimos, mientras que los usuarios registrados tambi\u00e9n podr\u00e1n verificar los datos de estaciones internas.</p> <p>En el caso de <code>Reports</code>, el punto de datos es una magnitud posprocesada promediada (o acumulada) en per\u00edodos de tiempo horarios, diarios y mensuales. Solo se utilizan los datos que han sido validados al calcular los informes. Los datos de <code>Report</code> son los que se utilizan en la vista de informe para generar gr\u00e1ficos y se pueden descargar. Por lo general, es lo que a la mayor\u00eda de las personas les interesar\u00e1 verificar.</p> <p><code>Measurement</code> representa un punto de datos de entrada cargado desde un archivo, con todas sus propiedades y metadatos. La mayor\u00eda de sus propiedades se pueden editar durante el proceso de validaci\u00f3n, pero los datos originales en bruto siempre se conservan y se pueden recuperar cuando/si es necesario.</p> <p>Ambos objetos de tipo derivan de una clase abstracta <code>MeasurementBase</code> que contiene los elementos comunes, que a su vez deriva de <code>TimescaleModel</code>. Esta clase principal superior es la que permite toda la gesti\u00f3n eficiente de series temporales de los datos en Paricia.</p> <p>Figure 1: Diagrama UML de los modelos de la aplicaci\u00f3n Measurement.</p>"},{"location":"Applications/measurement/#componentes","title":"Componentes","text":""},{"location":"Applications/measurement/#measurement.models.MeasurementBase","title":"<code>MeasurementBase</code>","text":"<p>               Bases: <code>TimescaleModel</code></p> <p>Base class for all the measurement related entries.</p> <p>It contains the barebone attributes that any measurement entry will likely need, although this is enforced only for station, variable and value. Maximum and minimum are very likely to be present in most cases, but might not be there in some occasions, therefore the possibility of nulling them.</p> <p>Attributes:</p> Name Type Description <code>time</code> <code>TimescaleDateTimeField</code> <p>Time of the measurement.</p> <code>station</code> <code>Station</code> <p>Station this measurement belongs to.</p> <code>variable</code> <code>Variable</code> <p>Variable being measured.</p> <code>value</code> <code>Decimal</code> <p>Value of the measurement.</p> <code>maximum</code> <code>Decimal</code> <p>Maximum value of the measurement. Mostly useful for reports or when the measurement represents an average over time.</p> <code>minimum</code> <code>Decimal</code> <p>Minimum value of the measurement. Mostly useful for reports or when the measurement represents an average over time.</p>"},{"location":"Applications/measurement/#measurement.models.Measurement","title":"<code>Measurement</code>","text":"<p>Class to store the measurements and their validation status.</p> <p>This class holds the value of a given variable and station at a specific time, as well as auxiliary information such as maximum and minimum values, depth and direction, for vector quantities. All of these have a <code>raw</code> version where a backup of the original data is kept, should this change at any point.</p> <p>Flags to monitor its validation status, if the data is active (and therefore can be used for reporting) and if it has actually been used for that is also included.</p> <p>Attributes:</p> Name Type Description <code>depth</code> <code>int</code> <p>Depth of the measurement.</p> <code>direction</code> <code>Decimal</code> <p>Direction of the measurement, useful for vector quantities.</p> <code>raw_value</code> <code>Decimal</code> <p>Original value of the measurement.</p> <code>raw_maximum</code> <code>Decimal</code> <p>Original maximum value of the measurement.</p> <code>raw_minimum</code> <code>Decimal</code> <p>Original minimum value of the measurement.</p> <code>raw_direction</code> <code>Decimal</code> <p>Original direction of the measurement.</p> <code>raw_depth</code> <code>int</code> <p>Original depth of the measurement.</p> <code>is_validated</code> <code>bool</code> <p>Flag to indicate if the measurement has been validated.</p> <code>is_active</code> <code>bool</code> <p>Flag to indicate if the measurement is active. An inactive measurement is not used for reporting</p>"},{"location":"Applications/measurement/#measurement.models.Report","title":"<code>Report</code>","text":"<p>Holds the different reporting data.</p> <p>It also keeps track of which data has already been used when creating the reports.</p> <p>Attributes:</p> Name Type Description <code>report_type</code> <code>str</code> <p>Type of report. It can be hourly, daily or monthly.</p> <code>completeness</code> <code>Decimal</code> <p>Completeness of the report. Eg. a daily report with 24 hourly measurements would have a completeness of 100%.</p>"},{"location":"Applications/sensor/","title":"Sensor","text":""},{"location":"Applications/sensor/#introduccion","title":"Introducci\u00f3n","text":"<p>La aplicaci\u00f3n Sensor es una aplicaci\u00f3n peque\u00f1a y sencilla que contiene metadatos relacionados con los sensores, como la marca o el tipo de sensor.</p> <p>Figure 1: Diagrama UML de los modelos de la aplicaci\u00f3n Sensor.</p>"},{"location":"Applications/sensor/#componentes","title":"Componentes","text":""},{"location":"Applications/sensor/#sensor.models.SensorType","title":"<code>SensorType</code>","text":"<p>Type of sensor, eg. pluviometric, wind sensor, etc.</p> <p>Attributes:</p> Name Type Description <code>sensor_type_id</code> <p>int, primary key, sensor type id.</p> <code>name</code> <p>str, sensor type name.</p>"},{"location":"Applications/sensor/#sensor.models.SensorBrand","title":"<code>SensorBrand</code>","text":"<p>Brand of the sensor, eg. Davis, Texas Electronics, etc.</p> <p>Attributes:</p> Name Type Description <code>brand_id</code> <p>int, primary key, sensor brand id.</p> <code>name</code> <p>str, sensor brand name.</p>"},{"location":"Applications/sensor/#sensor.models.Sensor","title":"<code>Sensor</code>","text":"<p>Specific sensor details.</p> <p>Attributes:</p> Name Type Description <code>sensor_id</code> <code>int</code> <p>Primary key, sensor id.</p> <code>code</code> <p>(str) sensor code.</p> <code>sensor_type</code> <code>SensorType</code> <p>sensor type.</p> <code>sensor_brand</code> <code>SensorBrand</code> <p>sensor brand.</p> <code>model</code> <code>str</code> <p>specific model of the sensor.</p> <code>serial</code> <code>str</code> <p>serial number of the sensor.</p> <code>status</code> <code>bool</code> <p>sensor status.</p>"},{"location":"Applications/station/","title":"Estaci\u00f3n","text":""},{"location":"Applications/station/#introduccion","title":"Introducci\u00f3n","text":"<p>La Estaci\u00f3n es el componente principal de Paricia. La Estaci\u00f3n es propietaria de los datos de medici\u00f3n, que le permiten visualizar los datos existentes y a\u00f1adir nuevos conjuntos, y captura una gran cantidad de metadatos sobre la ubicaci\u00f3n geogr\u00e1fica de la estaci\u00f3n, incluyendo longitud, latitud y altitud, pero tambi\u00e9n regi\u00f3n, cuenca, ecosistema o \u00e1rea cubierta.</p> <p>Tambi\u00e9n posee otro par\u00e1metro clave utilizado durante el proceso de ingesta de datos: la zona horaria donde se encuentra la estaci\u00f3n, que se utiliza para interpretar la hora de los conjuntos de datos.</p> <p><code>Zona horaria</code> incorrecta</p> <p>Si este par\u00e1metro no se define correctamente, la hora de los datos asociados a la estaci\u00f3n se interpretar\u00e1 de forma incorrecta. Compruebe el par\u00e1metro antes de cargar los datos, especialmente la primera vez.</p> <p>Como se indica en la p\u00e1gina de permisos, la visibilidad de las estaciones puede tomar una tercera opci\u00f3n, <code>interna</code>, que s\u00f3lo permite a los usuarios registrados visualizar los datos de la estaci\u00f3n. Las estaciones tambi\u00e9n requieren permiso de \"cambio\" para poder cargar datos asociados a esa estaci\u00f3n y luego validarlos.</p> <p>Figure 1: Diagrama UML de los modelos de la aplicaci\u00f3n Station.</p>"},{"location":"Applications/station/#componentes-basicos","title":"Componentes b\u00e1sicos","text":""},{"location":"Applications/station/#station.models.Country","title":"<code>Country</code>","text":"<p>The country where a station or region is in.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Country name.</p>"},{"location":"Applications/station/#station.models.Region","title":"<code>Region</code>","text":"<p>A region within a country.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the region.</p> <code>country</code> <code>Country</code> <p>Country where the region is located.</p>"},{"location":"Applications/station/#station.models.Ecosystem","title":"<code>Ecosystem</code>","text":"<p>The ecosystem associated with a station.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the ecosystem, e.g. rain forest.</p>"},{"location":"Applications/station/#station.models.Institution","title":"<code>Institution</code>","text":"<p>Institutional partner responsible for a station.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the institution.</p>"},{"location":"Applications/station/#station.models.StationType","title":"<code>StationType</code>","text":"<p>Type of the station, indicating what it measures.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the station type, e.g. pluvometric, hydrological.</p>"},{"location":"Applications/station/#station.models.Place","title":"<code>Place</code>","text":"<p>Specific place that a station is situated.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the place, e.g. Huaraz.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the location.</p>"},{"location":"Applications/station/#station.models.Basin","title":"<code>Basin</code>","text":"<p>River(s) basin where the station is located e.g. El Carmen.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the basin, e.g. El Carmen.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the basin.</p> <code>file</code> <code>FileField</code> <p>PDF file with details of the basin.</p>"},{"location":"Applications/station/#station.models.PlaceBasin","title":"<code>PlaceBasin</code>","text":"<p>Associates a Basin with a Place and an image.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>place</code> <code>Place</code> <p>Place of the association.</p> <code>basin</code> <code>Basin</code> <p>Basin of the association.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the place within the basin.</p>"},{"location":"Applications/station/#componentes-principales","title":"Componentes principales","text":""},{"location":"Applications/station/#station.models.Station","title":"<code>Station</code>","text":"<p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"Applications/variable/","title":"Variable","text":""},{"location":"Applications/variable/#introduccion","title":"Introducci\u00f3n","text":"<p>La aplicaci\u00f3n Variable se ocupa de las variables que pueden ser ingeridas por Paricia, desde qu\u00e9 son y qu\u00e9 unidades utilizan hasta recursos para ayudar en el proceso de validaci\u00f3n. Especialmente importantes en este proceso de validaci\u00f3n ser\u00e1n:</p> <ul> <li>los valores m\u00e1ximos y m\u00ednimos que la variable puede tomar de forma realista (estos son campos obligatorios)</li> <li>la variabilidad m\u00e1xima entre puntos de datos consecutivos</li> <li>la diferencia estad\u00edstica m\u00e1xima respecto de la serie permitida para un punto de datos antes de que se considere un outlier</li> <li>la fracci\u00f3n de valores faltantes que se permiten al calcular informes</li> </ul> <p>Figure 1: Diagrama UML de los modelos de la aplicaci\u00f3n Variable.</p>"},{"location":"Applications/variable/#componentes","title":"Componentes","text":""},{"location":"Applications/variable/#variable.models.Unit","title":"<code>Unit</code>","text":"<p>Unit of measurement with a name and a symbol.</p> <p>Attributes:</p> Name Type Description <code>unit_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Name of the unit, eg. meters per second.</p> <code>initials</code> <code>CharField</code> <p>Symbol for the unit, eg. m/s.</p>"},{"location":"Applications/variable/#variable.models.Variable","title":"<code>Variable</code>","text":"<p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"Applications/variable/#variable.models.SensorInstallation","title":"<code>SensorInstallation</code>","text":"<p>Represents an installation of a Sensor at a Station, which measures a Variable.</p> <p>It includes metadata for installation and finishing date, as well as state (active or not).</p> <p>Attributes:</p> Name Type Description <code>sensorinstallation_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable</code> <code>ForeignKey</code> <p>Variable measured by the sensor.</p> <code>station</code> <code>ForeignKey</code> <p>Station where the sensor is installed.</p> <code>sensor</code> <code>ForeignKey</code> <p>Sensor used for the measurement.</p> <code>start_date</code> <code>DateField</code> <p>Start date of the installation.</p> <code>end_date</code> <code>DateField</code> <p>End date of the installation.</p> <code>state</code> <code>BooleanField</code> <p>Is the sensor active?</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>djangomain<ul> <li>asgi</li> <li>dash_apps<ul> <li>stations_map</li> </ul> </li> <li>middleware</li> <li>renderers</li> <li>settings<ul> <li>production</li> <li>settings</li> </ul> </li> <li>urls</li> <li>views</li> <li>wsgi</li> </ul> </li> <li>formatting<ul> <li>admin</li> <li>apps</li> <li>filters</li> <li>models</li> <li>signals<ul> <li>handlers</li> </ul> </li> <li>tables</li> <li>urls</li> <li>views</li> </ul> </li> <li>importing<ul> <li>admin</li> <li>apps</li> <li>filters</li> <li>functions</li> <li>models</li> <li>signals<ul> <li>handlers</li> </ul> </li> <li>tables</li> <li>tasks</li> <li>urls</li> <li>views</li> </ul> </li> <li>management<ul> <li>admin</li> <li>apps</li> <li>filters</li> <li>forms</li> <li>initial_data</li> <li>models</li> <li>permissions</li> <li>serializers</li> <li>tests</li> <li>tools</li> <li>views</li> </ul> </li> <li>measurement<ul> <li>admin</li> <li>apps</li> <li>dash_apps<ul> <li>daily_validation</li> <li>data_report</li> <li>plots</li> <li>tables</li> </ul> </li> <li>filters</li> <li>models</li> <li>reporting</li> <li>signals<ul> <li>handlers</li> </ul> </li> <li>urls</li> <li>validation</li> <li>views</li> </ul> </li> <li>sensor<ul> <li>admin</li> <li>apps</li> <li>filters</li> <li>models</li> <li>signals<ul> <li>handlers</li> </ul> </li> <li>tables</li> <li>urls</li> <li>views</li> </ul> </li> <li>station<ul> <li>admin</li> <li>apps</li> <li>countries</li> <li>filters</li> <li>functions</li> <li>models</li> <li>signals<ul> <li>handlers</li> </ul> </li> <li>tables</li> <li>timezones</li> <li>urls</li> <li>views</li> </ul> </li> <li>utilities<ul> <li>benchmarking<ul> <li>benchmark_queries</li> <li>create_synthetic_data_scenario1</li> <li>create_synthetic_data_scenario2</li> </ul> </li> <li>frontend_menu<ul> <li>constants</li> <li>context_processor</li> </ul> </li> <li>functions</li> <li>load_initial_data</li> <li>timezones</li> </ul> </li> <li>variable<ul> <li>admin</li> <li>apps</li> <li>filters</li> <li>models</li> <li>signals<ul> <li>handlers</li> </ul> </li> <li>tables</li> <li>urls</li> <li>views</li> </ul> </li> </ul>"},{"location":"reference/djangomain/","title":"djangomain","text":""},{"location":"reference/djangomain/#djangomain","title":"<code>djangomain</code>","text":""},{"location":"reference/djangomain/asgi/","title":"asgi","text":""},{"location":"reference/djangomain/asgi/#djangomain.asgi","title":"<code>djangomain.asgi</code>","text":"<p>ASGI config for djangomain project.</p> <p>It exposes the ASGI callable as a module-level variable named <code>application</code>.</p> <p>For more information on this file, see https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/</p>"},{"location":"reference/djangomain/asgi/#djangomain.asgi-attributes","title":"Attributes","text":""},{"location":"reference/djangomain/asgi/#djangomain.asgi.application","title":"<code>application = get_asgi_application()</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/middleware/","title":"middleware","text":""},{"location":"reference/djangomain/middleware/#djangomain.middleware","title":"<code>djangomain.middleware</code>","text":""},{"location":"reference/djangomain/middleware/#djangomain.middleware-classes","title":"Classes","text":""},{"location":"reference/djangomain/middleware/#djangomain.middleware.TimezoneMiddleware","title":"<code>TimezoneMiddleware(get_response)</code>","text":"Source code in <code>djangomain/middleware.py</code> <pre><code>def __init__(self, get_response):\n    self.get_response = get_response\n</code></pre>"},{"location":"reference/djangomain/renderers/","title":"renderers","text":""},{"location":"reference/djangomain/renderers/#djangomain.renderers","title":"<code>djangomain.renderers</code>","text":""},{"location":"reference/djangomain/renderers/#djangomain.renderers-classes","title":"Classes","text":""},{"location":"reference/djangomain/renderers/#djangomain.renderers.TableAPIRenderer","title":"<code>TableAPIRenderer</code>","text":"<p>               Bases: <code>BrowsableAPIRenderer</code></p>"},{"location":"reference/djangomain/urls/","title":"urls","text":""},{"location":"reference/djangomain/urls/#djangomain.urls","title":"<code>djangomain.urls</code>","text":"<p>djangomain URL Configuration</p> <p>The <code>urlpatterns</code> list routes URLs to views. For more information please see:     https://docs.djangoproject.com/en/3.0/topics/http/urls/</p> <p>Examples:</p> <p>Function views     1. Add an import:  from my_app import views     2. Add a URL to urlpatterns:  path('', views.home, name='home') Class-based views     1. Add an import:  from other_app.views import Home     2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home') Including another URLconf     1. Import the include() function: from django.urls import include, path     2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))</p>"},{"location":"reference/djangomain/urls/#djangomain.urls-attributes","title":"Attributes","text":""},{"location":"reference/djangomain/urls/#djangomain.urls.urlpatterns","title":"<code>urlpatterns = [path('', HomePageView.as_view(), name='home'), path('admin/', admin.site.urls), path('auth/', include('django.contrib.auth.urls')), path('register/', SignUpView.as_view(), name='auth_register'), path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'), path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'), path('api/token/verify/', TokenVerifyView.as_view(), name='token_verify'), path('measurement/', include('measurement.urls', namespace='measurement')), path('django_plotly_dash/', include('django_plotly_dash.urls')), path('importing/', include('importing.urls', namespace='importing')), path('formatting/', include('formatting.urls', namespace='formatting')), path('variable/', include('variable.urls', namespace='variable')), path('sensor/', include('sensor.urls', namespace='sensor')), path('station/', include('station.urls', namespace='station'))]</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/urls/#djangomain.urls-classes","title":"Classes","text":""},{"location":"reference/djangomain/urls/#djangomain.urls.HomePageView","title":"<code>HomePageView</code>","text":"<p>               Bases: <code>TemplateView</code></p> <p>View for displaying the home page and map dash app.</p>"},{"location":"reference/djangomain/views/","title":"views","text":""},{"location":"reference/djangomain/views/#djangomain.views","title":"<code>djangomain.views</code>","text":""},{"location":"reference/djangomain/views/#djangomain.views-attributes","title":"Attributes","text":""},{"location":"reference/djangomain/views/#djangomain.views.schema_view","title":"<code>schema_view = get_schema_view(openapi.Info(title='Paricia API', default_version='v1', description='API for the Paricia project', terms_of_service='https://github.com/ImperialCollegeLondon/paricia', contact=openapi.Contact(email='contact@snippets.local'), license=openapi.License(name='BSD License')), public=True, permission_classes=[permissions.AllowAny])</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/views/#djangomain.views-classes","title":"Classes","text":""},{"location":"reference/djangomain/views/#djangomain.views.HomePageView","title":"<code>HomePageView</code>","text":"<p>               Bases: <code>TemplateView</code></p> <p>View for displaying the home page and map dash app.</p>"},{"location":"reference/djangomain/views/#djangomain.views.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/djangomain/views/#djangomain.views.Station-attributes","title":"Attributes","text":""},{"location":"reference/djangomain/views/#djangomain.views.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/djangomain/views/#djangomain.views.Station-functions","title":"Functions","text":""},{"location":"reference/djangomain/views/#djangomain.views.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/djangomain/views/#djangomain.views.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/djangomain/views/#djangomain.views.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/djangomain/wsgi/","title":"wsgi","text":""},{"location":"reference/djangomain/wsgi/#djangomain.wsgi","title":"<code>djangomain.wsgi</code>","text":"<p>WSGI config for djangomain project.</p> <p>It exposes the WSGI callable as a module-level variable named <code>application</code>.</p> <p>For more information on this file, see https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/</p>"},{"location":"reference/djangomain/wsgi/#djangomain.wsgi-attributes","title":"Attributes","text":""},{"location":"reference/djangomain/wsgi/#djangomain.wsgi.application","title":"<code>application = get_wsgi_application()</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/dash_apps/","title":"dash_apps","text":""},{"location":"reference/djangomain/dash_apps/#djangomain.dash_apps","title":"<code>djangomain.dash_apps</code>","text":""},{"location":"reference/djangomain/dash_apps/stations_map/","title":"stations_map","text":""},{"location":"reference/djangomain/dash_apps/stations_map/#djangomain.dash_apps.stations_map","title":"<code>djangomain.dash_apps.stations_map</code>","text":""},{"location":"reference/djangomain/dash_apps/stations_map/#djangomain.dash_apps.stations_map-attributes","title":"Attributes","text":""},{"location":"reference/djangomain/dash_apps/stations_map/#djangomain.dash_apps.stations_map.app","title":"<code>app = DjangoDash('StationsMap', external_stylesheets=[dbc.themes.BOOTSTRAP])</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/dash_apps/stations_map/#djangomain.dash_apps.stations_map-classes","title":"Classes","text":""},{"location":"reference/djangomain/dash_apps/stations_map/#djangomain.dash_apps.stations_map.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/djangomain/dash_apps/stations_map/#djangomain.dash_apps.stations_map.Station-attributes","title":"Attributes","text":""},{"location":"reference/djangomain/dash_apps/stations_map/#djangomain.dash_apps.stations_map.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/djangomain/dash_apps/stations_map/#djangomain.dash_apps.stations_map.Station-functions","title":"Functions","text":""},{"location":"reference/djangomain/dash_apps/stations_map/#djangomain.dash_apps.stations_map.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/djangomain/dash_apps/stations_map/#djangomain.dash_apps.stations_map.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/djangomain/dash_apps/stations_map/#djangomain.dash_apps.stations_map.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/djangomain/dash_apps/stations_map/#djangomain.dash_apps.stations_map-functions","title":"Functions","text":""},{"location":"reference/djangomain/dash_apps/stations_map/#djangomain.dash_apps.stations_map.update_map","title":"<code>update_map(stations)</code>","text":"Source code in <code>djangomain/dash_apps/stations_map.py</code> <pre><code>@app.callback(\n    [\n        Output(\"map_graph\", \"figure\"),\n        Output(\"map_graph\", \"style\"),\n    ],\n    Input(\"stations_list\", \"children\"),\n)\ndef update_map(stations) -&gt; px.line:\n    station_objs = [\n        model_to_dict(Station.objects.get(station_code=code)) for code in stations\n    ]\n\n    keys = [\n        \"station_id\",\n        \"station_code\",\n        \"station_name\",\n        \"station_latitude\",\n        \"station_longitude\",\n    ]\n\n    stations_filtered = [{key: obj[key] for key in keys} for obj in station_objs]\n\n    df = pd.DataFrame(stations_filtered, columns=keys)\n    plot = px.scatter_mapbox(\n        df,\n        lat=\"station_latitude\",\n        lon=\"station_longitude\",\n        hover_name=\"station_code\",\n        zoom=3.6,\n    )\n    plot.update_layout(mapbox_style=\"open-street-map\")\n    plot.update_layout(margin={\"r\": 0, \"t\": 0, \"l\": 0, \"b\": 0})\n\n    return plot, {\"display\": \"block\"}\n</code></pre>"},{"location":"reference/djangomain/settings/","title":"settings","text":""},{"location":"reference/djangomain/settings/#djangomain.settings","title":"<code>djangomain.settings</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings-attributes","title":"Attributes","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.ACCESS_TOKEN_LIFETIME_IN_SECONDS","title":"<code>ACCESS_TOKEN_LIFETIME_IN_SECONDS = 2 * 60 * 60</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.ALLOWED_HOSTS","title":"<code>ALLOWED_HOSTS = ['*']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.ANONYMOUS_USER_NAME","title":"<code>ANONYMOUS_USER_NAME = 'AnonymousUser'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.AUTHENTICATION_BACKENDS","title":"<code>AUTHENTICATION_BACKENDS = ('django.contrib.auth.backends.ModelBackend', 'guardian.backends.ObjectPermissionBackend')</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.AUTH_PASSWORD_VALIDATORS","title":"<code>AUTH_PASSWORD_VALIDATORS = [{'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'}, {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'}, {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'}, {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'}]</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.AUTH_USER_MODEL","title":"<code>AUTH_USER_MODEL = 'management.User'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.BASE_DIR","title":"<code>BASE_DIR = str(Path(__file__).resolve().parent.parent.parent)</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.BOOTSTRAP5","title":"<code>BOOTSTRAP5 = dict(css_url=dict(url=f'https://cdn.jsdelivr.net/npm/bootswatch{javascript_version}dist/flatly/bootstrap.min.css', integrity='sha384-Gn6TIhloBHiLpI1VM8qQG+H8QQhHXqsiUlMLS4uhr9gqQzFsOhMTo0lSTMbOrLoI', crossorigin='anonymous'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.CRISPY_ALLOWED_TEMPLATE_PACKS","title":"<code>CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.CRISPY_TEMPLATE_PACK","title":"<code>CRISPY_TEMPLATE_PACK = 'bootstrap5'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.DATABASES","title":"<code>DATABASES = {'default': {'ENGINE': 'django.db.backends.postgresql', 'NAME': 'postgres', 'USER': 'postgres', 'PASSWORD': 'postgres', 'HOST': 'db', 'PORT': '5432'}, 'huey': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': 'huey', 'FILE': os.path.join(BASE_DIR, 'data', 'huey.db')}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.DATA_UPLOAD_MAX_MEMORY_SIZE","title":"<code>DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.DATA_UPLOAD_MAX_NUMBER_FIELDS","title":"<code>DATA_UPLOAD_MAX_NUMBER_FIELDS = None</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.DEBUG","title":"<code>DEBUG = True</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.DEFAULT_AUTO_FIELD","title":"<code>DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.DJANGO_TABLES2_TEMPLATE","title":"<code>DJANGO_TABLES2_TEMPLATE = 'django_tables2/bootstrap5.html'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.EMAIL_BACKEND","title":"<code>EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.EMAIL_HOST","title":"<code>EMAIL_HOST = '10.1.1.18'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.EMAIL_PORT","title":"<code>EMAIL_PORT = 25</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.FILE_UPLOAD_MAX_MEMORY_SIZE","title":"<code>FILE_UPLOAD_MAX_MEMORY_SIZE = 27000000</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.FIXTURE_DIRS","title":"<code>FIXTURE_DIRS = [os.path.join(PROJECT_ROOT, 'utilities/data')]</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.HUEY","title":"<code>HUEY = {'huey_class': 'huey.SqliteHuey', 'name': DATABASES['huey']['NAME'], 'immediate': False, 'consumer': {'workers': 2}, 'connection': {'filename': DATABASES['huey']['FILE']}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.INSTALLED_APPS","title":"<code>INSTALLED_APPS = ['station.apps.StationConfig', 'sensor.apps.SensorConfig', 'variable.apps.VariableConfig', 'formatting.apps.FormattingConfig', 'measurement', 'importing.apps.ImportingConfig', 'django_bootstrap5', 'django_extensions', 'django_filters', 'django.contrib.humanize', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'huey.contrib.djhuey', 'rest_framework', 'rest_framework_simplejwt', 'drf_yasg', 'management', 'crispy_forms', 'crispy_bootstrap5', 'django_plotly_dash.apps.DjangoPlotlyDashConfig', 'guardian', 'django_tables2']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.INTERNAL_IPS","title":"<code>INTERNAL_IPS = ('127.0.0.1')</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.LANGUAGE_CODE","title":"<code>LANGUAGE_CODE = 'en-gb'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.LOGIN_REDIRECT_URL","title":"<code>LOGIN_REDIRECT_URL = 'home'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.LOGIN_URL","title":"<code>LOGIN_URL = 'auth:login'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.LOGOUT_REDIRECT_URL","title":"<code>LOGOUT_REDIRECT_URL = '/'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.MEDIA_ROOT","title":"<code>MEDIA_ROOT = os.path.join(BASE_DIR, 'data/media')</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.MEDIA_URL","title":"<code>MEDIA_URL = '/media/'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.MIDDLEWARE","title":"<code>MIDDLEWARE = ['django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'django_plotly_dash.middleware.BaseMiddleware', 'djangomain.middleware.TimezoneMiddleware']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.PLOTLY_COMPONENTS","title":"<code>PLOTLY_COMPONENTS = ['dpd_components']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.PROJECT_ROOT","title":"<code>PROJECT_ROOT = str(Path(__file__).resolve().parent.parent.parent)</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.REST_AUTH_SERIALIZERS","title":"<code>REST_AUTH_SERIALIZERS = {'USER_DETAILS_SERIALIZER': 'management.serializers.UserSerializer'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.REST_FRAMEWORK","title":"<code>REST_FRAMEWORK = {'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination', 'PAGE_SIZE': 100, 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'], 'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'], 'DEFAULT_AUTHENTICATION_CLASSES': ['rest_framework_simplejwt.authentication.JWTAuthentication', 'rest_framework.authentication.SessionAuthentication'], 'DEFAULT_RENDERER_CLASSES': ['rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.BrowsableAPIRenderer']}</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.ROOT_URLCONF","title":"<code>ROOT_URLCONF = 'djangomain.urls'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.SECRET_KEY","title":"<code>SECRET_KEY = 'mj7(ja+=@-xxx&amp;(t)_2um%y^khe17txt&amp;^_ydw0d168%+so#yd'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.SIMPLE_JWT","title":"<code>SIMPLE_JWT = {'ACCESS_TOKEN_LIFETIME': timedelta(seconds=ACCESS_TOKEN_LIFETIME_IN_SECONDS), 'REFRESH_TOKEN_LIFETIME': timedelta(days=3650), 'ROTATE_REFRESH_TOKENS': True, 'BLACKLIST_AFTER_ROTATION': False, 'ALGORITHM': 'HS256', 'SIGNING_KEY': SECRET_KEY, 'VERIFYING_KEY': None, 'AUTH_HEADER_TYPES': ('Bearer'), 'USER_ID_FIELD': 'id', 'USER_ID_CLAIM': 'user_id', 'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken')}</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.SITE_ROOT","title":"<code>SITE_ROOT = os.path.dirname(os.path.realpath(__file__))</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.STATICFILES_DIRS","title":"<code>STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.STATICFILES_FINDERS","title":"<code>STATICFILES_FINDERS = ['django.contrib.staticfiles.finders.FileSystemFinder', 'django.contrib.staticfiles.finders.AppDirectoriesFinder', 'django_plotly_dash.finders.DashAssetFinder', 'django_plotly_dash.finders.DashComponentFinder', 'django_plotly_dash.finders.DashAppDirectoryFinder']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.STATIC_ROOT","title":"<code>STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.STATIC_URL","title":"<code>STATIC_URL = '/static/'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.TEMPLATES","title":"<code>TEMPLATES = [{'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR, 'templates')], 'APP_DIRS': True, 'OPTIONS': {'context_processors': ['django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages']}}]</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.TIME_ZONE","title":"<code>TIME_ZONE = 'UTC'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.WSGI_APPLICATION","title":"<code>WSGI_APPLICATION = 'djangomain.wsgi.application'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.X_FRAME_OPTIONS","title":"<code>X_FRAME_OPTIONS = 'SAMEORIGIN'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.javascript_url","title":"<code>javascript_url = BOOTSTRAP5_DEFAULTS['javascript_url']['url']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/#djangomain.settings.javascript_version","title":"<code>javascript_version = javascript_url[slice(*match.span())]</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/","title":"production","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production","title":"<code>djangomain.settings.production</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production-attributes","title":"Attributes","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.ACCESS_TOKEN_LIFETIME_IN_SECONDS","title":"<code>ACCESS_TOKEN_LIFETIME_IN_SECONDS = 2 * 60 * 60</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.ALLOWED_HOSTS","title":"<code>ALLOWED_HOSTS = os.environ['ALLOWED_HOSTS'].split(',')</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.ANONYMOUS_USER_NAME","title":"<code>ANONYMOUS_USER_NAME = 'AnonymousUser'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.AUTHENTICATION_BACKENDS","title":"<code>AUTHENTICATION_BACKENDS = ('django.contrib.auth.backends.ModelBackend', 'guardian.backends.ObjectPermissionBackend')</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.AUTH_PASSWORD_VALIDATORS","title":"<code>AUTH_PASSWORD_VALIDATORS = [{'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'}, {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'}, {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'}, {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'}]</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.AUTH_USER_MODEL","title":"<code>AUTH_USER_MODEL = 'management.User'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.BASE_DIR","title":"<code>BASE_DIR = str(Path(__file__).resolve().parent.parent.parent)</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.BOOTSTRAP5","title":"<code>BOOTSTRAP5 = dict(css_url=dict(url=f'https://cdn.jsdelivr.net/npm/bootswatch{javascript_version}dist/flatly/bootstrap.min.css', integrity='sha384-Gn6TIhloBHiLpI1VM8qQG+H8QQhHXqsiUlMLS4uhr9gqQzFsOhMTo0lSTMbOrLoI', crossorigin='anonymous'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.CRISPY_ALLOWED_TEMPLATE_PACKS","title":"<code>CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.CRISPY_TEMPLATE_PACK","title":"<code>CRISPY_TEMPLATE_PACK = 'bootstrap5'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.DATABASES","title":"<code>DATABASES = {'default': {'ENGINE': 'django.db.backends.postgresql', 'NAME': 'postgres', 'USER': 'postgres', 'PASSWORD': 'postgres', 'HOST': 'db', 'PORT': '5432'}, 'huey': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': 'huey', 'FILE': os.path.join(BASE_DIR, 'data', 'huey.db')}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.DATA_UPLOAD_MAX_MEMORY_SIZE","title":"<code>DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.DATA_UPLOAD_MAX_NUMBER_FIELDS","title":"<code>DATA_UPLOAD_MAX_NUMBER_FIELDS = None</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.DEBUG","title":"<code>DEBUG = False</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.DEFAULT_AUTO_FIELD","title":"<code>DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.DJANGO_TABLES2_TEMPLATE","title":"<code>DJANGO_TABLES2_TEMPLATE = 'django_tables2/bootstrap5.html'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.EMAIL_BACKEND","title":"<code>EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.EMAIL_HOST","title":"<code>EMAIL_HOST = '10.1.1.18'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.EMAIL_PORT","title":"<code>EMAIL_PORT = 25</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.FILE_UPLOAD_MAX_MEMORY_SIZE","title":"<code>FILE_UPLOAD_MAX_MEMORY_SIZE = 27000000</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.FIXTURE_DIRS","title":"<code>FIXTURE_DIRS = [os.path.join(PROJECT_ROOT, 'utilities/data')]</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.HUEY","title":"<code>HUEY = {'huey_class': 'huey.SqliteHuey', 'name': DATABASES['huey']['NAME'], 'immediate': False, 'consumer': {'workers': 2}, 'connection': {'filename': DATABASES['huey']['FILE']}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.INSTALLED_APPS","title":"<code>INSTALLED_APPS = ['station.apps.StationConfig', 'sensor.apps.SensorConfig', 'variable.apps.VariableConfig', 'formatting.apps.FormattingConfig', 'measurement', 'importing.apps.ImportingConfig', 'django_bootstrap5', 'django_extensions', 'django_filters', 'django.contrib.humanize', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'huey.contrib.djhuey', 'rest_framework', 'rest_framework_simplejwt', 'drf_yasg', 'management', 'crispy_forms', 'crispy_bootstrap5', 'django_plotly_dash.apps.DjangoPlotlyDashConfig', 'guardian', 'django_tables2']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.INTERNAL_IPS","title":"<code>INTERNAL_IPS = ('127.0.0.1')</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.LANGUAGE_CODE","title":"<code>LANGUAGE_CODE = 'en-gb'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.LOGIN_REDIRECT_URL","title":"<code>LOGIN_REDIRECT_URL = 'home'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.LOGIN_URL","title":"<code>LOGIN_URL = 'auth:login'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.LOGOUT_REDIRECT_URL","title":"<code>LOGOUT_REDIRECT_URL = '/'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.MEDIA_ROOT","title":"<code>MEDIA_ROOT = os.path.join(BASE_DIR, 'data/media')</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.MEDIA_URL","title":"<code>MEDIA_URL = '/media/'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.MIDDLEWARE","title":"<code>MIDDLEWARE = ['django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'django_plotly_dash.middleware.BaseMiddleware', 'djangomain.middleware.TimezoneMiddleware']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.PLOTLY_COMPONENTS","title":"<code>PLOTLY_COMPONENTS = ['dpd_components']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.PROJECT_ROOT","title":"<code>PROJECT_ROOT = str(Path(__file__).resolve().parent.parent.parent)</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.REST_AUTH_SERIALIZERS","title":"<code>REST_AUTH_SERIALIZERS = {'USER_DETAILS_SERIALIZER': 'management.serializers.UserSerializer'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.REST_FRAMEWORK","title":"<code>REST_FRAMEWORK = {'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination', 'PAGE_SIZE': 100, 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'], 'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'], 'DEFAULT_AUTHENTICATION_CLASSES': ['rest_framework_simplejwt.authentication.JWTAuthentication', 'rest_framework.authentication.SessionAuthentication'], 'DEFAULT_RENDERER_CLASSES': ['rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.BrowsableAPIRenderer']}</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.ROOT_URLCONF","title":"<code>ROOT_URLCONF = 'djangomain.urls'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.SECRET_KEY","title":"<code>SECRET_KEY = os.environ['SECRET_KEY']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.SECURE_BROWSER_XSS_FILTER","title":"<code>SECURE_BROWSER_XSS_FILTER = True</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.SECURE_HSTS_SECONDS","title":"<code>SECURE_HSTS_SECONDS = 15552000</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.SECURE_PROXY_SSL_HEADER","title":"<code>SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.SIMPLE_JWT","title":"<code>SIMPLE_JWT = {'ACCESS_TOKEN_LIFETIME': timedelta(seconds=ACCESS_TOKEN_LIFETIME_IN_SECONDS), 'REFRESH_TOKEN_LIFETIME': timedelta(days=3650), 'ROTATE_REFRESH_TOKENS': True, 'BLACKLIST_AFTER_ROTATION': False, 'ALGORITHM': 'HS256', 'SIGNING_KEY': SECRET_KEY, 'VERIFYING_KEY': None, 'AUTH_HEADER_TYPES': ('Bearer'), 'USER_ID_FIELD': 'id', 'USER_ID_CLAIM': 'user_id', 'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken')}</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.SITE_ROOT","title":"<code>SITE_ROOT = os.path.dirname(os.path.realpath(__file__))</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.STATICFILES_DIRS","title":"<code>STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.STATICFILES_FINDERS","title":"<code>STATICFILES_FINDERS = ['django.contrib.staticfiles.finders.FileSystemFinder', 'django.contrib.staticfiles.finders.AppDirectoriesFinder', 'django_plotly_dash.finders.DashAssetFinder', 'django_plotly_dash.finders.DashComponentFinder', 'django_plotly_dash.finders.DashAppDirectoryFinder']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.STATIC_ROOT","title":"<code>STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.STATIC_URL","title":"<code>STATIC_URL = '/static/'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.TEMPLATES","title":"<code>TEMPLATES = [{'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR, 'templates')], 'APP_DIRS': True, 'OPTIONS': {'context_processors': ['django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages']}}]</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.TIME_ZONE","title":"<code>TIME_ZONE = 'UTC'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.WSGI_APPLICATION","title":"<code>WSGI_APPLICATION = 'djangomain.wsgi.application'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.X_FRAME_OPTIONS","title":"<code>X_FRAME_OPTIONS = 'SAMEORIGIN'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.javascript_url","title":"<code>javascript_url = BOOTSTRAP5_DEFAULTS['javascript_url']['url']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/production/#djangomain.settings.production.javascript_version","title":"<code>javascript_version = javascript_url[slice(*match.span())]</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/","title":"settings","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings","title":"<code>djangomain.settings.settings</code>","text":"<p>Django settings for djangomain project.</p> <p>Generated by 'django-admin startproject' using Django 3.0.4.</p> <p>For more information on this file, see https://docs.djangoproject.com/en/3.0/topics/settings/</p> <p>For the full list of settings and their values, see https://docs.djangoproject.com/en/3.0/ref/settings/</p>"},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings-attributes","title":"Attributes","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.ACCESS_TOKEN_LIFETIME_IN_SECONDS","title":"<code>ACCESS_TOKEN_LIFETIME_IN_SECONDS = 2 * 60 * 60</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.ALLOWED_HOSTS","title":"<code>ALLOWED_HOSTS = ['*']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.ANONYMOUS_USER_NAME","title":"<code>ANONYMOUS_USER_NAME = 'AnonymousUser'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.AUTHENTICATION_BACKENDS","title":"<code>AUTHENTICATION_BACKENDS = ('django.contrib.auth.backends.ModelBackend', 'guardian.backends.ObjectPermissionBackend')</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.AUTH_PASSWORD_VALIDATORS","title":"<code>AUTH_PASSWORD_VALIDATORS = [{'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'}, {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'}, {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'}, {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'}]</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.AUTH_USER_MODEL","title":"<code>AUTH_USER_MODEL = 'management.User'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.BASE_DIR","title":"<code>BASE_DIR = str(Path(__file__).resolve().parent.parent.parent)</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.BOOTSTRAP5","title":"<code>BOOTSTRAP5 = dict(css_url=dict(url=f'https://cdn.jsdelivr.net/npm/bootswatch{javascript_version}dist/flatly/bootstrap.min.css', integrity='sha384-Gn6TIhloBHiLpI1VM8qQG+H8QQhHXqsiUlMLS4uhr9gqQzFsOhMTo0lSTMbOrLoI', crossorigin='anonymous'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.CRISPY_ALLOWED_TEMPLATE_PACKS","title":"<code>CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.CRISPY_TEMPLATE_PACK","title":"<code>CRISPY_TEMPLATE_PACK = 'bootstrap5'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.DATABASES","title":"<code>DATABASES = {'default': {'ENGINE': 'django.db.backends.postgresql', 'NAME': 'postgres', 'USER': 'postgres', 'PASSWORD': 'postgres', 'HOST': 'db', 'PORT': '5432'}, 'huey': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': 'huey', 'FILE': os.path.join(BASE_DIR, 'data', 'huey.db')}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.DATA_UPLOAD_MAX_MEMORY_SIZE","title":"<code>DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.DATA_UPLOAD_MAX_NUMBER_FIELDS","title":"<code>DATA_UPLOAD_MAX_NUMBER_FIELDS = None</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.DEBUG","title":"<code>DEBUG = True</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.DEFAULT_AUTO_FIELD","title":"<code>DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.DJANGO_TABLES2_TEMPLATE","title":"<code>DJANGO_TABLES2_TEMPLATE = 'django_tables2/bootstrap5.html'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.EMAIL_BACKEND","title":"<code>EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.EMAIL_HOST","title":"<code>EMAIL_HOST = '10.1.1.18'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.EMAIL_PORT","title":"<code>EMAIL_PORT = 25</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.FILE_UPLOAD_MAX_MEMORY_SIZE","title":"<code>FILE_UPLOAD_MAX_MEMORY_SIZE = 27000000</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.FIXTURE_DIRS","title":"<code>FIXTURE_DIRS = [os.path.join(PROJECT_ROOT, 'utilities/data')]</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.HUEY","title":"<code>HUEY = {'huey_class': 'huey.SqliteHuey', 'name': DATABASES['huey']['NAME'], 'immediate': False, 'consumer': {'workers': 2}, 'connection': {'filename': DATABASES['huey']['FILE']}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.INSTALLED_APPS","title":"<code>INSTALLED_APPS = ['station.apps.StationConfig', 'sensor.apps.SensorConfig', 'variable.apps.VariableConfig', 'formatting.apps.FormattingConfig', 'measurement', 'importing.apps.ImportingConfig', 'django_bootstrap5', 'django_extensions', 'django_filters', 'django.contrib.humanize', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'huey.contrib.djhuey', 'rest_framework', 'rest_framework_simplejwt', 'drf_yasg', 'management', 'crispy_forms', 'crispy_bootstrap5', 'django_plotly_dash.apps.DjangoPlotlyDashConfig', 'guardian', 'django_tables2']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.INTERNAL_IPS","title":"<code>INTERNAL_IPS = ('127.0.0.1')</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.LANGUAGE_CODE","title":"<code>LANGUAGE_CODE = 'en-gb'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.LOGIN_REDIRECT_URL","title":"<code>LOGIN_REDIRECT_URL = 'home'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.LOGIN_URL","title":"<code>LOGIN_URL = 'auth:login'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.LOGOUT_REDIRECT_URL","title":"<code>LOGOUT_REDIRECT_URL = '/'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.MEDIA_ROOT","title":"<code>MEDIA_ROOT = os.path.join(BASE_DIR, 'data/media')</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.MEDIA_URL","title":"<code>MEDIA_URL = '/media/'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.MIDDLEWARE","title":"<code>MIDDLEWARE = ['django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'django_plotly_dash.middleware.BaseMiddleware', 'djangomain.middleware.TimezoneMiddleware']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.PLOTLY_COMPONENTS","title":"<code>PLOTLY_COMPONENTS = ['dpd_components']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.PROJECT_ROOT","title":"<code>PROJECT_ROOT = str(Path(__file__).resolve().parent.parent.parent)</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.REST_AUTH_SERIALIZERS","title":"<code>REST_AUTH_SERIALIZERS = {'USER_DETAILS_SERIALIZER': 'management.serializers.UserSerializer'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.REST_FRAMEWORK","title":"<code>REST_FRAMEWORK = {'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination', 'PAGE_SIZE': 100, 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'], 'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'], 'DEFAULT_AUTHENTICATION_CLASSES': ['rest_framework_simplejwt.authentication.JWTAuthentication', 'rest_framework.authentication.SessionAuthentication'], 'DEFAULT_RENDERER_CLASSES': ['rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.BrowsableAPIRenderer']}</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.ROOT_URLCONF","title":"<code>ROOT_URLCONF = 'djangomain.urls'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.SECRET_KEY","title":"<code>SECRET_KEY = 'mj7(ja+=@-xxx&amp;(t)_2um%y^khe17txt&amp;^_ydw0d168%+so#yd'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.SIMPLE_JWT","title":"<code>SIMPLE_JWT = {'ACCESS_TOKEN_LIFETIME': timedelta(seconds=ACCESS_TOKEN_LIFETIME_IN_SECONDS), 'REFRESH_TOKEN_LIFETIME': timedelta(days=3650), 'ROTATE_REFRESH_TOKENS': True, 'BLACKLIST_AFTER_ROTATION': False, 'ALGORITHM': 'HS256', 'SIGNING_KEY': SECRET_KEY, 'VERIFYING_KEY': None, 'AUTH_HEADER_TYPES': ('Bearer'), 'USER_ID_FIELD': 'id', 'USER_ID_CLAIM': 'user_id', 'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken')}</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.SITE_ROOT","title":"<code>SITE_ROOT = os.path.dirname(os.path.realpath(__file__))</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.STATICFILES_DIRS","title":"<code>STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.STATICFILES_FINDERS","title":"<code>STATICFILES_FINDERS = ['django.contrib.staticfiles.finders.FileSystemFinder', 'django.contrib.staticfiles.finders.AppDirectoriesFinder', 'django_plotly_dash.finders.DashAssetFinder', 'django_plotly_dash.finders.DashComponentFinder', 'django_plotly_dash.finders.DashAppDirectoryFinder']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.STATIC_ROOT","title":"<code>STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.STATIC_URL","title":"<code>STATIC_URL = '/static/'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.TEMPLATES","title":"<code>TEMPLATES = [{'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR, 'templates')], 'APP_DIRS': True, 'OPTIONS': {'context_processors': ['django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages']}}]</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.TIME_ZONE","title":"<code>TIME_ZONE = 'UTC'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.WSGI_APPLICATION","title":"<code>WSGI_APPLICATION = 'djangomain.wsgi.application'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.X_FRAME_OPTIONS","title":"<code>X_FRAME_OPTIONS = 'SAMEORIGIN'</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.javascript_url","title":"<code>javascript_url = BOOTSTRAP5_DEFAULTS['javascript_url']['url']</code>  <code>module-attribute</code>","text":""},{"location":"reference/djangomain/settings/settings/#djangomain.settings.settings.javascript_version","title":"<code>javascript_version = javascript_url[slice(*match.span())]</code>  <code>module-attribute</code>","text":""},{"location":"reference/formatting/","title":"formatting","text":""},{"location":"reference/formatting/#formatting","title":"<code>formatting</code>","text":""},{"location":"reference/formatting/admin/","title":"admin","text":""},{"location":"reference/formatting/admin/#formatting.admin","title":"<code>formatting.admin</code>","text":""},{"location":"reference/formatting/admin/#formatting.admin-classes","title":"Classes","text":""},{"location":"reference/formatting/admin/#formatting.admin.Classification","title":"<code>Classification</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Contains instructions on how to classify the data into a specific variable.</p> <p>In particular, it links a format to a variable, and provides the column indices for the value, maximum, and minimum columns, as well as the validator columns. It also contains information on whether the data is accumulated, incremental, and the resolution of the data.</p> <p>Attributes:</p> Name Type Description <code>cls_id</code> <code>AutoField</code> <p>Primary key.</p> <code>format</code> <code>ForeignKey</code> <p>The format of the data file.</p> <code>variable</code> <code>ForeignKey</code> <p>The variable to which the data belongs.</p> <code>value</code> <code>PositiveSmallIntegerField</code> <p>Index of the value column, starting in 0.</p> <code>maximum</code> <code>PositiveSmallIntegerField</code> <p>Index of the maximum value column, starting in 0.</p> <code>minimum</code> <code>PositiveSmallIntegerField</code> <p>Index of the minimum value column, starting in 0.</p> <code>value_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the value validator column, starting in 0.</p> <code>value_validator_text</code> <code>CharField</code> <p>Value validator text.</p> <code>maximum_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the maximum value validator column, starting in 0.</p> <code>maximum_validator_text</code> <code>CharField</code> <p>Maximum value validator text.</p> <code>minimum_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the minimum value validator column, starting in 0.</p> <code>minimum_validator_text</code> <code>CharField</code> <p>Minimum value validator text.</p> <code>accumulate</code> <code>PositiveSmallIntegerField</code> <p>If set to a number of minutes, the data will be accumulated over that period.</p> <code>resolution</code> <code>DecimalField</code> <p>Resolution of the data. Only used if it is to be accumulated.</p> <code>incremental</code> <code>BooleanField</code> <p>Whether the data is an incremental counter. If it is, any value below the previous one will be removed.</p> <code>decimal_comma</code> <code>BooleanField</code> <p>Whether the data uses a comma as a decimal separator.</p>"},{"location":"reference/formatting/admin/#formatting.admin.Classification-functions","title":"Functions","text":""},{"location":"reference/formatting/admin/#formatting.admin.Classification.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.cls_id)\n</code></pre>"},{"location":"reference/formatting/admin/#formatting.admin.Classification.clean","title":"<code>clean()</code>","text":"<p>Validate the model instance.</p> <p>It checks that the column indices are different, and that the accumulation period is greater than zero if it is set. It also checks that the resolution is set if the data is accumulated.</p> Source code in <code>formatting/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model instance.\n\n    It checks that the column indices are different, and that the accumulation\n    period is greater than zero if it is set. It also checks that the resolution is\n    set if the data is accumulated.\n    \"\"\"\n    if self.accumulate and self.resolution is None:\n        raise ValidationError(\n            {\n                \"resolution\": \"The resolution must be set if the data is \"\n                \"accumulated.\"\n            }\n        )\n\n    col_names = [\n        \"value\",\n        \"maximum\",\n        \"minimum\",\n        \"value_validator_column\",\n        \"maximum_validator_column\",\n        \"minimum_validator_column\",\n    ]\n    unique = defaultdict(list)\n    for name in col_names:\n        if getattr(self, name) is not None:\n            unique[getattr(self, name)].append(name)\n    for _, names in unique.items():\n        if len(names) != 1:\n            msg = \"The columns must be different.\"\n            raise ValidationError({field: msg for field in names})\n</code></pre>"},{"location":"reference/formatting/admin/#formatting.admin.Classification.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:classification_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/admin/#formatting.admin.ClassificationAdmin","title":"<code>ClassificationAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the Classification model.</p>"},{"location":"reference/formatting/admin/#formatting.admin.Date","title":"<code>Date</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Date format.</p> <p>Format string for the date column. It is used to parse the date column in the data file. The format string must be compatible with the <code>datetime</code> module in Python. See the datetime documentation for more information on valid format codes.</p> <p>Attributes:</p> Name Type Description <code>date_id</code> <code>AutoField</code> <p>Primary key.</p> <code>date_format</code> <code>CharField</code> <p>The format string for the date column in human readable form, eg. <code>DD-MM-YYYY</code>.</p> <code>code</code> <code>CharField</code> <p>The code used to parse the date column, eg. <code>%d-%m-%Y</code>.</p>"},{"location":"reference/formatting/admin/#formatting.admin.Date-functions","title":"Functions","text":""},{"location":"reference/formatting/admin/#formatting.admin.Date.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.date_format)\n</code></pre>"},{"location":"reference/formatting/admin/#formatting.admin.Date.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:date_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/admin/#formatting.admin.DateAdmin","title":"<code>DateAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the Date model.</p>"},{"location":"reference/formatting/admin/#formatting.admin.Delimiter","title":"<code>Delimiter</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Delimiter between columns in the data file.</p> <p>One or more characters that separate columns in a text file. The most common values are <code>,</code>, <code>;</code>, and <code>\\t</code> (tab).</p> <p>Attributes:</p> Name Type Description <code>delimiter_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>The name of the delimiter. eg. <code>comma</code>, <code>semicolon</code>, <code>tab</code>.</p> <code>character</code> <code>CharField</code> <p>The character used as a delimiter. eg. <code>,</code>, <code>;</code>, <code>\\t</code>.</p>"},{"location":"reference/formatting/admin/#formatting.admin.Delimiter-functions","title":"Functions","text":""},{"location":"reference/formatting/admin/#formatting.admin.Delimiter.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/formatting/admin/#formatting.admin.Delimiter.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:delimiter_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/admin/#formatting.admin.DelimiterAdmin","title":"<code>DelimiterAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the Delimiter model.</p>"},{"location":"reference/formatting/admin/#formatting.admin.Extension","title":"<code>Extension</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Extension of the data file.</p> <p>It is mostly used to choose the tool to be employed to ingest the data. While it can take any value, there is currently explicit support only for <code>xlsx</code> and <code>xlx</code>. Anything else will be interpreted as a text file and loaded using <code>pandas.read_csv</code>.</p> <p>Attributes:</p> Name Type Description <code>extension_id</code> <code>AutoField</code> <p>Primary key.</p> <code>value</code> <code>CharField</code> <p>The extension value. eg. <code>xlsx</code>, <code>xlx</code>, <code>txt</code>.</p>"},{"location":"reference/formatting/admin/#formatting.admin.Extension-functions","title":"Functions","text":""},{"location":"reference/formatting/admin/#formatting.admin.Extension.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.value)\n</code></pre>"},{"location":"reference/formatting/admin/#formatting.admin.Extension.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:extension_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/admin/#formatting.admin.ExtensionAdmin","title":"<code>ExtensionAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the Extension model.</p>"},{"location":"reference/formatting/admin/#formatting.admin.Format","title":"<code>Format</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Details of the data file format, describing how to read the file.</p> <p>It combines several properties, such as the file extension, the delimiter, the date and time formats, and the column indices for the date and time columns, instructing how to read the data file and parse the dates. It is mostly used to ingest data from text files, like CSV.</p> <p>Attributes:</p> Name Type Description <code>format_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Short name of the format entry.</p> <code>description</code> <code>TextField</code> <p>Description of the format.</p> <code>extension</code> <code>ForeignKey</code> <p>The extension of the data file.</p> <code>delimiter</code> <code>ForeignKey</code> <p>The delimiter between columns in the data file. Only required for text files.</p> <code>first_row</code> <code>PositiveSmallIntegerField</code> <p>Index of the first row with data, starting in 0.</p> <code>footer_rows</code> <code>PositiveSmallIntegerField</code> <p>Number of footer rows to be ignored at the end.</p> <code>date</code> <code>ForeignKey</code> <p>Format for the date column. Only required for text files.</p> <code>date_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the date column, starting in 0.</p> <code>time</code> <code>ForeignKey</code> <p>Format for the time column. Only required for text files.</p> <code>time_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the time column, starting in 0.</p>"},{"location":"reference/formatting/admin/#formatting.admin.Format-attributes","title":"Attributes","text":""},{"location":"reference/formatting/admin/#formatting.admin.Format.datetime_format","title":"<code>datetime_format: str</code>  <code>property</code>","text":"<p>Obtain the datetime format string.</p>"},{"location":"reference/formatting/admin/#formatting.admin.Format-functions","title":"Functions","text":""},{"location":"reference/formatting/admin/#formatting.admin.Format.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/formatting/admin/#formatting.admin.Format.datetime_columns","title":"<code>datetime_columns(delimiter)</code>","text":"<p>Column indices that correspond to the date and time columns in the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>delimiter</code> <code>str</code> <p>The delimiter used to split the date and time codes.</p> required <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: A list of column indices.</p> Source code in <code>formatting/models.py</code> <pre><code>def datetime_columns(self, delimiter: str) -&gt; list[int]:\n    \"\"\"Column indices that correspond to the date and time columns in the dataset.\n\n    Args:\n        delimiter (str): The delimiter used to split the date and time codes.\n\n    Returns:\n        list[int]: A list of column indices.\n    \"\"\"\n    date_items = self.date.code.split(delimiter)\n    date_cols = list(range(self.date_column, self.date_column + len(date_items)))\n    time_items = self.time.code.split(delimiter)\n    time_cols = list(range(self.time_column, self.time_column + len(time_items)))\n    return date_cols + time_cols\n</code></pre>"},{"location":"reference/formatting/admin/#formatting.admin.Format.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:format_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/admin/#formatting.admin.FormatAdmin","title":"<code>FormatAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the Format model.</p>"},{"location":"reference/formatting/admin/#formatting.admin.Time","title":"<code>Time</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Time format.</p> <p>Format string for the time column. It is used to parse the time column in the data file. The format string must be compatible with the <code>datetime</code> module in Python. See the datetime documentation for more information on valid format codes.</p> <p>Attributes:</p> Name Type Description <code>date_id</code> <code>AutoField</code> <p>Primary key.</p> <code>date_format</code> <code>CharField</code> <p>The format string for the date column in human readable form, eg. <code>HH:MM:SS 24H</code>.</p> <code>code</code> <code>CharField</code> <p>The code used to parse the date column, eg. <code>%H:%M:%S</code>.</p>"},{"location":"reference/formatting/admin/#formatting.admin.Time-functions","title":"Functions","text":""},{"location":"reference/formatting/admin/#formatting.admin.Time.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.time_format)\n</code></pre>"},{"location":"reference/formatting/admin/#formatting.admin.Time.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:time_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/admin/#formatting.admin.TimeAdmin","title":"<code>TimeAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the Time model.</p>"},{"location":"reference/formatting/apps/","title":"apps","text":""},{"location":"reference/formatting/apps/#formatting.apps","title":"<code>formatting.apps</code>","text":""},{"location":"reference/formatting/apps/#formatting.apps-classes","title":"Classes","text":""},{"location":"reference/formatting/apps/#formatting.apps.FormattingConfig","title":"<code>FormattingConfig</code>","text":"<p>               Bases: <code>AppConfig</code></p>"},{"location":"reference/formatting/filters/","title":"filters","text":""},{"location":"reference/formatting/filters/#formatting.filters","title":"<code>formatting.filters</code>","text":""},{"location":"reference/formatting/filters/#formatting.filters-classes","title":"Classes","text":""},{"location":"reference/formatting/filters/#formatting.filters.Classification","title":"<code>Classification</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Contains instructions on how to classify the data into a specific variable.</p> <p>In particular, it links a format to a variable, and provides the column indices for the value, maximum, and minimum columns, as well as the validator columns. It also contains information on whether the data is accumulated, incremental, and the resolution of the data.</p> <p>Attributes:</p> Name Type Description <code>cls_id</code> <code>AutoField</code> <p>Primary key.</p> <code>format</code> <code>ForeignKey</code> <p>The format of the data file.</p> <code>variable</code> <code>ForeignKey</code> <p>The variable to which the data belongs.</p> <code>value</code> <code>PositiveSmallIntegerField</code> <p>Index of the value column, starting in 0.</p> <code>maximum</code> <code>PositiveSmallIntegerField</code> <p>Index of the maximum value column, starting in 0.</p> <code>minimum</code> <code>PositiveSmallIntegerField</code> <p>Index of the minimum value column, starting in 0.</p> <code>value_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the value validator column, starting in 0.</p> <code>value_validator_text</code> <code>CharField</code> <p>Value validator text.</p> <code>maximum_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the maximum value validator column, starting in 0.</p> <code>maximum_validator_text</code> <code>CharField</code> <p>Maximum value validator text.</p> <code>minimum_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the minimum value validator column, starting in 0.</p> <code>minimum_validator_text</code> <code>CharField</code> <p>Minimum value validator text.</p> <code>accumulate</code> <code>PositiveSmallIntegerField</code> <p>If set to a number of minutes, the data will be accumulated over that period.</p> <code>resolution</code> <code>DecimalField</code> <p>Resolution of the data. Only used if it is to be accumulated.</p> <code>incremental</code> <code>BooleanField</code> <p>Whether the data is an incremental counter. If it is, any value below the previous one will be removed.</p> <code>decimal_comma</code> <code>BooleanField</code> <p>Whether the data uses a comma as a decimal separator.</p>"},{"location":"reference/formatting/filters/#formatting.filters.Classification-functions","title":"Functions","text":""},{"location":"reference/formatting/filters/#formatting.filters.Classification.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.cls_id)\n</code></pre>"},{"location":"reference/formatting/filters/#formatting.filters.Classification.clean","title":"<code>clean()</code>","text":"<p>Validate the model instance.</p> <p>It checks that the column indices are different, and that the accumulation period is greater than zero if it is set. It also checks that the resolution is set if the data is accumulated.</p> Source code in <code>formatting/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model instance.\n\n    It checks that the column indices are different, and that the accumulation\n    period is greater than zero if it is set. It also checks that the resolution is\n    set if the data is accumulated.\n    \"\"\"\n    if self.accumulate and self.resolution is None:\n        raise ValidationError(\n            {\n                \"resolution\": \"The resolution must be set if the data is \"\n                \"accumulated.\"\n            }\n        )\n\n    col_names = [\n        \"value\",\n        \"maximum\",\n        \"minimum\",\n        \"value_validator_column\",\n        \"maximum_validator_column\",\n        \"minimum_validator_column\",\n    ]\n    unique = defaultdict(list)\n    for name in col_names:\n        if getattr(self, name) is not None:\n            unique[getattr(self, name)].append(name)\n    for _, names in unique.items():\n        if len(names) != 1:\n            msg = \"The columns must be different.\"\n            raise ValidationError({field: msg for field in names})\n</code></pre>"},{"location":"reference/formatting/filters/#formatting.filters.Classification.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:classification_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/filters/#formatting.filters.ClassificationFilter","title":"<code>ClassificationFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/formatting/filters/#formatting.filters.Date","title":"<code>Date</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Date format.</p> <p>Format string for the date column. It is used to parse the date column in the data file. The format string must be compatible with the <code>datetime</code> module in Python. See the datetime documentation for more information on valid format codes.</p> <p>Attributes:</p> Name Type Description <code>date_id</code> <code>AutoField</code> <p>Primary key.</p> <code>date_format</code> <code>CharField</code> <p>The format string for the date column in human readable form, eg. <code>DD-MM-YYYY</code>.</p> <code>code</code> <code>CharField</code> <p>The code used to parse the date column, eg. <code>%d-%m-%Y</code>.</p>"},{"location":"reference/formatting/filters/#formatting.filters.Date-functions","title":"Functions","text":""},{"location":"reference/formatting/filters/#formatting.filters.Date.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.date_format)\n</code></pre>"},{"location":"reference/formatting/filters/#formatting.filters.Date.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:date_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/filters/#formatting.filters.Delimiter","title":"<code>Delimiter</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Delimiter between columns in the data file.</p> <p>One or more characters that separate columns in a text file. The most common values are <code>,</code>, <code>;</code>, and <code>\\t</code> (tab).</p> <p>Attributes:</p> Name Type Description <code>delimiter_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>The name of the delimiter. eg. <code>comma</code>, <code>semicolon</code>, <code>tab</code>.</p> <code>character</code> <code>CharField</code> <p>The character used as a delimiter. eg. <code>,</code>, <code>;</code>, <code>\\t</code>.</p>"},{"location":"reference/formatting/filters/#formatting.filters.Delimiter-functions","title":"Functions","text":""},{"location":"reference/formatting/filters/#formatting.filters.Delimiter.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/formatting/filters/#formatting.filters.Delimiter.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:delimiter_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/filters/#formatting.filters.Extension","title":"<code>Extension</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Extension of the data file.</p> <p>It is mostly used to choose the tool to be employed to ingest the data. While it can take any value, there is currently explicit support only for <code>xlsx</code> and <code>xlx</code>. Anything else will be interpreted as a text file and loaded using <code>pandas.read_csv</code>.</p> <p>Attributes:</p> Name Type Description <code>extension_id</code> <code>AutoField</code> <p>Primary key.</p> <code>value</code> <code>CharField</code> <p>The extension value. eg. <code>xlsx</code>, <code>xlx</code>, <code>txt</code>.</p>"},{"location":"reference/formatting/filters/#formatting.filters.Extension-functions","title":"Functions","text":""},{"location":"reference/formatting/filters/#formatting.filters.Extension.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.value)\n</code></pre>"},{"location":"reference/formatting/filters/#formatting.filters.Extension.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:extension_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/filters/#formatting.filters.Format","title":"<code>Format</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Details of the data file format, describing how to read the file.</p> <p>It combines several properties, such as the file extension, the delimiter, the date and time formats, and the column indices for the date and time columns, instructing how to read the data file and parse the dates. It is mostly used to ingest data from text files, like CSV.</p> <p>Attributes:</p> Name Type Description <code>format_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Short name of the format entry.</p> <code>description</code> <code>TextField</code> <p>Description of the format.</p> <code>extension</code> <code>ForeignKey</code> <p>The extension of the data file.</p> <code>delimiter</code> <code>ForeignKey</code> <p>The delimiter between columns in the data file. Only required for text files.</p> <code>first_row</code> <code>PositiveSmallIntegerField</code> <p>Index of the first row with data, starting in 0.</p> <code>footer_rows</code> <code>PositiveSmallIntegerField</code> <p>Number of footer rows to be ignored at the end.</p> <code>date</code> <code>ForeignKey</code> <p>Format for the date column. Only required for text files.</p> <code>date_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the date column, starting in 0.</p> <code>time</code> <code>ForeignKey</code> <p>Format for the time column. Only required for text files.</p> <code>time_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the time column, starting in 0.</p>"},{"location":"reference/formatting/filters/#formatting.filters.Format-attributes","title":"Attributes","text":""},{"location":"reference/formatting/filters/#formatting.filters.Format.datetime_format","title":"<code>datetime_format: str</code>  <code>property</code>","text":"<p>Obtain the datetime format string.</p>"},{"location":"reference/formatting/filters/#formatting.filters.Format-functions","title":"Functions","text":""},{"location":"reference/formatting/filters/#formatting.filters.Format.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/formatting/filters/#formatting.filters.Format.datetime_columns","title":"<code>datetime_columns(delimiter)</code>","text":"<p>Column indices that correspond to the date and time columns in the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>delimiter</code> <code>str</code> <p>The delimiter used to split the date and time codes.</p> required <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: A list of column indices.</p> Source code in <code>formatting/models.py</code> <pre><code>def datetime_columns(self, delimiter: str) -&gt; list[int]:\n    \"\"\"Column indices that correspond to the date and time columns in the dataset.\n\n    Args:\n        delimiter (str): The delimiter used to split the date and time codes.\n\n    Returns:\n        list[int]: A list of column indices.\n    \"\"\"\n    date_items = self.date.code.split(delimiter)\n    date_cols = list(range(self.date_column, self.date_column + len(date_items)))\n    time_items = self.time.code.split(delimiter)\n    time_cols = list(range(self.time_column, self.time_column + len(time_items)))\n    return date_cols + time_cols\n</code></pre>"},{"location":"reference/formatting/filters/#formatting.filters.Format.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:format_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/filters/#formatting.filters.FormatFilter","title":"<code>FormatFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/formatting/filters/#formatting.filters.Time","title":"<code>Time</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Time format.</p> <p>Format string for the time column. It is used to parse the time column in the data file. The format string must be compatible with the <code>datetime</code> module in Python. See the datetime documentation for more information on valid format codes.</p> <p>Attributes:</p> Name Type Description <code>date_id</code> <code>AutoField</code> <p>Primary key.</p> <code>date_format</code> <code>CharField</code> <p>The format string for the date column in human readable form, eg. <code>HH:MM:SS 24H</code>.</p> <code>code</code> <code>CharField</code> <p>The code used to parse the date column, eg. <code>%H:%M:%S</code>.</p>"},{"location":"reference/formatting/filters/#formatting.filters.Time-functions","title":"Functions","text":""},{"location":"reference/formatting/filters/#formatting.filters.Time.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.time_format)\n</code></pre>"},{"location":"reference/formatting/filters/#formatting.filters.Time.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:time_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/filters/#formatting.filters.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/formatting/filters/#formatting.filters.Variable-attributes","title":"Attributes","text":""},{"location":"reference/formatting/filters/#formatting.filters.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/formatting/filters/#formatting.filters.Variable-functions","title":"Functions","text":""},{"location":"reference/formatting/filters/#formatting.filters.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/formatting/filters/#formatting.filters.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/formatting/filters/#formatting.filters.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/models/","title":"models","text":""},{"location":"reference/formatting/models/#formatting.models","title":"<code>formatting.models</code>","text":""},{"location":"reference/formatting/models/#formatting.models-classes","title":"Classes","text":""},{"location":"reference/formatting/models/#formatting.models.Classification","title":"<code>Classification</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Contains instructions on how to classify the data into a specific variable.</p> <p>In particular, it links a format to a variable, and provides the column indices for the value, maximum, and minimum columns, as well as the validator columns. It also contains information on whether the data is accumulated, incremental, and the resolution of the data.</p> <p>Attributes:</p> Name Type Description <code>cls_id</code> <code>AutoField</code> <p>Primary key.</p> <code>format</code> <code>ForeignKey</code> <p>The format of the data file.</p> <code>variable</code> <code>ForeignKey</code> <p>The variable to which the data belongs.</p> <code>value</code> <code>PositiveSmallIntegerField</code> <p>Index of the value column, starting in 0.</p> <code>maximum</code> <code>PositiveSmallIntegerField</code> <p>Index of the maximum value column, starting in 0.</p> <code>minimum</code> <code>PositiveSmallIntegerField</code> <p>Index of the minimum value column, starting in 0.</p> <code>value_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the value validator column, starting in 0.</p> <code>value_validator_text</code> <code>CharField</code> <p>Value validator text.</p> <code>maximum_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the maximum value validator column, starting in 0.</p> <code>maximum_validator_text</code> <code>CharField</code> <p>Maximum value validator text.</p> <code>minimum_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the minimum value validator column, starting in 0.</p> <code>minimum_validator_text</code> <code>CharField</code> <p>Minimum value validator text.</p> <code>accumulate</code> <code>PositiveSmallIntegerField</code> <p>If set to a number of minutes, the data will be accumulated over that period.</p> <code>resolution</code> <code>DecimalField</code> <p>Resolution of the data. Only used if it is to be accumulated.</p> <code>incremental</code> <code>BooleanField</code> <p>Whether the data is an incremental counter. If it is, any value below the previous one will be removed.</p> <code>decimal_comma</code> <code>BooleanField</code> <p>Whether the data uses a comma as a decimal separator.</p>"},{"location":"reference/formatting/models/#formatting.models.Classification-functions","title":"Functions","text":""},{"location":"reference/formatting/models/#formatting.models.Classification.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.cls_id)\n</code></pre>"},{"location":"reference/formatting/models/#formatting.models.Classification.clean","title":"<code>clean()</code>","text":"<p>Validate the model instance.</p> <p>It checks that the column indices are different, and that the accumulation period is greater than zero if it is set. It also checks that the resolution is set if the data is accumulated.</p> Source code in <code>formatting/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model instance.\n\n    It checks that the column indices are different, and that the accumulation\n    period is greater than zero if it is set. It also checks that the resolution is\n    set if the data is accumulated.\n    \"\"\"\n    if self.accumulate and self.resolution is None:\n        raise ValidationError(\n            {\n                \"resolution\": \"The resolution must be set if the data is \"\n                \"accumulated.\"\n            }\n        )\n\n    col_names = [\n        \"value\",\n        \"maximum\",\n        \"minimum\",\n        \"value_validator_column\",\n        \"maximum_validator_column\",\n        \"minimum_validator_column\",\n    ]\n    unique = defaultdict(list)\n    for name in col_names:\n        if getattr(self, name) is not None:\n            unique[getattr(self, name)].append(name)\n    for _, names in unique.items():\n        if len(names) != 1:\n            msg = \"The columns must be different.\"\n            raise ValidationError({field: msg for field in names})\n</code></pre>"},{"location":"reference/formatting/models/#formatting.models.Classification.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:classification_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/models/#formatting.models.Date","title":"<code>Date</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Date format.</p> <p>Format string for the date column. It is used to parse the date column in the data file. The format string must be compatible with the <code>datetime</code> module in Python. See the datetime documentation for more information on valid format codes.</p> <p>Attributes:</p> Name Type Description <code>date_id</code> <code>AutoField</code> <p>Primary key.</p> <code>date_format</code> <code>CharField</code> <p>The format string for the date column in human readable form, eg. <code>DD-MM-YYYY</code>.</p> <code>code</code> <code>CharField</code> <p>The code used to parse the date column, eg. <code>%d-%m-%Y</code>.</p>"},{"location":"reference/formatting/models/#formatting.models.Date-functions","title":"Functions","text":""},{"location":"reference/formatting/models/#formatting.models.Date.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.date_format)\n</code></pre>"},{"location":"reference/formatting/models/#formatting.models.Date.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:date_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/models/#formatting.models.Delimiter","title":"<code>Delimiter</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Delimiter between columns in the data file.</p> <p>One or more characters that separate columns in a text file. The most common values are <code>,</code>, <code>;</code>, and <code>\\t</code> (tab).</p> <p>Attributes:</p> Name Type Description <code>delimiter_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>The name of the delimiter. eg. <code>comma</code>, <code>semicolon</code>, <code>tab</code>.</p> <code>character</code> <code>CharField</code> <p>The character used as a delimiter. eg. <code>,</code>, <code>;</code>, <code>\\t</code>.</p>"},{"location":"reference/formatting/models/#formatting.models.Delimiter-functions","title":"Functions","text":""},{"location":"reference/formatting/models/#formatting.models.Delimiter.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/formatting/models/#formatting.models.Delimiter.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:delimiter_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/models/#formatting.models.Extension","title":"<code>Extension</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Extension of the data file.</p> <p>It is mostly used to choose the tool to be employed to ingest the data. While it can take any value, there is currently explicit support only for <code>xlsx</code> and <code>xlx</code>. Anything else will be interpreted as a text file and loaded using <code>pandas.read_csv</code>.</p> <p>Attributes:</p> Name Type Description <code>extension_id</code> <code>AutoField</code> <p>Primary key.</p> <code>value</code> <code>CharField</code> <p>The extension value. eg. <code>xlsx</code>, <code>xlx</code>, <code>txt</code>.</p>"},{"location":"reference/formatting/models/#formatting.models.Extension-functions","title":"Functions","text":""},{"location":"reference/formatting/models/#formatting.models.Extension.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.value)\n</code></pre>"},{"location":"reference/formatting/models/#formatting.models.Extension.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:extension_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/models/#formatting.models.Format","title":"<code>Format</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Details of the data file format, describing how to read the file.</p> <p>It combines several properties, such as the file extension, the delimiter, the date and time formats, and the column indices for the date and time columns, instructing how to read the data file and parse the dates. It is mostly used to ingest data from text files, like CSV.</p> <p>Attributes:</p> Name Type Description <code>format_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Short name of the format entry.</p> <code>description</code> <code>TextField</code> <p>Description of the format.</p> <code>extension</code> <code>ForeignKey</code> <p>The extension of the data file.</p> <code>delimiter</code> <code>ForeignKey</code> <p>The delimiter between columns in the data file. Only required for text files.</p> <code>first_row</code> <code>PositiveSmallIntegerField</code> <p>Index of the first row with data, starting in 0.</p> <code>footer_rows</code> <code>PositiveSmallIntegerField</code> <p>Number of footer rows to be ignored at the end.</p> <code>date</code> <code>ForeignKey</code> <p>Format for the date column. Only required for text files.</p> <code>date_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the date column, starting in 0.</p> <code>time</code> <code>ForeignKey</code> <p>Format for the time column. Only required for text files.</p> <code>time_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the time column, starting in 0.</p>"},{"location":"reference/formatting/models/#formatting.models.Format-attributes","title":"Attributes","text":""},{"location":"reference/formatting/models/#formatting.models.Format.datetime_format","title":"<code>datetime_format: str</code>  <code>property</code>","text":"<p>Obtain the datetime format string.</p>"},{"location":"reference/formatting/models/#formatting.models.Format-functions","title":"Functions","text":""},{"location":"reference/formatting/models/#formatting.models.Format.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/formatting/models/#formatting.models.Format.datetime_columns","title":"<code>datetime_columns(delimiter)</code>","text":"<p>Column indices that correspond to the date and time columns in the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>delimiter</code> <code>str</code> <p>The delimiter used to split the date and time codes.</p> required <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: A list of column indices.</p> Source code in <code>formatting/models.py</code> <pre><code>def datetime_columns(self, delimiter: str) -&gt; list[int]:\n    \"\"\"Column indices that correspond to the date and time columns in the dataset.\n\n    Args:\n        delimiter (str): The delimiter used to split the date and time codes.\n\n    Returns:\n        list[int]: A list of column indices.\n    \"\"\"\n    date_items = self.date.code.split(delimiter)\n    date_cols = list(range(self.date_column, self.date_column + len(date_items)))\n    time_items = self.time.code.split(delimiter)\n    time_cols = list(range(self.time_column, self.time_column + len(time_items)))\n    return date_cols + time_cols\n</code></pre>"},{"location":"reference/formatting/models/#formatting.models.Format.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:format_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/models/#formatting.models.Time","title":"<code>Time</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Time format.</p> <p>Format string for the time column. It is used to parse the time column in the data file. The format string must be compatible with the <code>datetime</code> module in Python. See the datetime documentation for more information on valid format codes.</p> <p>Attributes:</p> Name Type Description <code>date_id</code> <code>AutoField</code> <p>Primary key.</p> <code>date_format</code> <code>CharField</code> <p>The format string for the date column in human readable form, eg. <code>HH:MM:SS 24H</code>.</p> <code>code</code> <code>CharField</code> <p>The code used to parse the date column, eg. <code>%H:%M:%S</code>.</p>"},{"location":"reference/formatting/models/#formatting.models.Time-functions","title":"Functions","text":""},{"location":"reference/formatting/models/#formatting.models.Time.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.time_format)\n</code></pre>"},{"location":"reference/formatting/models/#formatting.models.Time.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:time_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/models/#formatting.models.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/formatting/models/#formatting.models.Variable-attributes","title":"Attributes","text":""},{"location":"reference/formatting/models/#formatting.models.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/formatting/models/#formatting.models.Variable-functions","title":"Functions","text":""},{"location":"reference/formatting/models/#formatting.models.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/formatting/models/#formatting.models.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/formatting/models/#formatting.models.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/tables/","title":"tables","text":""},{"location":"reference/formatting/tables/#formatting.tables","title":"<code>formatting.tables</code>","text":""},{"location":"reference/formatting/tables/#formatting.tables-classes","title":"Classes","text":""},{"location":"reference/formatting/tables/#formatting.tables.Classification","title":"<code>Classification</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Contains instructions on how to classify the data into a specific variable.</p> <p>In particular, it links a format to a variable, and provides the column indices for the value, maximum, and minimum columns, as well as the validator columns. It also contains information on whether the data is accumulated, incremental, and the resolution of the data.</p> <p>Attributes:</p> Name Type Description <code>cls_id</code> <code>AutoField</code> <p>Primary key.</p> <code>format</code> <code>ForeignKey</code> <p>The format of the data file.</p> <code>variable</code> <code>ForeignKey</code> <p>The variable to which the data belongs.</p> <code>value</code> <code>PositiveSmallIntegerField</code> <p>Index of the value column, starting in 0.</p> <code>maximum</code> <code>PositiveSmallIntegerField</code> <p>Index of the maximum value column, starting in 0.</p> <code>minimum</code> <code>PositiveSmallIntegerField</code> <p>Index of the minimum value column, starting in 0.</p> <code>value_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the value validator column, starting in 0.</p> <code>value_validator_text</code> <code>CharField</code> <p>Value validator text.</p> <code>maximum_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the maximum value validator column, starting in 0.</p> <code>maximum_validator_text</code> <code>CharField</code> <p>Maximum value validator text.</p> <code>minimum_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the minimum value validator column, starting in 0.</p> <code>minimum_validator_text</code> <code>CharField</code> <p>Minimum value validator text.</p> <code>accumulate</code> <code>PositiveSmallIntegerField</code> <p>If set to a number of minutes, the data will be accumulated over that period.</p> <code>resolution</code> <code>DecimalField</code> <p>Resolution of the data. Only used if it is to be accumulated.</p> <code>incremental</code> <code>BooleanField</code> <p>Whether the data is an incremental counter. If it is, any value below the previous one will be removed.</p> <code>decimal_comma</code> <code>BooleanField</code> <p>Whether the data uses a comma as a decimal separator.</p>"},{"location":"reference/formatting/tables/#formatting.tables.Classification-functions","title":"Functions","text":""},{"location":"reference/formatting/tables/#formatting.tables.Classification.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.cls_id)\n</code></pre>"},{"location":"reference/formatting/tables/#formatting.tables.Classification.clean","title":"<code>clean()</code>","text":"<p>Validate the model instance.</p> <p>It checks that the column indices are different, and that the accumulation period is greater than zero if it is set. It also checks that the resolution is set if the data is accumulated.</p> Source code in <code>formatting/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model instance.\n\n    It checks that the column indices are different, and that the accumulation\n    period is greater than zero if it is set. It also checks that the resolution is\n    set if the data is accumulated.\n    \"\"\"\n    if self.accumulate and self.resolution is None:\n        raise ValidationError(\n            {\n                \"resolution\": \"The resolution must be set if the data is \"\n                \"accumulated.\"\n            }\n        )\n\n    col_names = [\n        \"value\",\n        \"maximum\",\n        \"minimum\",\n        \"value_validator_column\",\n        \"maximum_validator_column\",\n        \"minimum_validator_column\",\n    ]\n    unique = defaultdict(list)\n    for name in col_names:\n        if getattr(self, name) is not None:\n            unique[getattr(self, name)].append(name)\n    for _, names in unique.items():\n        if len(names) != 1:\n            msg = \"The columns must be different.\"\n            raise ValidationError({field: msg for field in names})\n</code></pre>"},{"location":"reference/formatting/tables/#formatting.tables.Classification.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:classification_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/tables/#formatting.tables.ClassificationTable","title":"<code>ClassificationTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/formatting/tables/#formatting.tables.Date","title":"<code>Date</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Date format.</p> <p>Format string for the date column. It is used to parse the date column in the data file. The format string must be compatible with the <code>datetime</code> module in Python. See the datetime documentation for more information on valid format codes.</p> <p>Attributes:</p> Name Type Description <code>date_id</code> <code>AutoField</code> <p>Primary key.</p> <code>date_format</code> <code>CharField</code> <p>The format string for the date column in human readable form, eg. <code>DD-MM-YYYY</code>.</p> <code>code</code> <code>CharField</code> <p>The code used to parse the date column, eg. <code>%d-%m-%Y</code>.</p>"},{"location":"reference/formatting/tables/#formatting.tables.Date-functions","title":"Functions","text":""},{"location":"reference/formatting/tables/#formatting.tables.Date.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.date_format)\n</code></pre>"},{"location":"reference/formatting/tables/#formatting.tables.Date.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:date_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/tables/#formatting.tables.DateTable","title":"<code>DateTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/formatting/tables/#formatting.tables.Delimiter","title":"<code>Delimiter</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Delimiter between columns in the data file.</p> <p>One or more characters that separate columns in a text file. The most common values are <code>,</code>, <code>;</code>, and <code>\\t</code> (tab).</p> <p>Attributes:</p> Name Type Description <code>delimiter_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>The name of the delimiter. eg. <code>comma</code>, <code>semicolon</code>, <code>tab</code>.</p> <code>character</code> <code>CharField</code> <p>The character used as a delimiter. eg. <code>,</code>, <code>;</code>, <code>\\t</code>.</p>"},{"location":"reference/formatting/tables/#formatting.tables.Delimiter-functions","title":"Functions","text":""},{"location":"reference/formatting/tables/#formatting.tables.Delimiter.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/formatting/tables/#formatting.tables.Delimiter.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:delimiter_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/tables/#formatting.tables.DelimiterTable","title":"<code>DelimiterTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/formatting/tables/#formatting.tables.Extension","title":"<code>Extension</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Extension of the data file.</p> <p>It is mostly used to choose the tool to be employed to ingest the data. While it can take any value, there is currently explicit support only for <code>xlsx</code> and <code>xlx</code>. Anything else will be interpreted as a text file and loaded using <code>pandas.read_csv</code>.</p> <p>Attributes:</p> Name Type Description <code>extension_id</code> <code>AutoField</code> <p>Primary key.</p> <code>value</code> <code>CharField</code> <p>The extension value. eg. <code>xlsx</code>, <code>xlx</code>, <code>txt</code>.</p>"},{"location":"reference/formatting/tables/#formatting.tables.Extension-functions","title":"Functions","text":""},{"location":"reference/formatting/tables/#formatting.tables.Extension.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.value)\n</code></pre>"},{"location":"reference/formatting/tables/#formatting.tables.Extension.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:extension_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/tables/#formatting.tables.ExtensionTable","title":"<code>ExtensionTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/formatting/tables/#formatting.tables.Format","title":"<code>Format</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Details of the data file format, describing how to read the file.</p> <p>It combines several properties, such as the file extension, the delimiter, the date and time formats, and the column indices for the date and time columns, instructing how to read the data file and parse the dates. It is mostly used to ingest data from text files, like CSV.</p> <p>Attributes:</p> Name Type Description <code>format_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Short name of the format entry.</p> <code>description</code> <code>TextField</code> <p>Description of the format.</p> <code>extension</code> <code>ForeignKey</code> <p>The extension of the data file.</p> <code>delimiter</code> <code>ForeignKey</code> <p>The delimiter between columns in the data file. Only required for text files.</p> <code>first_row</code> <code>PositiveSmallIntegerField</code> <p>Index of the first row with data, starting in 0.</p> <code>footer_rows</code> <code>PositiveSmallIntegerField</code> <p>Number of footer rows to be ignored at the end.</p> <code>date</code> <code>ForeignKey</code> <p>Format for the date column. Only required for text files.</p> <code>date_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the date column, starting in 0.</p> <code>time</code> <code>ForeignKey</code> <p>Format for the time column. Only required for text files.</p> <code>time_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the time column, starting in 0.</p>"},{"location":"reference/formatting/tables/#formatting.tables.Format-attributes","title":"Attributes","text":""},{"location":"reference/formatting/tables/#formatting.tables.Format.datetime_format","title":"<code>datetime_format: str</code>  <code>property</code>","text":"<p>Obtain the datetime format string.</p>"},{"location":"reference/formatting/tables/#formatting.tables.Format-functions","title":"Functions","text":""},{"location":"reference/formatting/tables/#formatting.tables.Format.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/formatting/tables/#formatting.tables.Format.datetime_columns","title":"<code>datetime_columns(delimiter)</code>","text":"<p>Column indices that correspond to the date and time columns in the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>delimiter</code> <code>str</code> <p>The delimiter used to split the date and time codes.</p> required <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: A list of column indices.</p> Source code in <code>formatting/models.py</code> <pre><code>def datetime_columns(self, delimiter: str) -&gt; list[int]:\n    \"\"\"Column indices that correspond to the date and time columns in the dataset.\n\n    Args:\n        delimiter (str): The delimiter used to split the date and time codes.\n\n    Returns:\n        list[int]: A list of column indices.\n    \"\"\"\n    date_items = self.date.code.split(delimiter)\n    date_cols = list(range(self.date_column, self.date_column + len(date_items)))\n    time_items = self.time.code.split(delimiter)\n    time_cols = list(range(self.time_column, self.time_column + len(time_items)))\n    return date_cols + time_cols\n</code></pre>"},{"location":"reference/formatting/tables/#formatting.tables.Format.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:format_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/tables/#formatting.tables.FormatTable","title":"<code>FormatTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/formatting/tables/#formatting.tables.Time","title":"<code>Time</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Time format.</p> <p>Format string for the time column. It is used to parse the time column in the data file. The format string must be compatible with the <code>datetime</code> module in Python. See the datetime documentation for more information on valid format codes.</p> <p>Attributes:</p> Name Type Description <code>date_id</code> <code>AutoField</code> <p>Primary key.</p> <code>date_format</code> <code>CharField</code> <p>The format string for the date column in human readable form, eg. <code>HH:MM:SS 24H</code>.</p> <code>code</code> <code>CharField</code> <p>The code used to parse the date column, eg. <code>%H:%M:%S</code>.</p>"},{"location":"reference/formatting/tables/#formatting.tables.Time-functions","title":"Functions","text":""},{"location":"reference/formatting/tables/#formatting.tables.Time.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.time_format)\n</code></pre>"},{"location":"reference/formatting/tables/#formatting.tables.Time.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:time_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/tables/#formatting.tables.TimeTable","title":"<code>TimeTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/formatting/urls/","title":"urls","text":""},{"location":"reference/formatting/urls/#formatting.urls","title":"<code>formatting.urls</code>","text":""},{"location":"reference/formatting/urls/#formatting.urls-attributes","title":"Attributes","text":""},{"location":"reference/formatting/urls/#formatting.urls.app_name","title":"<code>app_name = 'formatting'</code>  <code>module-attribute</code>","text":""},{"location":"reference/formatting/urls/#formatting.urls.urlpatterns","title":"<code>urlpatterns = [path('extension/&lt;int:pk&gt;', ExtensionDetailView.as_view(), name='extension_detail'), path('delimiter/&lt;int:pk&gt;', DelimiterDetailView.as_view(), name='delimiter_detail'), path('date/&lt;int:pk&gt;', DateDetailView.as_view(), name='date_detail'), path('time/&lt;int:pk&gt;', TimeDetailView.as_view(), name='time_detail'), path('format/&lt;int:pk&gt;', FormatDetailView.as_view(), name='format_detail'), path('classification/&lt;int:pk&gt;', ClassificationDetailView.as_view(), name='classification_detail'), path('extension/create/', ExtensionCreateView.as_view(), name='extension_create'), path('delimiter/create/', DelimiterCreateView.as_view(), name='delimiter_create'), path('date/create/', DateCreateView.as_view(), name='date_create'), path('time/create/', TimeCreateView.as_view(), name='time_create'), path('format/create/', FormatCreateView.as_view(), name='format_create'), path('classification/create/', ClassificationCreateView.as_view(), name='classification_create'), path('extension/edit/&lt;int:pk&gt;', ExtensionEditView.as_view(), name='extension_edit'), path('delimiter/edit/&lt;int:pk&gt;', DelimiterEditView.as_view(), name='delimiter_edit'), path('date/edit/&lt;int:pk&gt;', DateEditView.as_view(), name='date_edit'), path('time/edit/&lt;int:pk&gt;', TimeEditView.as_view(), name='time_edit'), path('format/edit/&lt;int:pk&gt;', FormatEditView.as_view(), name='format_edit'), path('classification/edit/&lt;int:pk&gt;', ClassificationEditView.as_view(), name='classification_edit'), path('date/delete/&lt;int:pk&gt;', DateDeleteView.as_view(), name='date_delete'), path('delimiter/delete/&lt;int:pk&gt;', DelimiterDeleteView.as_view(), name='delimiter_delete'), path('extension/delete/&lt;int:pk&gt;', ExtensionDeleteView.as_view(), name='extension_delete'), path('format/delete/&lt;int:pk&gt;', FormatDeleteView.as_view(), name='format_delete'), path('time/delete/&lt;int:pk&gt;', TimeDeleteView.as_view(), name='time_delete'), path('classification/delete/&lt;int:pk&gt;', ClassificationDeleteView.as_view(), name='classification_delete'), path('extension/', ExtensionListView.as_view(), name='extension_list'), path('delimiter/', DelimiterListView.as_view(), name='delimiter_list'), path('date/', DateListView.as_view(), name='date_list'), path('time/', TimeListView.as_view(), name='time_list'), path('format/', FormatListView.as_view(), name='format_list'), path('classification/', ClassificationListView.as_view(), name='classification_list')]</code>  <code>module-attribute</code>","text":""},{"location":"reference/formatting/urls/#formatting.urls-classes","title":"Classes","text":""},{"location":"reference/formatting/urls/#formatting.urls.ClassificationCreateView","title":"<code>ClassificationCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a classification.</p>"},{"location":"reference/formatting/urls/#formatting.urls.ClassificationDeleteView","title":"<code>ClassificationDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a classification.</p>"},{"location":"reference/formatting/urls/#formatting.urls.ClassificationDetailView","title":"<code>ClassificationDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a classification.</p>"},{"location":"reference/formatting/urls/#formatting.urls.ClassificationEditView","title":"<code>ClassificationEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a classification.</p>"},{"location":"reference/formatting/urls/#formatting.urls.ClassificationListView","title":"<code>ClassificationListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list all classifications.</p>"},{"location":"reference/formatting/urls/#formatting.urls.DateCreateView","title":"<code>DateCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a date.</p>"},{"location":"reference/formatting/urls/#formatting.urls.DateDeleteView","title":"<code>DateDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a date.</p>"},{"location":"reference/formatting/urls/#formatting.urls.DateDetailView","title":"<code>DateDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a date.</p>"},{"location":"reference/formatting/urls/#formatting.urls.DateEditView","title":"<code>DateEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a date.</p>"},{"location":"reference/formatting/urls/#formatting.urls.DateListView","title":"<code>DateListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list all dates.</p>"},{"location":"reference/formatting/urls/#formatting.urls.DelimiterCreateView","title":"<code>DelimiterCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a delimiter.</p>"},{"location":"reference/formatting/urls/#formatting.urls.DelimiterDeleteView","title":"<code>DelimiterDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a delimiter.</p>"},{"location":"reference/formatting/urls/#formatting.urls.DelimiterDetailView","title":"<code>DelimiterDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a delimiter.</p>"},{"location":"reference/formatting/urls/#formatting.urls.DelimiterEditView","title":"<code>DelimiterEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a delimiter.</p>"},{"location":"reference/formatting/urls/#formatting.urls.DelimiterListView","title":"<code>DelimiterListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list all delimiters.</p>"},{"location":"reference/formatting/urls/#formatting.urls.ExtensionCreateView","title":"<code>ExtensionCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a extension.</p>"},{"location":"reference/formatting/urls/#formatting.urls.ExtensionDeleteView","title":"<code>ExtensionDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a extension.</p>"},{"location":"reference/formatting/urls/#formatting.urls.ExtensionDetailView","title":"<code>ExtensionDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a extension.</p>"},{"location":"reference/formatting/urls/#formatting.urls.ExtensionEditView","title":"<code>ExtensionEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a extension.</p>"},{"location":"reference/formatting/urls/#formatting.urls.ExtensionListView","title":"<code>ExtensionListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list all extensions.</p>"},{"location":"reference/formatting/urls/#formatting.urls.FormatCreateView","title":"<code>FormatCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a format.</p>"},{"location":"reference/formatting/urls/#formatting.urls.FormatDeleteView","title":"<code>FormatDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a format.</p>"},{"location":"reference/formatting/urls/#formatting.urls.FormatDetailView","title":"<code>FormatDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a format.</p>"},{"location":"reference/formatting/urls/#formatting.urls.FormatDetailView-functions","title":"Functions","text":""},{"location":"reference/formatting/urls/#formatting.urls.FormatDetailView.get_inline","title":"<code>get_inline()</code>","text":"<p>Return the inline data for the format.</p> <p>If provided, this method should return a dictionary with the inline data to be shown in the detail view. The dictionary should have the following keys:</p> <ul> <li>title: Title of the inline data.</li> <li>header: List with the header of the table.</li> <li>objects: List with the objects to be shown in the table. Each object should be     a list with the same length as the header.</li> </ul> <p>Returns:</p> Type Description <code>dict | None</code> <p>dict | None: Inline data for the format.</p> Source code in <code>formatting/views.py</code> <pre><code>def get_inline(self) -&gt; dict | None:\n    \"\"\"Return the inline data for the format.\n\n    If provided, this method should return a dictionary with the inline data to be\n    shown in the detail view. The dictionary should have the following keys:\n\n    - title: Title of the inline data.\n    - header: List with the header of the table.\n    - objects: List with the objects to be shown in the table. Each object should be\n        a list with the same length as the header.\n\n    Returns:\n        dict | None: Inline data for the format.\n    \"\"\"\n    objects = [\n        [\n            linkify(obj.pk, \"formatting:classification_detail\", obj.pk),\n            obj.value,\n            obj.variable.name,\n            linkify(\n                obj.variable.pk,\n                \"variable:variable_detail\",\n                obj.variable.variable_code,\n            ),\n            linkify(\n                obj.variable.unit.pk, \"variable:unit_detail\", obj.variable.unit\n            ),\n        ]\n        for obj in self.object.classification_set.all()\n    ]\n    return {\n        \"title\": \"Classifications\",\n        \"header\": [\"Id\", \"Column\", \"Variable\", \"Code\", \"Unit\"],\n        \"objects\": objects,\n    }\n</code></pre>"},{"location":"reference/formatting/urls/#formatting.urls.FormatEditView","title":"<code>FormatEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a format.</p>"},{"location":"reference/formatting/urls/#formatting.urls.FormatListView","title":"<code>FormatListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list all formats.</p>"},{"location":"reference/formatting/urls/#formatting.urls.TimeCreateView","title":"<code>TimeCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a time.</p>"},{"location":"reference/formatting/urls/#formatting.urls.TimeDeleteView","title":"<code>TimeDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a time.</p>"},{"location":"reference/formatting/urls/#formatting.urls.TimeDetailView","title":"<code>TimeDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a time.</p>"},{"location":"reference/formatting/urls/#formatting.urls.TimeEditView","title":"<code>TimeEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a time.</p>"},{"location":"reference/formatting/urls/#formatting.urls.TimeListView","title":"<code>TimeListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list all times.</p>"},{"location":"reference/formatting/views/","title":"views","text":""},{"location":"reference/formatting/views/#formatting.views","title":"<code>formatting.views</code>","text":""},{"location":"reference/formatting/views/#formatting.views-classes","title":"Classes","text":""},{"location":"reference/formatting/views/#formatting.views.Classification","title":"<code>Classification</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Contains instructions on how to classify the data into a specific variable.</p> <p>In particular, it links a format to a variable, and provides the column indices for the value, maximum, and minimum columns, as well as the validator columns. It also contains information on whether the data is accumulated, incremental, and the resolution of the data.</p> <p>Attributes:</p> Name Type Description <code>cls_id</code> <code>AutoField</code> <p>Primary key.</p> <code>format</code> <code>ForeignKey</code> <p>The format of the data file.</p> <code>variable</code> <code>ForeignKey</code> <p>The variable to which the data belongs.</p> <code>value</code> <code>PositiveSmallIntegerField</code> <p>Index of the value column, starting in 0.</p> <code>maximum</code> <code>PositiveSmallIntegerField</code> <p>Index of the maximum value column, starting in 0.</p> <code>minimum</code> <code>PositiveSmallIntegerField</code> <p>Index of the minimum value column, starting in 0.</p> <code>value_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the value validator column, starting in 0.</p> <code>value_validator_text</code> <code>CharField</code> <p>Value validator text.</p> <code>maximum_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the maximum value validator column, starting in 0.</p> <code>maximum_validator_text</code> <code>CharField</code> <p>Maximum value validator text.</p> <code>minimum_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the minimum value validator column, starting in 0.</p> <code>minimum_validator_text</code> <code>CharField</code> <p>Minimum value validator text.</p> <code>accumulate</code> <code>PositiveSmallIntegerField</code> <p>If set to a number of minutes, the data will be accumulated over that period.</p> <code>resolution</code> <code>DecimalField</code> <p>Resolution of the data. Only used if it is to be accumulated.</p> <code>incremental</code> <code>BooleanField</code> <p>Whether the data is an incremental counter. If it is, any value below the previous one will be removed.</p> <code>decimal_comma</code> <code>BooleanField</code> <p>Whether the data uses a comma as a decimal separator.</p>"},{"location":"reference/formatting/views/#formatting.views.Classification-functions","title":"Functions","text":""},{"location":"reference/formatting/views/#formatting.views.Classification.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.cls_id)\n</code></pre>"},{"location":"reference/formatting/views/#formatting.views.Classification.clean","title":"<code>clean()</code>","text":"<p>Validate the model instance.</p> <p>It checks that the column indices are different, and that the accumulation period is greater than zero if it is set. It also checks that the resolution is set if the data is accumulated.</p> Source code in <code>formatting/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model instance.\n\n    It checks that the column indices are different, and that the accumulation\n    period is greater than zero if it is set. It also checks that the resolution is\n    set if the data is accumulated.\n    \"\"\"\n    if self.accumulate and self.resolution is None:\n        raise ValidationError(\n            {\n                \"resolution\": \"The resolution must be set if the data is \"\n                \"accumulated.\"\n            }\n        )\n\n    col_names = [\n        \"value\",\n        \"maximum\",\n        \"minimum\",\n        \"value_validator_column\",\n        \"maximum_validator_column\",\n        \"minimum_validator_column\",\n    ]\n    unique = defaultdict(list)\n    for name in col_names:\n        if getattr(self, name) is not None:\n            unique[getattr(self, name)].append(name)\n    for _, names in unique.items():\n        if len(names) != 1:\n            msg = \"The columns must be different.\"\n            raise ValidationError({field: msg for field in names})\n</code></pre>"},{"location":"reference/formatting/views/#formatting.views.Classification.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:classification_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/views/#formatting.views.ClassificationCreateView","title":"<code>ClassificationCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a classification.</p>"},{"location":"reference/formatting/views/#formatting.views.ClassificationDeleteView","title":"<code>ClassificationDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a classification.</p>"},{"location":"reference/formatting/views/#formatting.views.ClassificationDetailView","title":"<code>ClassificationDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a classification.</p>"},{"location":"reference/formatting/views/#formatting.views.ClassificationEditView","title":"<code>ClassificationEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a classification.</p>"},{"location":"reference/formatting/views/#formatting.views.ClassificationFilter","title":"<code>ClassificationFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/formatting/views/#formatting.views.ClassificationListView","title":"<code>ClassificationListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list all classifications.</p>"},{"location":"reference/formatting/views/#formatting.views.ClassificationTable","title":"<code>ClassificationTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/formatting/views/#formatting.views.Date","title":"<code>Date</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Date format.</p> <p>Format string for the date column. It is used to parse the date column in the data file. The format string must be compatible with the <code>datetime</code> module in Python. See the datetime documentation for more information on valid format codes.</p> <p>Attributes:</p> Name Type Description <code>date_id</code> <code>AutoField</code> <p>Primary key.</p> <code>date_format</code> <code>CharField</code> <p>The format string for the date column in human readable form, eg. <code>DD-MM-YYYY</code>.</p> <code>code</code> <code>CharField</code> <p>The code used to parse the date column, eg. <code>%d-%m-%Y</code>.</p>"},{"location":"reference/formatting/views/#formatting.views.Date-functions","title":"Functions","text":""},{"location":"reference/formatting/views/#formatting.views.Date.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.date_format)\n</code></pre>"},{"location":"reference/formatting/views/#formatting.views.Date.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:date_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/views/#formatting.views.DateCreateView","title":"<code>DateCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a date.</p>"},{"location":"reference/formatting/views/#formatting.views.DateDeleteView","title":"<code>DateDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a date.</p>"},{"location":"reference/formatting/views/#formatting.views.DateDetailView","title":"<code>DateDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a date.</p>"},{"location":"reference/formatting/views/#formatting.views.DateEditView","title":"<code>DateEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a date.</p>"},{"location":"reference/formatting/views/#formatting.views.DateListView","title":"<code>DateListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list all dates.</p>"},{"location":"reference/formatting/views/#formatting.views.DateTable","title":"<code>DateTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/formatting/views/#formatting.views.Delimiter","title":"<code>Delimiter</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Delimiter between columns in the data file.</p> <p>One or more characters that separate columns in a text file. The most common values are <code>,</code>, <code>;</code>, and <code>\\t</code> (tab).</p> <p>Attributes:</p> Name Type Description <code>delimiter_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>The name of the delimiter. eg. <code>comma</code>, <code>semicolon</code>, <code>tab</code>.</p> <code>character</code> <code>CharField</code> <p>The character used as a delimiter. eg. <code>,</code>, <code>;</code>, <code>\\t</code>.</p>"},{"location":"reference/formatting/views/#formatting.views.Delimiter-functions","title":"Functions","text":""},{"location":"reference/formatting/views/#formatting.views.Delimiter.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/formatting/views/#formatting.views.Delimiter.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:delimiter_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/views/#formatting.views.DelimiterCreateView","title":"<code>DelimiterCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a delimiter.</p>"},{"location":"reference/formatting/views/#formatting.views.DelimiterDeleteView","title":"<code>DelimiterDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a delimiter.</p>"},{"location":"reference/formatting/views/#formatting.views.DelimiterDetailView","title":"<code>DelimiterDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a delimiter.</p>"},{"location":"reference/formatting/views/#formatting.views.DelimiterEditView","title":"<code>DelimiterEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a delimiter.</p>"},{"location":"reference/formatting/views/#formatting.views.DelimiterListView","title":"<code>DelimiterListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list all delimiters.</p>"},{"location":"reference/formatting/views/#formatting.views.DelimiterTable","title":"<code>DelimiterTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/formatting/views/#formatting.views.Extension","title":"<code>Extension</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Extension of the data file.</p> <p>It is mostly used to choose the tool to be employed to ingest the data. While it can take any value, there is currently explicit support only for <code>xlsx</code> and <code>xlx</code>. Anything else will be interpreted as a text file and loaded using <code>pandas.read_csv</code>.</p> <p>Attributes:</p> Name Type Description <code>extension_id</code> <code>AutoField</code> <p>Primary key.</p> <code>value</code> <code>CharField</code> <p>The extension value. eg. <code>xlsx</code>, <code>xlx</code>, <code>txt</code>.</p>"},{"location":"reference/formatting/views/#formatting.views.Extension-functions","title":"Functions","text":""},{"location":"reference/formatting/views/#formatting.views.Extension.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.value)\n</code></pre>"},{"location":"reference/formatting/views/#formatting.views.Extension.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:extension_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/views/#formatting.views.ExtensionCreateView","title":"<code>ExtensionCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a extension.</p>"},{"location":"reference/formatting/views/#formatting.views.ExtensionDeleteView","title":"<code>ExtensionDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a extension.</p>"},{"location":"reference/formatting/views/#formatting.views.ExtensionDetailView","title":"<code>ExtensionDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a extension.</p>"},{"location":"reference/formatting/views/#formatting.views.ExtensionEditView","title":"<code>ExtensionEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a extension.</p>"},{"location":"reference/formatting/views/#formatting.views.ExtensionListView","title":"<code>ExtensionListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list all extensions.</p>"},{"location":"reference/formatting/views/#formatting.views.ExtensionTable","title":"<code>ExtensionTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/formatting/views/#formatting.views.Format","title":"<code>Format</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Details of the data file format, describing how to read the file.</p> <p>It combines several properties, such as the file extension, the delimiter, the date and time formats, and the column indices for the date and time columns, instructing how to read the data file and parse the dates. It is mostly used to ingest data from text files, like CSV.</p> <p>Attributes:</p> Name Type Description <code>format_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Short name of the format entry.</p> <code>description</code> <code>TextField</code> <p>Description of the format.</p> <code>extension</code> <code>ForeignKey</code> <p>The extension of the data file.</p> <code>delimiter</code> <code>ForeignKey</code> <p>The delimiter between columns in the data file. Only required for text files.</p> <code>first_row</code> <code>PositiveSmallIntegerField</code> <p>Index of the first row with data, starting in 0.</p> <code>footer_rows</code> <code>PositiveSmallIntegerField</code> <p>Number of footer rows to be ignored at the end.</p> <code>date</code> <code>ForeignKey</code> <p>Format for the date column. Only required for text files.</p> <code>date_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the date column, starting in 0.</p> <code>time</code> <code>ForeignKey</code> <p>Format for the time column. Only required for text files.</p> <code>time_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the time column, starting in 0.</p>"},{"location":"reference/formatting/views/#formatting.views.Format-attributes","title":"Attributes","text":""},{"location":"reference/formatting/views/#formatting.views.Format.datetime_format","title":"<code>datetime_format: str</code>  <code>property</code>","text":"<p>Obtain the datetime format string.</p>"},{"location":"reference/formatting/views/#formatting.views.Format-functions","title":"Functions","text":""},{"location":"reference/formatting/views/#formatting.views.Format.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/formatting/views/#formatting.views.Format.datetime_columns","title":"<code>datetime_columns(delimiter)</code>","text":"<p>Column indices that correspond to the date and time columns in the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>delimiter</code> <code>str</code> <p>The delimiter used to split the date and time codes.</p> required <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: A list of column indices.</p> Source code in <code>formatting/models.py</code> <pre><code>def datetime_columns(self, delimiter: str) -&gt; list[int]:\n    \"\"\"Column indices that correspond to the date and time columns in the dataset.\n\n    Args:\n        delimiter (str): The delimiter used to split the date and time codes.\n\n    Returns:\n        list[int]: A list of column indices.\n    \"\"\"\n    date_items = self.date.code.split(delimiter)\n    date_cols = list(range(self.date_column, self.date_column + len(date_items)))\n    time_items = self.time.code.split(delimiter)\n    time_cols = list(range(self.time_column, self.time_column + len(time_items)))\n    return date_cols + time_cols\n</code></pre>"},{"location":"reference/formatting/views/#formatting.views.Format.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:format_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/views/#formatting.views.FormatCreateView","title":"<code>FormatCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a format.</p>"},{"location":"reference/formatting/views/#formatting.views.FormatDeleteView","title":"<code>FormatDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a format.</p>"},{"location":"reference/formatting/views/#formatting.views.FormatDetailView","title":"<code>FormatDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a format.</p>"},{"location":"reference/formatting/views/#formatting.views.FormatDetailView-functions","title":"Functions","text":""},{"location":"reference/formatting/views/#formatting.views.FormatDetailView.get_inline","title":"<code>get_inline()</code>","text":"<p>Return the inline data for the format.</p> <p>If provided, this method should return a dictionary with the inline data to be shown in the detail view. The dictionary should have the following keys:</p> <ul> <li>title: Title of the inline data.</li> <li>header: List with the header of the table.</li> <li>objects: List with the objects to be shown in the table. Each object should be     a list with the same length as the header.</li> </ul> <p>Returns:</p> Type Description <code>dict | None</code> <p>dict | None: Inline data for the format.</p> Source code in <code>formatting/views.py</code> <pre><code>def get_inline(self) -&gt; dict | None:\n    \"\"\"Return the inline data for the format.\n\n    If provided, this method should return a dictionary with the inline data to be\n    shown in the detail view. The dictionary should have the following keys:\n\n    - title: Title of the inline data.\n    - header: List with the header of the table.\n    - objects: List with the objects to be shown in the table. Each object should be\n        a list with the same length as the header.\n\n    Returns:\n        dict | None: Inline data for the format.\n    \"\"\"\n    objects = [\n        [\n            linkify(obj.pk, \"formatting:classification_detail\", obj.pk),\n            obj.value,\n            obj.variable.name,\n            linkify(\n                obj.variable.pk,\n                \"variable:variable_detail\",\n                obj.variable.variable_code,\n            ),\n            linkify(\n                obj.variable.unit.pk, \"variable:unit_detail\", obj.variable.unit\n            ),\n        ]\n        for obj in self.object.classification_set.all()\n    ]\n    return {\n        \"title\": \"Classifications\",\n        \"header\": [\"Id\", \"Column\", \"Variable\", \"Code\", \"Unit\"],\n        \"objects\": objects,\n    }\n</code></pre>"},{"location":"reference/formatting/views/#formatting.views.FormatEditView","title":"<code>FormatEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a format.</p>"},{"location":"reference/formatting/views/#formatting.views.FormatFilter","title":"<code>FormatFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/formatting/views/#formatting.views.FormatListView","title":"<code>FormatListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list all formats.</p>"},{"location":"reference/formatting/views/#formatting.views.FormatTable","title":"<code>FormatTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/formatting/views/#formatting.views.Time","title":"<code>Time</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Time format.</p> <p>Format string for the time column. It is used to parse the time column in the data file. The format string must be compatible with the <code>datetime</code> module in Python. See the datetime documentation for more information on valid format codes.</p> <p>Attributes:</p> Name Type Description <code>date_id</code> <code>AutoField</code> <p>Primary key.</p> <code>date_format</code> <code>CharField</code> <p>The format string for the date column in human readable form, eg. <code>HH:MM:SS 24H</code>.</p> <code>code</code> <code>CharField</code> <p>The code used to parse the date column, eg. <code>%H:%M:%S</code>.</p>"},{"location":"reference/formatting/views/#formatting.views.Time-functions","title":"Functions","text":""},{"location":"reference/formatting/views/#formatting.views.Time.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.time_format)\n</code></pre>"},{"location":"reference/formatting/views/#formatting.views.Time.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:time_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/views/#formatting.views.TimeCreateView","title":"<code>TimeCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a time.</p>"},{"location":"reference/formatting/views/#formatting.views.TimeDeleteView","title":"<code>TimeDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a time.</p>"},{"location":"reference/formatting/views/#formatting.views.TimeDetailView","title":"<code>TimeDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a time.</p>"},{"location":"reference/formatting/views/#formatting.views.TimeEditView","title":"<code>TimeEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a time.</p>"},{"location":"reference/formatting/views/#formatting.views.TimeListView","title":"<code>TimeListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list all times.</p>"},{"location":"reference/formatting/views/#formatting.views.TimeTable","title":"<code>TimeTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/formatting/views/#formatting.views-functions","title":"Functions","text":""},{"location":"reference/formatting/views/#formatting.views.linkify","title":"<code>linkify(pk, address, label)</code>","text":"<p>Return a link to the address with the label.</p> <p>Parameters:</p> Name Type Description Default <code>pk</code> <code>int</code> <p>Primary key of the object.</p> required <code>address</code> <code>str</code> <p>URL address to link to. It must be a named URL, eg 'app_name:model_detail'.</p> required <code>label</code> <code>str</code> <p>Label to display on the link.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>HTML link to the address.</p> Source code in <code>formatting/views.py</code> <pre><code>def linkify(pk: int, address: str, label: str) -&gt; str:\n    \"\"\"Return a link to the address with the label.\n\n    Args:\n        pk (int): Primary key of the object.\n        address (str): URL address to link to. It must be a named URL, eg\n            'app_name:model_detail'.\n        label (str): Label to display on the link.\n\n    Returns:\n        str: HTML link to the address.\n    \"\"\"\n    url = reverse(address, kwargs={\"pk\": pk})\n    return mark_safe(f\"&lt;a href='{url}' class='btn btn-link'&gt;{label}&lt;/a&gt;\")\n</code></pre>"},{"location":"reference/formatting/signals/","title":"signals","text":""},{"location":"reference/formatting/signals/#formatting.signals","title":"<code>formatting.signals</code>","text":""},{"location":"reference/formatting/signals/handlers/","title":"handlers","text":""},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers","title":"<code>formatting.signals.handlers</code>","text":""},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers-attributes","title":"Attributes","text":""},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.User","title":"<code>User = get_user_model()</code>  <code>module-attribute</code>","text":""},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers-classes","title":"Classes","text":""},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Classification","title":"<code>Classification</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Contains instructions on how to classify the data into a specific variable.</p> <p>In particular, it links a format to a variable, and provides the column indices for the value, maximum, and minimum columns, as well as the validator columns. It also contains information on whether the data is accumulated, incremental, and the resolution of the data.</p> <p>Attributes:</p> Name Type Description <code>cls_id</code> <code>AutoField</code> <p>Primary key.</p> <code>format</code> <code>ForeignKey</code> <p>The format of the data file.</p> <code>variable</code> <code>ForeignKey</code> <p>The variable to which the data belongs.</p> <code>value</code> <code>PositiveSmallIntegerField</code> <p>Index of the value column, starting in 0.</p> <code>maximum</code> <code>PositiveSmallIntegerField</code> <p>Index of the maximum value column, starting in 0.</p> <code>minimum</code> <code>PositiveSmallIntegerField</code> <p>Index of the minimum value column, starting in 0.</p> <code>value_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the value validator column, starting in 0.</p> <code>value_validator_text</code> <code>CharField</code> <p>Value validator text.</p> <code>maximum_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the maximum value validator column, starting in 0.</p> <code>maximum_validator_text</code> <code>CharField</code> <p>Maximum value validator text.</p> <code>minimum_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the minimum value validator column, starting in 0.</p> <code>minimum_validator_text</code> <code>CharField</code> <p>Minimum value validator text.</p> <code>accumulate</code> <code>PositiveSmallIntegerField</code> <p>If set to a number of minutes, the data will be accumulated over that period.</p> <code>resolution</code> <code>DecimalField</code> <p>Resolution of the data. Only used if it is to be accumulated.</p> <code>incremental</code> <code>BooleanField</code> <p>Whether the data is an incremental counter. If it is, any value below the previous one will be removed.</p> <code>decimal_comma</code> <code>BooleanField</code> <p>Whether the data uses a comma as a decimal separator.</p>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Classification-functions","title":"Functions","text":""},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Classification.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.cls_id)\n</code></pre>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Classification.clean","title":"<code>clean()</code>","text":"<p>Validate the model instance.</p> <p>It checks that the column indices are different, and that the accumulation period is greater than zero if it is set. It also checks that the resolution is set if the data is accumulated.</p> Source code in <code>formatting/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model instance.\n\n    It checks that the column indices are different, and that the accumulation\n    period is greater than zero if it is set. It also checks that the resolution is\n    set if the data is accumulated.\n    \"\"\"\n    if self.accumulate and self.resolution is None:\n        raise ValidationError(\n            {\n                \"resolution\": \"The resolution must be set if the data is \"\n                \"accumulated.\"\n            }\n        )\n\n    col_names = [\n        \"value\",\n        \"maximum\",\n        \"minimum\",\n        \"value_validator_column\",\n        \"maximum_validator_column\",\n        \"minimum_validator_column\",\n    ]\n    unique = defaultdict(list)\n    for name in col_names:\n        if getattr(self, name) is not None:\n            unique[getattr(self, name)].append(name)\n    for _, names in unique.items():\n        if len(names) != 1:\n            msg = \"The columns must be different.\"\n            raise ValidationError({field: msg for field in names})\n</code></pre>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Classification.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:classification_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Date","title":"<code>Date</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Date format.</p> <p>Format string for the date column. It is used to parse the date column in the data file. The format string must be compatible with the <code>datetime</code> module in Python. See the datetime documentation for more information on valid format codes.</p> <p>Attributes:</p> Name Type Description <code>date_id</code> <code>AutoField</code> <p>Primary key.</p> <code>date_format</code> <code>CharField</code> <p>The format string for the date column in human readable form, eg. <code>DD-MM-YYYY</code>.</p> <code>code</code> <code>CharField</code> <p>The code used to parse the date column, eg. <code>%d-%m-%Y</code>.</p>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Date-functions","title":"Functions","text":""},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Date.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.date_format)\n</code></pre>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Date.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:date_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Delimiter","title":"<code>Delimiter</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Delimiter between columns in the data file.</p> <p>One or more characters that separate columns in a text file. The most common values are <code>,</code>, <code>;</code>, and <code>\\t</code> (tab).</p> <p>Attributes:</p> Name Type Description <code>delimiter_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>The name of the delimiter. eg. <code>comma</code>, <code>semicolon</code>, <code>tab</code>.</p> <code>character</code> <code>CharField</code> <p>The character used as a delimiter. eg. <code>,</code>, <code>;</code>, <code>\\t</code>.</p>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Delimiter-functions","title":"Functions","text":""},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Delimiter.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Delimiter.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:delimiter_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Extension","title":"<code>Extension</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Extension of the data file.</p> <p>It is mostly used to choose the tool to be employed to ingest the data. While it can take any value, there is currently explicit support only for <code>xlsx</code> and <code>xlx</code>. Anything else will be interpreted as a text file and loaded using <code>pandas.read_csv</code>.</p> <p>Attributes:</p> Name Type Description <code>extension_id</code> <code>AutoField</code> <p>Primary key.</p> <code>value</code> <code>CharField</code> <p>The extension value. eg. <code>xlsx</code>, <code>xlx</code>, <code>txt</code>.</p>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Extension-functions","title":"Functions","text":""},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Extension.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.value)\n</code></pre>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Extension.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:extension_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Format","title":"<code>Format</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Details of the data file format, describing how to read the file.</p> <p>It combines several properties, such as the file extension, the delimiter, the date and time formats, and the column indices for the date and time columns, instructing how to read the data file and parse the dates. It is mostly used to ingest data from text files, like CSV.</p> <p>Attributes:</p> Name Type Description <code>format_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Short name of the format entry.</p> <code>description</code> <code>TextField</code> <p>Description of the format.</p> <code>extension</code> <code>ForeignKey</code> <p>The extension of the data file.</p> <code>delimiter</code> <code>ForeignKey</code> <p>The delimiter between columns in the data file. Only required for text files.</p> <code>first_row</code> <code>PositiveSmallIntegerField</code> <p>Index of the first row with data, starting in 0.</p> <code>footer_rows</code> <code>PositiveSmallIntegerField</code> <p>Number of footer rows to be ignored at the end.</p> <code>date</code> <code>ForeignKey</code> <p>Format for the date column. Only required for text files.</p> <code>date_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the date column, starting in 0.</p> <code>time</code> <code>ForeignKey</code> <p>Format for the time column. Only required for text files.</p> <code>time_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the time column, starting in 0.</p>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Format-attributes","title":"Attributes","text":""},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Format.datetime_format","title":"<code>datetime_format: str</code>  <code>property</code>","text":"<p>Obtain the datetime format string.</p>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Format-functions","title":"Functions","text":""},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Format.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Format.datetime_columns","title":"<code>datetime_columns(delimiter)</code>","text":"<p>Column indices that correspond to the date and time columns in the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>delimiter</code> <code>str</code> <p>The delimiter used to split the date and time codes.</p> required <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: A list of column indices.</p> Source code in <code>formatting/models.py</code> <pre><code>def datetime_columns(self, delimiter: str) -&gt; list[int]:\n    \"\"\"Column indices that correspond to the date and time columns in the dataset.\n\n    Args:\n        delimiter (str): The delimiter used to split the date and time codes.\n\n    Returns:\n        list[int]: A list of column indices.\n    \"\"\"\n    date_items = self.date.code.split(delimiter)\n    date_cols = list(range(self.date_column, self.date_column + len(date_items)))\n    time_items = self.time.code.split(delimiter)\n    time_cols = list(range(self.time_column, self.time_column + len(time_items)))\n    return date_cols + time_cols\n</code></pre>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Format.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:format_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Time","title":"<code>Time</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Time format.</p> <p>Format string for the time column. It is used to parse the time column in the data file. The format string must be compatible with the <code>datetime</code> module in Python. See the datetime documentation for more information on valid format codes.</p> <p>Attributes:</p> Name Type Description <code>date_id</code> <code>AutoField</code> <p>Primary key.</p> <code>date_format</code> <code>CharField</code> <p>The format string for the date column in human readable form, eg. <code>HH:MM:SS 24H</code>.</p> <code>code</code> <code>CharField</code> <p>The code used to parse the date column, eg. <code>%H:%M:%S</code>.</p>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Time-functions","title":"Functions","text":""},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Time.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.time_format)\n</code></pre>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.Time.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:time_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers-functions","title":"Functions","text":""},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.set_model_permissions","title":"<code>set_model_permissions(sender, **kwargs)</code>","text":"<p>Set model-level permissions.</p> Source code in <code>formatting/signals/handlers.py</code> <pre><code>@receiver(post_migrate)\ndef set_model_permissions(sender, **kwargs):\n    \"\"\"Set model-level permissions.\"\"\"\n    for model in [\n        Classification,\n        Date,\n        Delimiter,\n        Extension,\n        Format,\n        Time,\n    ]:\n        model.set_model_permissions()\n</code></pre>"},{"location":"reference/formatting/signals/handlers/#formatting.signals.handlers.set_object_permissions","title":"<code>set_object_permissions(sender, instance, **kwargs)</code>","text":"<p>Set object-level permissions\".</p> Source code in <code>formatting/signals/handlers.py</code> <pre><code>@receiver(post_save, sender=Classification)\n@receiver(post_save, sender=Date)\n@receiver(post_save, sender=Delimiter)\n@receiver(post_save, sender=Extension)\n@receiver(post_save, sender=Format)\n@receiver(post_save, sender=Time)\ndef set_object_permissions(sender, instance: PermissionsBase, **kwargs):\n    \"\"\"Set object-level permissions\".\"\"\"\n    instance.set_object_permissions()\n</code></pre>"},{"location":"reference/importing/","title":"importing","text":""},{"location":"reference/importing/#importing","title":"<code>importing</code>","text":""},{"location":"reference/importing/admin/","title":"admin","text":""},{"location":"reference/importing/admin/#importing.admin","title":"<code>importing.admin</code>","text":""},{"location":"reference/importing/admin/#importing.admin-classes","title":"Classes","text":""},{"location":"reference/importing/admin/#importing.admin.DataImport","title":"<code>DataImport</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Model to store the data imports.</p> <p>This model stores the data imports, which are files with data that are uploaded to the system. The data is then processed asynchronously and stored in the database.</p> <p>Attributes:</p> Name Type Description <code>station</code> <code>ForeignKey</code> <p>Station to which the data belongs.</p> <code>format</code> <code>ForeignKey</code> <p>Format of the data.</p> <code>rawfile</code> <code>FileField</code> <p>File with the data to be imported.</p> <code>date</code> <code>DateTimeField</code> <p>Date of submission of the data.</p> <code>start_date</code> <code>DateTimeField</code> <p>Start date of the data.</p> <code>end_date</code> <code>DateTimeField</code> <p>End date of the data.</p> <code>records</code> <code>IntegerField</code> <p>Number of records in the data.</p> <code>observations</code> <code>TextField</code> <p>Notes or observations about the data.</p> <code>status</code> <code>TextField</code> <p>Status of the import.</p> <code>log</code> <code>TextField</code> <p>Log of the data ingestion, indicating any errors.</p> <code>reprocess</code> <code>BooleanField</code> <p>If checked, the data will be reprocessed.</p>"},{"location":"reference/importing/admin/#importing.admin.DataImport-functions","title":"Functions","text":""},{"location":"reference/importing/admin/#importing.admin.DataImport.clean","title":"<code>clean()</code>","text":"<p>Validate information and uploads the measurement data.</p> Source code in <code>importing/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate information and uploads the measurement data.\"\"\"\n    tz = self.station.timezone\n    if not tz:\n        raise ValidationError(\"Station must have a timezone set.\")\n\n    # If the file has changed, we reprocess the data\n    if self.pk and self.rawfile != self.__class__.objects.get(pk=self.pk).rawfile:\n        self.reprocess = True\n\n    if self.reprocess:\n        self.status = \"N\"\n        self.reprocess = False\n</code></pre>"},{"location":"reference/importing/admin/#importing.admin.DataImportAdmin","title":"<code>DataImportAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the DataImport model.</p>"},{"location":"reference/importing/apps/","title":"apps","text":""},{"location":"reference/importing/apps/#importing.apps","title":"<code>importing.apps</code>","text":""},{"location":"reference/importing/apps/#importing.apps-classes","title":"Classes","text":""},{"location":"reference/importing/apps/#importing.apps.ImportingConfig","title":"<code>ImportingConfig</code>","text":"<p>               Bases: <code>AppConfig</code></p>"},{"location":"reference/importing/filters/","title":"filters","text":""},{"location":"reference/importing/filters/#importing.filters","title":"<code>importing.filters</code>","text":""},{"location":"reference/importing/filters/#importing.filters-classes","title":"Classes","text":""},{"location":"reference/importing/filters/#importing.filters.DataImport","title":"<code>DataImport</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Model to store the data imports.</p> <p>This model stores the data imports, which are files with data that are uploaded to the system. The data is then processed asynchronously and stored in the database.</p> <p>Attributes:</p> Name Type Description <code>station</code> <code>ForeignKey</code> <p>Station to which the data belongs.</p> <code>format</code> <code>ForeignKey</code> <p>Format of the data.</p> <code>rawfile</code> <code>FileField</code> <p>File with the data to be imported.</p> <code>date</code> <code>DateTimeField</code> <p>Date of submission of the data.</p> <code>start_date</code> <code>DateTimeField</code> <p>Start date of the data.</p> <code>end_date</code> <code>DateTimeField</code> <p>End date of the data.</p> <code>records</code> <code>IntegerField</code> <p>Number of records in the data.</p> <code>observations</code> <code>TextField</code> <p>Notes or observations about the data.</p> <code>status</code> <code>TextField</code> <p>Status of the import.</p> <code>log</code> <code>TextField</code> <p>Log of the data ingestion, indicating any errors.</p> <code>reprocess</code> <code>BooleanField</code> <p>If checked, the data will be reprocessed.</p>"},{"location":"reference/importing/filters/#importing.filters.DataImport-functions","title":"Functions","text":""},{"location":"reference/importing/filters/#importing.filters.DataImport.clean","title":"<code>clean()</code>","text":"<p>Validate information and uploads the measurement data.</p> Source code in <code>importing/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate information and uploads the measurement data.\"\"\"\n    tz = self.station.timezone\n    if not tz:\n        raise ValidationError(\"Station must have a timezone set.\")\n\n    # If the file has changed, we reprocess the data\n    if self.pk and self.rawfile != self.__class__.objects.get(pk=self.pk).rawfile:\n        self.reprocess = True\n\n    if self.reprocess:\n        self.status = \"N\"\n        self.reprocess = False\n</code></pre>"},{"location":"reference/importing/filters/#importing.filters.DataImportFilter","title":"<code>DataImportFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/importing/filters/#importing.filters.Format","title":"<code>Format</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Details of the data file format, describing how to read the file.</p> <p>It combines several properties, such as the file extension, the delimiter, the date and time formats, and the column indices for the date and time columns, instructing how to read the data file and parse the dates. It is mostly used to ingest data from text files, like CSV.</p> <p>Attributes:</p> Name Type Description <code>format_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Short name of the format entry.</p> <code>description</code> <code>TextField</code> <p>Description of the format.</p> <code>extension</code> <code>ForeignKey</code> <p>The extension of the data file.</p> <code>delimiter</code> <code>ForeignKey</code> <p>The delimiter between columns in the data file. Only required for text files.</p> <code>first_row</code> <code>PositiveSmallIntegerField</code> <p>Index of the first row with data, starting in 0.</p> <code>footer_rows</code> <code>PositiveSmallIntegerField</code> <p>Number of footer rows to be ignored at the end.</p> <code>date</code> <code>ForeignKey</code> <p>Format for the date column. Only required for text files.</p> <code>date_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the date column, starting in 0.</p> <code>time</code> <code>ForeignKey</code> <p>Format for the time column. Only required for text files.</p> <code>time_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the time column, starting in 0.</p>"},{"location":"reference/importing/filters/#importing.filters.Format-attributes","title":"Attributes","text":""},{"location":"reference/importing/filters/#importing.filters.Format.datetime_format","title":"<code>datetime_format: str</code>  <code>property</code>","text":"<p>Obtain the datetime format string.</p>"},{"location":"reference/importing/filters/#importing.filters.Format-functions","title":"Functions","text":""},{"location":"reference/importing/filters/#importing.filters.Format.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/importing/filters/#importing.filters.Format.datetime_columns","title":"<code>datetime_columns(delimiter)</code>","text":"<p>Column indices that correspond to the date and time columns in the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>delimiter</code> <code>str</code> <p>The delimiter used to split the date and time codes.</p> required <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: A list of column indices.</p> Source code in <code>formatting/models.py</code> <pre><code>def datetime_columns(self, delimiter: str) -&gt; list[int]:\n    \"\"\"Column indices that correspond to the date and time columns in the dataset.\n\n    Args:\n        delimiter (str): The delimiter used to split the date and time codes.\n\n    Returns:\n        list[int]: A list of column indices.\n    \"\"\"\n    date_items = self.date.code.split(delimiter)\n    date_cols = list(range(self.date_column, self.date_column + len(date_items)))\n    time_items = self.time.code.split(delimiter)\n    time_cols = list(range(self.time_column, self.time_column + len(time_items)))\n    return date_cols + time_cols\n</code></pre>"},{"location":"reference/importing/filters/#importing.filters.Format.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:format_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/importing/filters/#importing.filters.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/importing/filters/#importing.filters.Station-attributes","title":"Attributes","text":""},{"location":"reference/importing/filters/#importing.filters.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/importing/filters/#importing.filters.Station-functions","title":"Functions","text":""},{"location":"reference/importing/filters/#importing.filters.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/importing/filters/#importing.filters.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/importing/filters/#importing.filters.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/importing/functions/","title":"functions","text":""},{"location":"reference/importing/functions/#importing.functions","title":"<code>importing.functions</code>","text":""},{"location":"reference/importing/functions/#importing.functions-attributes","title":"Attributes","text":""},{"location":"reference/importing/functions/#importing.functions.one_second","title":"<code>one_second = np.timedelta64(1, 's')</code>  <code>module-attribute</code>","text":""},{"location":"reference/importing/functions/#importing.functions.unix_epoch","title":"<code>unix_epoch = np.datetime64(0, 's')</code>  <code>module-attribute</code>","text":""},{"location":"reference/importing/functions/#importing.functions-classes","title":"Classes","text":""},{"location":"reference/importing/functions/#importing.functions.Classification","title":"<code>Classification</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Contains instructions on how to classify the data into a specific variable.</p> <p>In particular, it links a format to a variable, and provides the column indices for the value, maximum, and minimum columns, as well as the validator columns. It also contains information on whether the data is accumulated, incremental, and the resolution of the data.</p> <p>Attributes:</p> Name Type Description <code>cls_id</code> <code>AutoField</code> <p>Primary key.</p> <code>format</code> <code>ForeignKey</code> <p>The format of the data file.</p> <code>variable</code> <code>ForeignKey</code> <p>The variable to which the data belongs.</p> <code>value</code> <code>PositiveSmallIntegerField</code> <p>Index of the value column, starting in 0.</p> <code>maximum</code> <code>PositiveSmallIntegerField</code> <p>Index of the maximum value column, starting in 0.</p> <code>minimum</code> <code>PositiveSmallIntegerField</code> <p>Index of the minimum value column, starting in 0.</p> <code>value_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the value validator column, starting in 0.</p> <code>value_validator_text</code> <code>CharField</code> <p>Value validator text.</p> <code>maximum_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the maximum value validator column, starting in 0.</p> <code>maximum_validator_text</code> <code>CharField</code> <p>Maximum value validator text.</p> <code>minimum_validator_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the minimum value validator column, starting in 0.</p> <code>minimum_validator_text</code> <code>CharField</code> <p>Minimum value validator text.</p> <code>accumulate</code> <code>PositiveSmallIntegerField</code> <p>If set to a number of minutes, the data will be accumulated over that period.</p> <code>resolution</code> <code>DecimalField</code> <p>Resolution of the data. Only used if it is to be accumulated.</p> <code>incremental</code> <code>BooleanField</code> <p>Whether the data is an incremental counter. If it is, any value below the previous one will be removed.</p> <code>decimal_comma</code> <code>BooleanField</code> <p>Whether the data uses a comma as a decimal separator.</p>"},{"location":"reference/importing/functions/#importing.functions.Classification-functions","title":"Functions","text":""},{"location":"reference/importing/functions/#importing.functions.Classification.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.cls_id)\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.Classification.clean","title":"<code>clean()</code>","text":"<p>Validate the model instance.</p> <p>It checks that the column indices are different, and that the accumulation period is greater than zero if it is set. It also checks that the resolution is set if the data is accumulated.</p> Source code in <code>formatting/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model instance.\n\n    It checks that the column indices are different, and that the accumulation\n    period is greater than zero if it is set. It also checks that the resolution is\n    set if the data is accumulated.\n    \"\"\"\n    if self.accumulate and self.resolution is None:\n        raise ValidationError(\n            {\n                \"resolution\": \"The resolution must be set if the data is \"\n                \"accumulated.\"\n            }\n        )\n\n    col_names = [\n        \"value\",\n        \"maximum\",\n        \"minimum\",\n        \"value_validator_column\",\n        \"maximum_validator_column\",\n        \"minimum_validator_column\",\n    ]\n    unique = defaultdict(list)\n    for name in col_names:\n        if getattr(self, name) is not None:\n            unique[getattr(self, name)].append(name)\n    for _, names in unique.items():\n        if len(names) != 1:\n            msg = \"The columns must be different.\"\n            raise ValidationError({field: msg for field in names})\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.Classification.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:classification_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.DataImport","title":"<code>DataImport</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Model to store the data imports.</p> <p>This model stores the data imports, which are files with data that are uploaded to the system. The data is then processed asynchronously and stored in the database.</p> <p>Attributes:</p> Name Type Description <code>station</code> <code>ForeignKey</code> <p>Station to which the data belongs.</p> <code>format</code> <code>ForeignKey</code> <p>Format of the data.</p> <code>rawfile</code> <code>FileField</code> <p>File with the data to be imported.</p> <code>date</code> <code>DateTimeField</code> <p>Date of submission of the data.</p> <code>start_date</code> <code>DateTimeField</code> <p>Start date of the data.</p> <code>end_date</code> <code>DateTimeField</code> <p>End date of the data.</p> <code>records</code> <code>IntegerField</code> <p>Number of records in the data.</p> <code>observations</code> <code>TextField</code> <p>Notes or observations about the data.</p> <code>status</code> <code>TextField</code> <p>Status of the import.</p> <code>log</code> <code>TextField</code> <p>Log of the data ingestion, indicating any errors.</p> <code>reprocess</code> <code>BooleanField</code> <p>If checked, the data will be reprocessed.</p>"},{"location":"reference/importing/functions/#importing.functions.DataImport-functions","title":"Functions","text":""},{"location":"reference/importing/functions/#importing.functions.DataImport.clean","title":"<code>clean()</code>","text":"<p>Validate information and uploads the measurement data.</p> Source code in <code>importing/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate information and uploads the measurement data.\"\"\"\n    tz = self.station.timezone\n    if not tz:\n        raise ValidationError(\"Station must have a timezone set.\")\n\n    # If the file has changed, we reprocess the data\n    if self.pk and self.rawfile != self.__class__.objects.get(pk=self.pk).rawfile:\n        self.reprocess = True\n\n    if self.reprocess:\n        self.status = \"N\"\n        self.reprocess = False\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.Format","title":"<code>Format</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Details of the data file format, describing how to read the file.</p> <p>It combines several properties, such as the file extension, the delimiter, the date and time formats, and the column indices for the date and time columns, instructing how to read the data file and parse the dates. It is mostly used to ingest data from text files, like CSV.</p> <p>Attributes:</p> Name Type Description <code>format_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Short name of the format entry.</p> <code>description</code> <code>TextField</code> <p>Description of the format.</p> <code>extension</code> <code>ForeignKey</code> <p>The extension of the data file.</p> <code>delimiter</code> <code>ForeignKey</code> <p>The delimiter between columns in the data file. Only required for text files.</p> <code>first_row</code> <code>PositiveSmallIntegerField</code> <p>Index of the first row with data, starting in 0.</p> <code>footer_rows</code> <code>PositiveSmallIntegerField</code> <p>Number of footer rows to be ignored at the end.</p> <code>date</code> <code>ForeignKey</code> <p>Format for the date column. Only required for text files.</p> <code>date_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the date column, starting in 0.</p> <code>time</code> <code>ForeignKey</code> <p>Format for the time column. Only required for text files.</p> <code>time_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the time column, starting in 0.</p>"},{"location":"reference/importing/functions/#importing.functions.Format-attributes","title":"Attributes","text":""},{"location":"reference/importing/functions/#importing.functions.Format.datetime_format","title":"<code>datetime_format: str</code>  <code>property</code>","text":"<p>Obtain the datetime format string.</p>"},{"location":"reference/importing/functions/#importing.functions.Format-functions","title":"Functions","text":""},{"location":"reference/importing/functions/#importing.functions.Format.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.Format.datetime_columns","title":"<code>datetime_columns(delimiter)</code>","text":"<p>Column indices that correspond to the date and time columns in the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>delimiter</code> <code>str</code> <p>The delimiter used to split the date and time codes.</p> required <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: A list of column indices.</p> Source code in <code>formatting/models.py</code> <pre><code>def datetime_columns(self, delimiter: str) -&gt; list[int]:\n    \"\"\"Column indices that correspond to the date and time columns in the dataset.\n\n    Args:\n        delimiter (str): The delimiter used to split the date and time codes.\n\n    Returns:\n        list[int]: A list of column indices.\n    \"\"\"\n    date_items = self.date.code.split(delimiter)\n    date_cols = list(range(self.date_column, self.date_column + len(date_items)))\n    time_items = self.time.code.split(delimiter)\n    time_cols = list(range(self.time_column, self.time_column + len(time_items)))\n    return date_cols + time_cols\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.Format.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:format_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.Measurement","title":"<code>Measurement</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Class to store the measurements and their validation status.</p> <p>This class holds the value of a given variable and station at a specific time, as well as auxiliary information such as maximum and minimum values, depth and direction, for vector quantities. All of these have a <code>raw</code> version where a backup of the original data is kept, should this change at any point.</p> <p>Flags to monitor its validation status, if the data is active (and therefore can be used for reporting) and if it has actually been used for that is also included.</p> <p>Attributes:</p> Name Type Description <code>depth</code> <code>int</code> <p>Depth of the measurement.</p> <code>direction</code> <code>Decimal</code> <p>Direction of the measurement, useful for vector quantities.</p> <code>raw_value</code> <code>Decimal</code> <p>Original value of the measurement.</p> <code>raw_maximum</code> <code>Decimal</code> <p>Original maximum value of the measurement.</p> <code>raw_minimum</code> <code>Decimal</code> <p>Original minimum value of the measurement.</p> <code>raw_direction</code> <code>Decimal</code> <p>Original direction of the measurement.</p> <code>raw_depth</code> <code>int</code> <p>Original depth of the measurement.</p> <code>is_validated</code> <code>bool</code> <p>Flag to indicate if the measurement has been validated.</p> <code>is_active</code> <code>bool</code> <p>Flag to indicate if the measurement is active. An inactive measurement is not used for reporting</p>"},{"location":"reference/importing/functions/#importing.functions.Measurement-attributes","title":"Attributes","text":""},{"location":"reference/importing/functions/#importing.functions.Measurement.overwritten","title":"<code>overwritten: bool</code>  <code>property</code>","text":"<p>Indicates if any of the values associated to the entry have been overwritten.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if any raw field is different to the corresponding standard field.</p>"},{"location":"reference/importing/functions/#importing.functions.Measurement.raws","title":"<code>raws: tuple[str, ...]</code>  <code>property</code>","text":"<p>Return the raw fields of the measurement.</p> <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>tuple[str]: Tuple with the names of the raw fields of the measurement.</p>"},{"location":"reference/importing/functions/#importing.functions.Measurement-functions","title":"Functions","text":""},{"location":"reference/importing/functions/#importing.functions.Measurement.clean","title":"<code>clean()</code>","text":"<p>Check consistency of validation, reporting and backs-up values.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Check consistency of validation, reporting and backs-up values.\"\"\"\n    # Check consistency of validation\n    if not self.is_validated and not self.is_active:\n        raise ValidationError(\"Only validated entries can be declared as inactive.\")\n\n    # Backup values to raws, if needed\n    for r in self.raws:\n        value = getattr(self, r.removeprefix(\"raw_\"))\n        if value and not getattr(self, r):\n            setattr(self, r, value)\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.Report","title":"<code>Report</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Holds the different reporting data.</p> <p>It also keeps track of which data has already been used when creating the reports.</p> <p>Attributes:</p> Name Type Description <code>report_type</code> <code>str</code> <p>Type of report. It can be hourly, daily or monthly.</p> <code>completeness</code> <code>Decimal</code> <p>Completeness of the report. Eg. a daily report with 24 hourly measurements would have a completeness of 100%.</p>"},{"location":"reference/importing/functions/#importing.functions.Report-functions","title":"Functions","text":""},{"location":"reference/importing/functions/#importing.functions.Report.clean","title":"<code>clean()</code>","text":"<p>Validate that the report type and use of the data is consistent.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate that the report type and use of the data is consistent.\"\"\"\n    if self.report_type == ReportType.HOURLY:\n        self.time = self.time.replace(minute=0, second=0, microsecond=0)\n    elif self.report_type == ReportType.DAILY:\n        self.time = self.time.replace(hour=0, minute=0, second=0, microsecond=0)\n    elif self.report_type == ReportType.MONTLY:\n        self.time = self.time.replace(\n            day=1, hour=0, minute=0, second=0, microsecond=0\n        )\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/importing/functions/#importing.functions.Station-attributes","title":"Attributes","text":""},{"location":"reference/importing/functions/#importing.functions.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/importing/functions/#importing.functions.Station-functions","title":"Functions","text":""},{"location":"reference/importing/functions/#importing.functions.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions-functions","title":"Functions","text":""},{"location":"reference/importing/functions/#importing.functions.construct_matrix","title":"<code>construct_matrix(matrix_source, file_format, station, data_import)</code>","text":"<p>Construct the \"matrix\" or results table. Does various cleaning / simple transformations depending on the date format, type of data (accumulated, incremental...) and deals with NANs.</p> <p>Parameters:</p> Name Type Description Default <code>matrix_source</code> <code>FileField</code> <p>raw data file path</p> required <code>file_format</code> <code>Format</code> <p>a formatting.Format object.</p> required <p>Returns: Dict of dataframes for results (one for each variable type in the raw data     file). TODO: Probably refactor into smaller chunks.</p> Source code in <code>importing/functions.py</code> <pre><code>def construct_matrix(\n    matrix_source: FileField,\n    file_format: Format,\n    station: Station,\n    data_import: DataImport,\n) -&gt; list[pd.DataFrame]:\n    \"\"\"Construct the \"matrix\" or results table. Does various cleaning / simple\n    transformations depending on the date format, type of data (accumulated,\n    incremental...) and deals with NANs.\n\n    Args:\n        matrix_source: raw data file path\n        file_format: a formatting.Format object.\n    Returns: Dict of dataframes for results (one for each variable type in the raw data\n        file).\n    TODO: Probably refactor into smaller chunks.\n    \"\"\"\n    # Get the \"preformatted matrix\" sorted by date col\n    matrix = read_data_to_import(matrix_source, file_format, station.timezone)\n    # Find start and end dates from top and bottom row\n    start_date = matrix[\"date\"].iloc[0]\n    end_date = matrix[\"date\"].iloc[-1]\n\n    classifications = list(Classification.objects.filter(format=file_format))\n\n    if len(classifications) == 0:\n        msg = \"No classifications found for this format. Please add some.\"\n        raise ValueError(msg)\n\n    max_cols = max([c.value for c in classifications])\n    ncols = len(matrix.columns)\n    if max_cols &gt;= ncols:\n        msg = (\n            f\"The number of columns in the file {ncols} is less than the maximum column\"\n            f\" number specified in the classifications {max_cols}. Please check the \"\n            \"file and the classifications for this format.\"\n        )\n        raise ValueError(msg)\n\n    to_ingest = []\n    for classification in classifications:\n        columns = []\n        columns.append((\"date\", \"date\"))\n\n        # Validation of values\n        columns.append((classification.value, \"value\"))\n        if classification.value_validator_column:\n            matrix.loc[\n                matrix[classification.value_validator_column]\n                != classification.value_validator_text,\n                classification.value,\n            ] = np.nan\n\n        # Validation of maximum\n        if classification.maximum:\n            columns.append((classification.maximum, \"maximum\"))\n            if classification.maximum_validator_column:\n                matrix.loc[\n                    matrix[classification.maximum_validator_column]\n                    != classification.maximum_validator_text,\n                    classification.maximum,\n                ] = np.nan\n\n        # Validation of minimum\n        if classification.minimum:\n            columns.append((classification.minimum, \"minimum\"))\n            if classification.minimum_validator_column:\n                matrix.loc[\n                    matrix[classification.minimum_validator_column]\n                    != classification.minimum_validator_text,\n                    classification.minimum,\n                ] = np.nan\n\n        data = matrix.loc[:, [v[0] for v in columns]].rename(columns=dict(columns))\n\n        # More data cleaning, column by column, deal with decimal comma vs point.\n        for col in data:\n            if col == \"date\":\n                continue\n            if classification.decimal_comma:\n                data[col] = pd.Series(\n                    [standardise_float_comma(val) for val in data[col].values],\n                    index=matrix.index,\n                )\n            else:\n                data[col] = pd.Series(\n                    [standardise_float(val) for val in data[col].values],\n                    index=matrix.index,\n                )\n\n        # Eliminate NAs\n        data_columns = [column[1] for column in columns if column[1] != \"date\"]\n        data = data.dropna(axis=0, how=\"all\", subset=data_columns)\n        if len(data) == 0:\n            raise ValueError(\n                f\"Importing variable {classification.variable.name} from \"\n                f\"column {classification.value} (starting in 0) results in no valid \"\n                \"data.\"\n            )\n\n        # Deal with cumulative and incremental data\n        if acc := classification.accumulate:\n            # assumes that if incremental it only works with VALUE\n            # (MAXIMUM and MINIMUM are excluded)\n            if classification.incremental:\n                data[\"value\"] = data[\"value\"].diff()\n                data.loc[data[\"value\"] &lt; 0, \"value\"] = np.nan\n                data = data.dropna()\n            data[\"date\"] = data[\"date\"].apply(\n                lambda x: x.replace(\n                    minute=int(x.minute / acc) * acc,\n                    second=0,\n                    microsecond=0,\n                    nanosecond=0,\n                )\n            )\n            data[\"date\"] = data[\"date\"] + pd.Timedelta(minutes=acc)\n            count = data.groupby(\"date\")[\"value\"].sum().to_frame()\n            data = count[\"value\"] * float(classification.resolution)\n\n            start_date = start_date.replace(\n                minute=int(start_date.minute / acc) * acc,\n                second=0,\n                microsecond=0,\n                nanosecond=0,\n            ) + pd.Timedelta(minutes=acc)\n            end_date = end_date.replace(\n                minute=int(end_date.minute / acc) * acc,\n                second=0,\n                microsecond=0,\n                nanosecond=0,\n            ) + pd.Timedelta(minutes=acc)\n            table = pd.date_range(\n                start_date, end_date, freq=f\"{acc}min\", name=\"date\"\n            ).to_frame()\n            data = pd.concat([table, data], axis=1)\n            data = data.fillna(0)\n\n        # Deal with non cumulative but incremental data\n        else:\n            if classification.incremental:\n                data[\"value\"] = data[\"value\"].diff()\n                data.loc[data[\"value\"] &lt; 0, \"value\"] = np.nan\n                data = data.dropna()\n            if classification.resolution:\n                data[\"value\"] = data[\"value\"] * float(classification.resolution)\n\n        data[\"station_id\"] = station.station_id\n        data[\"variable_id\"] = classification.variable.variable_id\n        data[\"data_import_id\"] = data_import.data_import_id\n\n        # Add the data to the main list\n        to_ingest.append(data)\n\n    return to_ingest\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.get_last_uploaded_date","title":"<code>get_last_uploaded_date(station_id, var_code)</code>","text":"<p>Get the last date of uploaded data for a given station ID and variable code.</p> <p>Parameters:</p> Name Type Description Default <code>station_id</code> <code>int</code> <p>The station ID.</p> required <code>var_code</code> <code>str</code> <p>The variable code.</p> required <p>Returns:</p> Type Description <code>datetime | None</code> <p>The last date that data was uploaded for the given station ID and variable code</p> <code>datetime | None</code> <p>or None if no data was found.</p> Source code in <code>importing/functions.py</code> <pre><code>def get_last_uploaded_date(station_id: int, var_code: str) -&gt; datetime | None:\n    \"\"\"Get the last date of uploaded data for a given station ID and variable code.\n\n    Args:\n        station_id: The station ID.\n        var_code: The variable code.\n\n    Returns:\n        The last date that data was uploaded for the given station ID and variable code\n        or None if no data was found.\n    \"\"\"\n    query = (\n        Measurement.timescale.filter(\n            station__station_id=station_id, variable__variable_code=var_code\n        )\n        .order_by(\"time\")\n        .last()\n    )\n    if query:\n        return query.time\n\n    return None\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.process_datetime_columns","title":"<code>process_datetime_columns(data, file_format, timezone)</code>","text":"<p>Process the datetime columns in a DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The DataFrame to process.</p> required <code>file_format</code> <code>Format</code> <p>The file format.</p> required <code>timezone</code> <code>str</code> <p>The timezone to use.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The DataFrame with the datetime columns processed.</p> Source code in <code>importing/functions.py</code> <pre><code>def process_datetime_columns(\n    data: pd.DataFrame, file_format: Format, timezone: str\n) -&gt; pd.DataFrame:\n    \"\"\"Process the datetime columns in a DataFrame.\n\n    Args:\n        data: The DataFrame to process.\n        file_format: The file format.\n        timezone: The timezone to use.\n\n    Returns:\n        The DataFrame with the datetime columns processed.\n    \"\"\"\n    tz = zoneinfo.ZoneInfo(timezone)\n    dt_format = file_format.datetime_format\n    if file_format.date_column == file_format.time_column:\n        data[\"date\"] = pd.Series(\n            [\n                standardise_datetime(row, dt_format).replace(tzinfo=tz)\n                for row in data.iloc[:, file_format.date_column].values\n            ],\n            index=data.index,\n        )\n    else:\n        cols = file_format.datetime_columns(file_format.delimiter.character)\n        data[\"datetime_str\"] = data.iloc[:, cols].agg(\n            lambda row: \" \".join([str(r) for r in row]), axis=1\n        )\n        data[\"date\"] = data[\"datetime_str\"].apply(\n            lambda row: standardise_datetime(row, dt_format).replace(tzinfo=tz)\n        )\n        data.drop(columns=[\"datetime_str\"], inplace=True)\n\n    return data.sort_values(\"date\").reset_index(drop=True)\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.read_data_to_import","title":"<code>read_data_to_import(source_file, file_format, timezone)</code>","text":"<p>Reads the data from file into a pandas DataFrame.</p> <p>Works out what sort of file is being read and adds standardised columns for datetime.</p> <p>Parameters:</p> Name Type Description Default <code>source_file</code> <code>Any</code> <p>Stream of data to be parsed.</p> required <code>file_format</code> <code>Format</code> <p>Format of the data to be parsed.</p> required <code>timezone</code> <code>str</code> <p>Timezone name, eg. 'America/Chicago'.</p> required <p>Returns:</p> Type Description <p>Pandas.DataFrame with raw data read and extra column(s) for datetime</p> <p>correctly parsed.</p> Source code in <code>importing/functions.py</code> <pre><code>def read_data_to_import(source_file: Any, file_format: Format, timezone: str):\n    \"\"\"Reads the data from file into a pandas DataFrame.\n\n    Works out what sort of file is being read and adds standardised columns for\n    datetime.\n\n    Args:\n        source_file: Stream of data to be parsed.\n        file_format: Format of the data to be parsed.\n        timezone: Timezone name, eg. 'America/Chicago'.\n\n    Returns:\n        Pandas.DataFrame with raw data read and extra column(s) for datetime\n        correctly parsed.\n    \"\"\"\n    if file_format.extension.value in [\"xlsx\", \"xlx\"]:\n        data = read_file_excel(source_file, file_format)\n    else:\n        data = read_file_csv(source_file, file_format)\n\n    return process_datetime_columns(data, file_format, timezone)\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.read_file_csv","title":"<code>read_file_csv(source_file, file_format)</code>","text":"<p>Reads a CSV file into a pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>source_file</code> <code>Any</code> <p>Stream of data to be parsed.</p> required <code>file_format</code> <code>Format</code> <p>The file format.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame containing the data from the file.</p> Source code in <code>importing/functions.py</code> <pre><code>def read_file_csv(source_file: Any, file_format: Format) -&gt; pd.DataFrame:\n    \"\"\"Reads a CSV file into a pandas DataFrame.\n\n    Args:\n        source_file: Stream of data to be parsed.\n        file_format: The file format.\n\n    Returns:\n        A pandas DataFrame containing the data from the file.\n    \"\"\"\n    firstline = file_format.first_row if file_format.first_row else 0\n    skipfooter = file_format.footer_rows if file_format.footer_rows else 0\n    delimiter = file_format.delimiter.character\n\n    skiprows: int | list[int] = firstline\n    if not isinstance(source_file, str | Path):\n        # The file was uploaded as binary\n        lines = len(source_file.readlines())\n        source_file.seek(0)\n        skiprows = [i for i in range(0, firstline)] + [\n            i - 1 for i in range(lines, lines - skipfooter, -1)\n        ]\n        skipfooter = 0\n\n    # Deal with the delimiter\n    if \"\\\\x\" in delimiter:\n        delim_hexcode = delimiter.replace(\"\\\\x\", \"\")\n        delim_intcode = eval(\"0x\" + delim_hexcode)\n        delimiter = chr(delim_intcode)\n    elif delimiter == \" \":\n        delimiter = \"\\s+\"  # This is a regex for whitespace\n\n    return pd.read_csv(\n        source_file,\n        sep=delimiter,\n        header=None,\n        index_col=False,\n        skiprows=skiprows,\n        skipfooter=skipfooter,\n        encoding=\"ISO-8859-1\",\n    )\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.read_file_excel","title":"<code>read_file_excel(file_path, file_format)</code>","text":"<p>Reads an Excel file into a pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the file to be read.</p> required <code>file_format</code> <code>Format</code> <p>The file format.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame containing the data from the file.</p> Source code in <code>importing/functions.py</code> <pre><code>def read_file_excel(file_path: str, file_format: Format) -&gt; pd.DataFrame:\n    \"\"\"Reads an Excel file into a pandas DataFrame.\n\n    Args:\n        file_path: The path to the file to be read.\n        file_format: The file format.\n\n    Returns:\n        A pandas DataFrame containing the data from the file.\n    \"\"\"\n    firstline = file_format.first_row if file_format.first_row else 0\n    skipfooter = file_format.footer_rows if file_format.footer_rows else 0\n    return pd.read_excel(\n        file_path,\n        header=None,\n        skiprows=firstline - 1,\n        skipfooter=skipfooter,\n        engine=None,\n        error_bad_lines=False,\n        index_col=None,\n    )\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.save_temp_data_to_permanent","title":"<code>save_temp_data_to_permanent(data_import)</code>","text":"<p>Function to pass the temporary import to the final table.</p> <p>Uses the data_import_temp object only to get all required information from its fields.</p> <p>This function carries out the following steps:</p> <ul> <li>Bulk delete of existing data between two times on a given measurement table for the station in question.</li> <li>Bulk create to add the new data from the uploaded file.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>data_import_temp</code> <p>DataImportTemp object.</p> required Source code in <code>importing/functions.py</code> <pre><code>def save_temp_data_to_permanent(\n    data_import: DataImport,\n) -&gt; tuple[datetime, datetime, int]:\n    \"\"\"Function to pass the temporary import to the final table.\n\n    Uses the data_import_temp object only to get all required information from its\n    fields.\n\n    This function carries out the following steps:\n\n    - Bulk delete of existing data between two times on a given measurement table for\n    the station in question.\n    - Bulk create to add the new data from the uploaded file.\n\n    Args:\n        data_import_temp: DataImportTemp object.\n    \"\"\"\n    station = data_import.station\n    file_format = data_import.format\n    file = data_import.rawfile\n\n    # Delete exiting measurements and reports for the same data_import_id\n    Measurement.objects.filter(data_import_id=data_import.data_import_id).delete()\n    Report.objects.filter(data_import_id=data_import.data_import_id).delete()\n\n    all_data = construct_matrix(file, file_format, station, data_import)\n    if not all_data:\n        msg = \"No data to import. Is the chosen format correct?\"\n        raise ValueError(msg)\n\n    must_cols = [\"data_import_id\", \"station_id\", \"variable_id\", \"date\", \"value\"]\n    start_date = all_data[0][\"date\"].iloc[0]\n    end_date = all_data[0][\"date\"].iloc[-1]\n    num_records = len(all_data[0])\n    for table in all_data:\n        cols = [\n            c for c in table.columns if c in Measurement._meta.fields or c in must_cols\n        ]\n        table = (\n            table[cols]\n            .dropna(axis=0, subset=must_cols)\n            .rename(columns={\"date\": \"time\"})\n        )\n        records = table.to_dict(\"records\")\n        variable_id = table[\"variable_id\"].iloc[0]\n\n        # Delete existing data between the date ranges. Needed for data not linked\n        # to a data_import_id. Both measurements and reports are deleted.\n        Measurement.timescale.filter(\n            time__range=[start_date, end_date],\n            station_id=station.station_id,\n            variable_id=variable_id,\n        ).delete()\n        Report.objects.filter(\n            time__range=[start_date, end_date],\n            station_id=station.station_id,\n            variable_id=variable_id,\n        ).delete()\n\n        # Bulk add new data\n        def create_and_clean(**record):\n            instance = Measurement(**record)\n            instance.clean()\n            return instance\n\n        model_instances = [create_and_clean(**record) for record in records]\n\n        # WARNING: This is a bulk insert, so it will not call the save()\n        # method nor send the pre_save or post_save signals for each instance.\n        Measurement.objects.bulk_create(model_instances)\n\n    return start_date, end_date, num_records\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.standardise_datetime","title":"<code>standardise_datetime(date_time, datetime_format)</code>","text":"<p>Returns a datetime object in the case that date_time is not already in that form.</p> <p>Parameters:</p> Name Type Description Default <code>date_time</code> <code>Any</code> <p>The date_time to be transformed.</p> required <code>datetime_format</code> <code>str</code> <p>The format that date_time is in (to be passed to datetime.strptime()).</p> required <p>Returns:</p> Type Description <code>datetime</code> <p>A datetime object or None if date_time is not in a recognised format.</p> Source code in <code>importing/functions.py</code> <pre><code>def standardise_datetime(date_time: Any, datetime_format: str) -&gt; datetime:\n    \"\"\"Returns a datetime object in the case that date_time is not already in that form.\n\n    Args:\n        date_time: The date_time to be transformed.\n        datetime_format: The format that date_time is in (to be passed to\n            datetime.strptime()).\n\n    Returns:\n        A datetime object or None if date_time is not in a recognised format.\n    \"\"\"\n    if isinstance(date_time, datetime):\n        return date_time\n    elif isinstance(date_time, np.datetime64):\n        date_time = datetime.fromtimestamp(\n            float((date_time - unix_epoch) / one_second), tz=zoneinfo.ZoneInfo(\"UTC\")\n        )\n        return date_time\n    elif isinstance(date_time, str):\n        pass\n    elif isinstance(date_time, list):\n        date_time = \" \".join(date_time)\n    elif isinstance(date_time, pd.Series):\n        date_time = \" \".join([str(val) for val in list(date_time[:])])\n    else:\n        date_time = \"\"\n\n    # Now try converting the resulting string into a datetime obj\n    try:\n        _date_time = datetime.strptime(date_time, datetime_format)\n    except Exception as e:\n        raise ValueError(f\"Error parsing date: {date_time} - {e}\")\n    return _date_time\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.standardise_float","title":"<code>standardise_float(val_str)</code>","text":"<p>Removes commas from strings for numbers that use a period as a decimal separator.</p> <p>Args: val_str: string or Number-like Returns: val_num: float or None</p> Source code in <code>importing/functions.py</code> <pre><code>def standardise_float(val_str):\n    \"\"\"Removes commas from strings for numbers that use a period as a decimal separator.\n\n    Args: val_str: string or Number-like\n    Returns: val_num: float or None\n    \"\"\"\n    if isinstance(val_str, Number):\n        return float(val_str)\n    try:\n        val_str = val_str.replace(\",\", \"\")\n        val_num = float(val_str)\n    except ValueError:\n        val_num = None\n    return val_num\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.standardise_float_comma","title":"<code>standardise_float_comma(val_str)</code>","text":"<p>For strings representing numbers that use a comma as a decimal separator: (i) Removes full stops (ii) Replaces commas for full stops Args: val_str: string or Number-like Returns: val_num: float or None</p> Source code in <code>importing/functions.py</code> <pre><code>def standardise_float_comma(val_str):\n    \"\"\"For strings representing numbers that use a comma as a decimal separator:\n    (i) Removes full stops\n    (ii) Replaces commas for full stops\n    Args: val_str: string or Number-like\n    Returns: val_num: float or None\n    \"\"\"\n    if isinstance(val_str, Number):\n        return float(val_str)\n    try:\n        val_str = val_str.replace(\".\", \"\")\n        val_str = val_str.replace(\",\", \".\")\n        val_num = float(val_str)\n    except ValueError:\n        val_num = None\n    return val_num\n</code></pre>"},{"location":"reference/importing/functions/#importing.functions.validate_dates","title":"<code>validate_dates(data_import)</code>","text":"<p>Verify if there already exists data for the dates of the data being imported.</p> <p>Parameters:</p> Name Type Description Default <code>data_import</code> <p>DataImportFull or DataImportTemp object.</p> required <p>Returns:</p> Type Description <p>tuple of: result: (list of dicts): one per classification for this file format of summary:     dict containing information on the variable, the end date and whether     the data exists. overwrite: (bool) True if any of the data already exists.</p> Source code in <code>importing/functions.py</code> <pre><code>def validate_dates(data_import):\n    \"\"\"Verify if there already exists data for the dates of the data being imported.\n\n    Args:\n        data_import: DataImportFull or DataImportTemp object.\n\n    Returns:\n        tuple of:\n            result: (list of dicts): one per classification for this file format of\n            summary:\n                dict containing information on the variable, the end date and whether\n                the data exists.\n            overwrite: (bool) True if any of the data already exists.\n    \"\"\"\n    start_date = data_import.start_date\n    end_date = data_import.end_date\n    file_format = data_import.format_id\n    station = data_import.station\n    classifications = list(Classification.objects.filter(format=file_format))\n\n    overwrite = False\n    result = []\n    for classification in classifications:\n        # variable_code is used to select the measurmenet class\n        var_code = str(classification.variable.variable_code)\n        last_upload_date = get_last_uploaded_date(station.station_id, var_code)\n\n        # Check if data exists between dates)\n        query = Measurement.timescale.filter(\n            time__range=[start_date, end_date],\n            station_id=station.station_id,\n            variable_id=classification.variable.variable_id,\n        )\n        exists = True if query else False\n        overwrite = overwrite or exists\n        summary = {\n            \"variable_id\": classification.variable.variable_id,\n            \"variable_code\": classification.variable.variable_code,\n            \"variable_name\": classification.variable.name,\n            \"last_upload_date\": last_upload_date,\n            \"exists\": exists,\n        }\n        result.append(summary)\n    return result, overwrite\n</code></pre>"},{"location":"reference/importing/models/","title":"models","text":""},{"location":"reference/importing/models/#importing.models","title":"<code>importing.models</code>","text":""},{"location":"reference/importing/models/#importing.models-attributes","title":"Attributes","text":""},{"location":"reference/importing/models/#importing.models.User","title":"<code>User = get_user_model()</code>  <code>module-attribute</code>","text":""},{"location":"reference/importing/models/#importing.models-classes","title":"Classes","text":""},{"location":"reference/importing/models/#importing.models.DataImport","title":"<code>DataImport</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Model to store the data imports.</p> <p>This model stores the data imports, which are files with data that are uploaded to the system. The data is then processed asynchronously and stored in the database.</p> <p>Attributes:</p> Name Type Description <code>station</code> <code>ForeignKey</code> <p>Station to which the data belongs.</p> <code>format</code> <code>ForeignKey</code> <p>Format of the data.</p> <code>rawfile</code> <code>FileField</code> <p>File with the data to be imported.</p> <code>date</code> <code>DateTimeField</code> <p>Date of submission of the data.</p> <code>start_date</code> <code>DateTimeField</code> <p>Start date of the data.</p> <code>end_date</code> <code>DateTimeField</code> <p>End date of the data.</p> <code>records</code> <code>IntegerField</code> <p>Number of records in the data.</p> <code>observations</code> <code>TextField</code> <p>Notes or observations about the data.</p> <code>status</code> <code>TextField</code> <p>Status of the import.</p> <code>log</code> <code>TextField</code> <p>Log of the data ingestion, indicating any errors.</p> <code>reprocess</code> <code>BooleanField</code> <p>If checked, the data will be reprocessed.</p>"},{"location":"reference/importing/models/#importing.models.DataImport-functions","title":"Functions","text":""},{"location":"reference/importing/models/#importing.models.DataImport.clean","title":"<code>clean()</code>","text":"<p>Validate information and uploads the measurement data.</p> Source code in <code>importing/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate information and uploads the measurement data.\"\"\"\n    tz = self.station.timezone\n    if not tz:\n        raise ValidationError(\"Station must have a timezone set.\")\n\n    # If the file has changed, we reprocess the data\n    if self.pk and self.rawfile != self.__class__.objects.get(pk=self.pk).rawfile:\n        self.reprocess = True\n\n    if self.reprocess:\n        self.status = \"N\"\n        self.reprocess = False\n</code></pre>"},{"location":"reference/importing/models/#importing.models.Format","title":"<code>Format</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Details of the data file format, describing how to read the file.</p> <p>It combines several properties, such as the file extension, the delimiter, the date and time formats, and the column indices for the date and time columns, instructing how to read the data file and parse the dates. It is mostly used to ingest data from text files, like CSV.</p> <p>Attributes:</p> Name Type Description <code>format_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Short name of the format entry.</p> <code>description</code> <code>TextField</code> <p>Description of the format.</p> <code>extension</code> <code>ForeignKey</code> <p>The extension of the data file.</p> <code>delimiter</code> <code>ForeignKey</code> <p>The delimiter between columns in the data file. Only required for text files.</p> <code>first_row</code> <code>PositiveSmallIntegerField</code> <p>Index of the first row with data, starting in 0.</p> <code>footer_rows</code> <code>PositiveSmallIntegerField</code> <p>Number of footer rows to be ignored at the end.</p> <code>date</code> <code>ForeignKey</code> <p>Format for the date column. Only required for text files.</p> <code>date_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the date column, starting in 0.</p> <code>time</code> <code>ForeignKey</code> <p>Format for the time column. Only required for text files.</p> <code>time_column</code> <code>PositiveSmallIntegerField</code> <p>Index of the time column, starting in 0.</p>"},{"location":"reference/importing/models/#importing.models.Format-attributes","title":"Attributes","text":""},{"location":"reference/importing/models/#importing.models.Format.datetime_format","title":"<code>datetime_format: str</code>  <code>property</code>","text":"<p>Obtain the datetime format string.</p>"},{"location":"reference/importing/models/#importing.models.Format-functions","title":"Functions","text":""},{"location":"reference/importing/models/#importing.models.Format.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/importing/models/#importing.models.Format.datetime_columns","title":"<code>datetime_columns(delimiter)</code>","text":"<p>Column indices that correspond to the date and time columns in the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>delimiter</code> <code>str</code> <p>The delimiter used to split the date and time codes.</p> required <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: A list of column indices.</p> Source code in <code>formatting/models.py</code> <pre><code>def datetime_columns(self, delimiter: str) -&gt; list[int]:\n    \"\"\"Column indices that correspond to the date and time columns in the dataset.\n\n    Args:\n        delimiter (str): The delimiter used to split the date and time codes.\n\n    Returns:\n        list[int]: A list of column indices.\n    \"\"\"\n    date_items = self.date.code.split(delimiter)\n    date_cols = list(range(self.date_column, self.date_column + len(date_items)))\n    time_items = self.time.code.split(delimiter)\n    time_cols = list(range(self.time_column, self.time_column + len(time_items)))\n    return date_cols + time_cols\n</code></pre>"},{"location":"reference/importing/models/#importing.models.Format.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>formatting/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"formatting:format_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/importing/models/#importing.models.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/importing/models/#importing.models.Station-attributes","title":"Attributes","text":""},{"location":"reference/importing/models/#importing.models.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/importing/models/#importing.models.Station-functions","title":"Functions","text":""},{"location":"reference/importing/models/#importing.models.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/importing/models/#importing.models.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/importing/models/#importing.models.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/importing/tables/","title":"tables","text":""},{"location":"reference/importing/tables/#importing.tables","title":"<code>importing.tables</code>","text":""},{"location":"reference/importing/tables/#importing.tables-classes","title":"Classes","text":""},{"location":"reference/importing/tables/#importing.tables.DataImport","title":"<code>DataImport</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Model to store the data imports.</p> <p>This model stores the data imports, which are files with data that are uploaded to the system. The data is then processed asynchronously and stored in the database.</p> <p>Attributes:</p> Name Type Description <code>station</code> <code>ForeignKey</code> <p>Station to which the data belongs.</p> <code>format</code> <code>ForeignKey</code> <p>Format of the data.</p> <code>rawfile</code> <code>FileField</code> <p>File with the data to be imported.</p> <code>date</code> <code>DateTimeField</code> <p>Date of submission of the data.</p> <code>start_date</code> <code>DateTimeField</code> <p>Start date of the data.</p> <code>end_date</code> <code>DateTimeField</code> <p>End date of the data.</p> <code>records</code> <code>IntegerField</code> <p>Number of records in the data.</p> <code>observations</code> <code>TextField</code> <p>Notes or observations about the data.</p> <code>status</code> <code>TextField</code> <p>Status of the import.</p> <code>log</code> <code>TextField</code> <p>Log of the data ingestion, indicating any errors.</p> <code>reprocess</code> <code>BooleanField</code> <p>If checked, the data will be reprocessed.</p>"},{"location":"reference/importing/tables/#importing.tables.DataImport-functions","title":"Functions","text":""},{"location":"reference/importing/tables/#importing.tables.DataImport.clean","title":"<code>clean()</code>","text":"<p>Validate information and uploads the measurement data.</p> Source code in <code>importing/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate information and uploads the measurement data.\"\"\"\n    tz = self.station.timezone\n    if not tz:\n        raise ValidationError(\"Station must have a timezone set.\")\n\n    # If the file has changed, we reprocess the data\n    if self.pk and self.rawfile != self.__class__.objects.get(pk=self.pk).rawfile:\n        self.reprocess = True\n\n    if self.reprocess:\n        self.status = \"N\"\n        self.reprocess = False\n</code></pre>"},{"location":"reference/importing/tables/#importing.tables.DataImportTable","title":"<code>DataImportTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/importing/tasks/","title":"tasks","text":""},{"location":"reference/importing/tasks/#importing.tasks","title":"<code>importing.tasks</code>","text":""},{"location":"reference/importing/tasks/#importing.tasks-classes","title":"Classes","text":""},{"location":"reference/importing/tasks/#importing.tasks.DataImport","title":"<code>DataImport</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Model to store the data imports.</p> <p>This model stores the data imports, which are files with data that are uploaded to the system. The data is then processed asynchronously and stored in the database.</p> <p>Attributes:</p> Name Type Description <code>station</code> <code>ForeignKey</code> <p>Station to which the data belongs.</p> <code>format</code> <code>ForeignKey</code> <p>Format of the data.</p> <code>rawfile</code> <code>FileField</code> <p>File with the data to be imported.</p> <code>date</code> <code>DateTimeField</code> <p>Date of submission of the data.</p> <code>start_date</code> <code>DateTimeField</code> <p>Start date of the data.</p> <code>end_date</code> <code>DateTimeField</code> <p>End date of the data.</p> <code>records</code> <code>IntegerField</code> <p>Number of records in the data.</p> <code>observations</code> <code>TextField</code> <p>Notes or observations about the data.</p> <code>status</code> <code>TextField</code> <p>Status of the import.</p> <code>log</code> <code>TextField</code> <p>Log of the data ingestion, indicating any errors.</p> <code>reprocess</code> <code>BooleanField</code> <p>If checked, the data will be reprocessed.</p>"},{"location":"reference/importing/tasks/#importing.tasks.DataImport-functions","title":"Functions","text":""},{"location":"reference/importing/tasks/#importing.tasks.DataImport.clean","title":"<code>clean()</code>","text":"<p>Validate information and uploads the measurement data.</p> Source code in <code>importing/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate information and uploads the measurement data.\"\"\"\n    tz = self.station.timezone\n    if not tz:\n        raise ValidationError(\"Station must have a timezone set.\")\n\n    # If the file has changed, we reprocess the data\n    if self.pk and self.rawfile != self.__class__.objects.get(pk=self.pk).rawfile:\n        self.reprocess = True\n\n    if self.reprocess:\n        self.status = \"N\"\n        self.reprocess = False\n</code></pre>"},{"location":"reference/importing/tasks/#importing.tasks-functions","title":"Functions","text":""},{"location":"reference/importing/tasks/#importing.tasks.clear_cache","title":"<code>clear_cache()</code>","text":"<p>Clear the cache.</p> Source code in <code>importing/tasks.py</code> <pre><code>@task()\ndef clear_cache() -&gt; None:\n    \"\"\"Clear the cache.\"\"\"\n    from measurement.reporting import get_report_data_from_db\n\n    get_report_data_from_db.cache_clear()\n</code></pre>"},{"location":"reference/importing/tasks/#importing.tasks.ingest_data","title":"<code>ingest_data(data_import_pk)</code>","text":"<p>Initiate the ingestion of data into the DB.</p> <p>If the status of the data import is \"not queued\", the request is processed. The data loaded and saved to the database. The status is updated to completed or failed depending on the outcome.</p> Source code in <code>importing/tasks.py</code> <pre><code>@on_commit_task()\ndef ingest_data(data_import_pk: int) -&gt; None:\n    \"\"\"Initiate the ingestion of data into the DB.\n\n    If the status of the data import is \"not queued\", the request is processed. The data\n    loaded and saved to the database. The status is updated to completed or failed\n    depending on the outcome.\n    \"\"\"\n    data_import = DataImport.objects.get(pk=data_import_pk)\n    if data_import.status != \"N\":\n        return\n\n    data_import.status = \"Q\"\n    data_import.save()\n\n    try:\n        getLogger(\"huey\").info(\"Ingesting data for %s\", data_import)\n        data_import.start_date, data_import.end_date, data_import.records = (\n            save_temp_data_to_permanent(data_import)\n        )\n        update_variables_for_station(data_import.station.station_code)\n        data_import.status = \"C\"\n        data_import.log = \"Data ingestion completed successfully\"\n        getLogger(\"huey\").info(\"Data ingestion for %s completed\", data_import)\n    except Exception as e:\n        data_import.status = \"F\"\n        data_import.log = str(e)\n        getLogger(\"huey\").exception(\"Error ingesting data for %s\", data_import)\n    finally:\n        data_import.save()\n        clear_cache()\n</code></pre>"},{"location":"reference/importing/tasks/#importing.tasks.save_temp_data_to_permanent","title":"<code>save_temp_data_to_permanent(data_import)</code>","text":"<p>Function to pass the temporary import to the final table.</p> <p>Uses the data_import_temp object only to get all required information from its fields.</p> <p>This function carries out the following steps:</p> <ul> <li>Bulk delete of existing data between two times on a given measurement table for the station in question.</li> <li>Bulk create to add the new data from the uploaded file.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>data_import_temp</code> <p>DataImportTemp object.</p> required Source code in <code>importing/functions.py</code> <pre><code>def save_temp_data_to_permanent(\n    data_import: DataImport,\n) -&gt; tuple[datetime, datetime, int]:\n    \"\"\"Function to pass the temporary import to the final table.\n\n    Uses the data_import_temp object only to get all required information from its\n    fields.\n\n    This function carries out the following steps:\n\n    - Bulk delete of existing data between two times on a given measurement table for\n    the station in question.\n    - Bulk create to add the new data from the uploaded file.\n\n    Args:\n        data_import_temp: DataImportTemp object.\n    \"\"\"\n    station = data_import.station\n    file_format = data_import.format\n    file = data_import.rawfile\n\n    # Delete exiting measurements and reports for the same data_import_id\n    Measurement.objects.filter(data_import_id=data_import.data_import_id).delete()\n    Report.objects.filter(data_import_id=data_import.data_import_id).delete()\n\n    all_data = construct_matrix(file, file_format, station, data_import)\n    if not all_data:\n        msg = \"No data to import. Is the chosen format correct?\"\n        raise ValueError(msg)\n\n    must_cols = [\"data_import_id\", \"station_id\", \"variable_id\", \"date\", \"value\"]\n    start_date = all_data[0][\"date\"].iloc[0]\n    end_date = all_data[0][\"date\"].iloc[-1]\n    num_records = len(all_data[0])\n    for table in all_data:\n        cols = [\n            c for c in table.columns if c in Measurement._meta.fields or c in must_cols\n        ]\n        table = (\n            table[cols]\n            .dropna(axis=0, subset=must_cols)\n            .rename(columns={\"date\": \"time\"})\n        )\n        records = table.to_dict(\"records\")\n        variable_id = table[\"variable_id\"].iloc[0]\n\n        # Delete existing data between the date ranges. Needed for data not linked\n        # to a data_import_id. Both measurements and reports are deleted.\n        Measurement.timescale.filter(\n            time__range=[start_date, end_date],\n            station_id=station.station_id,\n            variable_id=variable_id,\n        ).delete()\n        Report.objects.filter(\n            time__range=[start_date, end_date],\n            station_id=station.station_id,\n            variable_id=variable_id,\n        ).delete()\n\n        # Bulk add new data\n        def create_and_clean(**record):\n            instance = Measurement(**record)\n            instance.clean()\n            return instance\n\n        model_instances = [create_and_clean(**record) for record in records]\n\n        # WARNING: This is a bulk insert, so it will not call the save()\n        # method nor send the pre_save or post_save signals for each instance.\n        Measurement.objects.bulk_create(model_instances)\n\n    return start_date, end_date, num_records\n</code></pre>"},{"location":"reference/importing/tasks/#importing.tasks.update_variables_for_station","title":"<code>update_variables_for_station(*station_codes)</code>","text":"<p>Update the variables for the given station codes.</p> <p>The variables are updated based on the measurements associated with the station. The variables are saved as a comma-separated string in the variables field of the station model.</p> <p>Parameters:</p> Name Type Description Default <code>station_codes</code> <code>tuple[str]</code> <p>Station codes for which to update the variables. If not provided, all station codes with measurements are considered.</p> <code>()</code> Source code in <code>station/functions.py</code> <pre><code>def update_variables_for_station(*station_codes) -&gt; None:\n    \"\"\"Update the variables for the given station codes.\n\n    The variables are updated based on the measurements associated with the station.\n    The variables are saved as a comma-separated string in the variables field of the\n    station model.\n\n    Args:\n        station_codes (tuple[str]): Station codes for which to update the variables.\n            If not provided, all station codes with measurements are considered.\n    \"\"\"\n\n    # We get the station codes from the Measurement model if not provided\n    # Only station codes with measurements are considered\n    station_codes = (\n        station_codes\n        or Measurement.objects.values_list(\n            \"station__station_code\", flat=True\n        ).distinct()\n    )\n\n    # Get the variables for each station and save them as a comma-separated string\n    for station_code in station_codes:\n        variables = (\n            Measurement.objects.filter(station__station_code=station_code)\n            .values_list(\"variable__variable_code\", flat=True)\n            .distinct()\n        )\n        if variables:\n            station = Station.objects.get(station_code=station_code)\n            station.variables = variables = \",\".join(variables)\n            station.full_clean()\n            station.save()\n</code></pre>"},{"location":"reference/importing/urls/","title":"urls","text":""},{"location":"reference/importing/urls/#importing.urls","title":"<code>importing.urls</code>","text":""},{"location":"reference/importing/urls/#importing.urls-attributes","title":"Attributes","text":""},{"location":"reference/importing/urls/#importing.urls.app_name","title":"<code>app_name = 'importing'</code>  <code>module-attribute</code>","text":""},{"location":"reference/importing/urls/#importing.urls.urlpatterns","title":"<code>urlpatterns = [path('', DataImportListView.as_view(), name='dataimport_list'), path('&lt;int:pk&gt;/', DataImportDetailView.as_view(), name='dataimport_detail'), path('edit/&lt;int:pk&gt;', DataImportEditView.as_view(), name='dataimport_edit'), path('create/', DataImportCreateView.as_view(), name='dataimport_create'), path('delete/&lt;int:pk&gt;', DataImportDeleteView.as_view(), name='dataimport_delete')]</code>  <code>module-attribute</code>","text":""},{"location":"reference/importing/urls/#importing.urls-classes","title":"Classes","text":""},{"location":"reference/importing/urls/#importing.urls.DataImportCreateView","title":"<code>DataImportCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a data import.</p>"},{"location":"reference/importing/urls/#importing.urls.DataImportDeleteView","title":"<code>DataImportDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a data import.</p>"},{"location":"reference/importing/urls/#importing.urls.DataImportDetailView","title":"<code>DataImportDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a data import.</p>"},{"location":"reference/importing/urls/#importing.urls.DataImportEditView","title":"<code>DataImportEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a data import.</p>"},{"location":"reference/importing/urls/#importing.urls.DataImportListView","title":"<code>DataImportListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list all data imports.</p>"},{"location":"reference/importing/views/","title":"views","text":""},{"location":"reference/importing/views/#importing.views","title":"<code>importing.views</code>","text":""},{"location":"reference/importing/views/#importing.views-classes","title":"Classes","text":""},{"location":"reference/importing/views/#importing.views.DataImport","title":"<code>DataImport</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Model to store the data imports.</p> <p>This model stores the data imports, which are files with data that are uploaded to the system. The data is then processed asynchronously and stored in the database.</p> <p>Attributes:</p> Name Type Description <code>station</code> <code>ForeignKey</code> <p>Station to which the data belongs.</p> <code>format</code> <code>ForeignKey</code> <p>Format of the data.</p> <code>rawfile</code> <code>FileField</code> <p>File with the data to be imported.</p> <code>date</code> <code>DateTimeField</code> <p>Date of submission of the data.</p> <code>start_date</code> <code>DateTimeField</code> <p>Start date of the data.</p> <code>end_date</code> <code>DateTimeField</code> <p>End date of the data.</p> <code>records</code> <code>IntegerField</code> <p>Number of records in the data.</p> <code>observations</code> <code>TextField</code> <p>Notes or observations about the data.</p> <code>status</code> <code>TextField</code> <p>Status of the import.</p> <code>log</code> <code>TextField</code> <p>Log of the data ingestion, indicating any errors.</p> <code>reprocess</code> <code>BooleanField</code> <p>If checked, the data will be reprocessed.</p>"},{"location":"reference/importing/views/#importing.views.DataImport-functions","title":"Functions","text":""},{"location":"reference/importing/views/#importing.views.DataImport.clean","title":"<code>clean()</code>","text":"<p>Validate information and uploads the measurement data.</p> Source code in <code>importing/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate information and uploads the measurement data.\"\"\"\n    tz = self.station.timezone\n    if not tz:\n        raise ValidationError(\"Station must have a timezone set.\")\n\n    # If the file has changed, we reprocess the data\n    if self.pk and self.rawfile != self.__class__.objects.get(pk=self.pk).rawfile:\n        self.reprocess = True\n\n    if self.reprocess:\n        self.status = \"N\"\n        self.reprocess = False\n</code></pre>"},{"location":"reference/importing/views/#importing.views.DataImportCreateView","title":"<code>DataImportCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a data import.</p>"},{"location":"reference/importing/views/#importing.views.DataImportDeleteView","title":"<code>DataImportDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a data import.</p>"},{"location":"reference/importing/views/#importing.views.DataImportDetailView","title":"<code>DataImportDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a data import.</p>"},{"location":"reference/importing/views/#importing.views.DataImportEditView","title":"<code>DataImportEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a data import.</p>"},{"location":"reference/importing/views/#importing.views.DataImportFilter","title":"<code>DataImportFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/importing/views/#importing.views.DataImportListView","title":"<code>DataImportListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list all data imports.</p>"},{"location":"reference/importing/views/#importing.views.DataImportTable","title":"<code>DataImportTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/importing/signals/","title":"signals","text":""},{"location":"reference/importing/signals/#importing.signals","title":"<code>importing.signals</code>","text":""},{"location":"reference/importing/signals/handlers/","title":"handlers","text":""},{"location":"reference/importing/signals/handlers/#importing.signals.handlers","title":"<code>importing.signals.handlers</code>","text":""},{"location":"reference/importing/signals/handlers/#importing.signals.handlers-attributes","title":"Attributes","text":""},{"location":"reference/importing/signals/handlers/#importing.signals.handlers.User","title":"<code>User = get_user_model()</code>  <code>module-attribute</code>","text":""},{"location":"reference/importing/signals/handlers/#importing.signals.handlers-classes","title":"Classes","text":""},{"location":"reference/importing/signals/handlers/#importing.signals.handlers.DataImport","title":"<code>DataImport</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Model to store the data imports.</p> <p>This model stores the data imports, which are files with data that are uploaded to the system. The data is then processed asynchronously and stored in the database.</p> <p>Attributes:</p> Name Type Description <code>station</code> <code>ForeignKey</code> <p>Station to which the data belongs.</p> <code>format</code> <code>ForeignKey</code> <p>Format of the data.</p> <code>rawfile</code> <code>FileField</code> <p>File with the data to be imported.</p> <code>date</code> <code>DateTimeField</code> <p>Date of submission of the data.</p> <code>start_date</code> <code>DateTimeField</code> <p>Start date of the data.</p> <code>end_date</code> <code>DateTimeField</code> <p>End date of the data.</p> <code>records</code> <code>IntegerField</code> <p>Number of records in the data.</p> <code>observations</code> <code>TextField</code> <p>Notes or observations about the data.</p> <code>status</code> <code>TextField</code> <p>Status of the import.</p> <code>log</code> <code>TextField</code> <p>Log of the data ingestion, indicating any errors.</p> <code>reprocess</code> <code>BooleanField</code> <p>If checked, the data will be reprocessed.</p>"},{"location":"reference/importing/signals/handlers/#importing.signals.handlers.DataImport-functions","title":"Functions","text":""},{"location":"reference/importing/signals/handlers/#importing.signals.handlers.DataImport.clean","title":"<code>clean()</code>","text":"<p>Validate information and uploads the measurement data.</p> Source code in <code>importing/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate information and uploads the measurement data.\"\"\"\n    tz = self.station.timezone\n    if not tz:\n        raise ValidationError(\"Station must have a timezone set.\")\n\n    # If the file has changed, we reprocess the data\n    if self.pk and self.rawfile != self.__class__.objects.get(pk=self.pk).rawfile:\n        self.reprocess = True\n\n    if self.reprocess:\n        self.status = \"N\"\n        self.reprocess = False\n</code></pre>"},{"location":"reference/importing/signals/handlers/#importing.signals.handlers-functions","title":"Functions","text":""},{"location":"reference/importing/signals/handlers/#importing.signals.handlers.ingest_data","title":"<code>ingest_data(data_import_pk)</code>","text":"<p>Initiate the ingestion of data into the DB.</p> <p>If the status of the data import is \"not queued\", the request is processed. The data loaded and saved to the database. The status is updated to completed or failed depending on the outcome.</p> Source code in <code>importing/tasks.py</code> <pre><code>@on_commit_task()\ndef ingest_data(data_import_pk: int) -&gt; None:\n    \"\"\"Initiate the ingestion of data into the DB.\n\n    If the status of the data import is \"not queued\", the request is processed. The data\n    loaded and saved to the database. The status is updated to completed or failed\n    depending on the outcome.\n    \"\"\"\n    data_import = DataImport.objects.get(pk=data_import_pk)\n    if data_import.status != \"N\":\n        return\n\n    data_import.status = \"Q\"\n    data_import.save()\n\n    try:\n        getLogger(\"huey\").info(\"Ingesting data for %s\", data_import)\n        data_import.start_date, data_import.end_date, data_import.records = (\n            save_temp_data_to_permanent(data_import)\n        )\n        update_variables_for_station(data_import.station.station_code)\n        data_import.status = \"C\"\n        data_import.log = \"Data ingestion completed successfully\"\n        getLogger(\"huey\").info(\"Data ingestion for %s completed\", data_import)\n    except Exception as e:\n        data_import.status = \"F\"\n        data_import.log = str(e)\n        getLogger(\"huey\").exception(\"Error ingesting data for %s\", data_import)\n    finally:\n        data_import.save()\n        clear_cache()\n</code></pre>"},{"location":"reference/importing/signals/handlers/#importing.signals.handlers.process_data_ingestion","title":"<code>process_data_ingestion(sender, instance, **kwargs)</code>","text":"<p>Schedules the data ingestion task.</p> Source code in <code>importing/signals/handlers.py</code> <pre><code>@receiver(post_save, sender=DataImport)\ndef process_data_ingestion(sender, instance: PermissionsBase, **kwargs):\n    \"\"\"Schedules the data ingestion task.\"\"\"\n    ingest_data(instance.pk)\n</code></pre>"},{"location":"reference/importing/signals/handlers/#importing.signals.handlers.set_model_permissions","title":"<code>set_model_permissions(sender, **kwargs)</code>","text":"<p>Set model-level permissions.</p> Source code in <code>importing/signals/handlers.py</code> <pre><code>@receiver(post_migrate)\ndef set_model_permissions(sender, **kwargs):\n    \"\"\"Set model-level permissions.\"\"\"\n    DataImport.set_model_permissions()\n</code></pre>"},{"location":"reference/importing/signals/handlers/#importing.signals.handlers.set_object_permissions","title":"<code>set_object_permissions(sender, instance, **kwargs)</code>","text":"<p>Set object-level permissions.</p> Source code in <code>importing/signals/handlers.py</code> <pre><code>@receiver(post_save, sender=DataImport)\ndef set_object_permissions(sender, instance: PermissionsBase, **kwargs):\n    \"\"\"Set object-level permissions.\"\"\"\n    instance.set_object_permissions()\n</code></pre>"},{"location":"reference/management/","title":"management","text":""},{"location":"reference/management/#management","title":"<code>management</code>","text":""},{"location":"reference/management/admin/","title":"admin","text":""},{"location":"reference/management/admin/#management.admin","title":"<code>management.admin</code>","text":""},{"location":"reference/management/admin/#management.admin-classes","title":"Classes","text":""},{"location":"reference/management/admin/#management.admin.CustomUserAdmin","title":"<code>CustomUserAdmin</code>","text":"<p>               Bases: <code>UserAdmin</code></p> <p>A slightly more restrictive user admin page.</p>"},{"location":"reference/management/admin/#management.admin.PermissionsBaseAdmin","title":"<code>PermissionsBaseAdmin</code>","text":"<p>               Bases: <code>GuardedModelAdmin</code></p> <p>Base admin class for models that require permissions.</p>"},{"location":"reference/management/admin/#management.admin.PermissionsBaseAdmin-functions","title":"Functions","text":""},{"location":"reference/management/admin/#management.admin.PermissionsBaseAdmin.formfield_for_choice_field","title":"<code>formfield_for_choice_field(db_field, request, **kwargs)</code>","text":"<p>Limit the queryset for choice fields.</p> Source code in <code>management/admin.py</code> <pre><code>def formfield_for_choice_field(self, db_field, request, **kwargs):\n    \"\"\"Limit the queryset for choice fields.\"\"\"\n    if db_field.name == \"visibility\":\n        kwargs[\"initial\"] = \"private\"\n        if self.limit_visibility_level and not request.user.is_superuser:\n            kwargs[\"disabled\"] = True\n    return super().formfield_for_choice_field(db_field, request, **kwargs)\n</code></pre>"},{"location":"reference/management/admin/#management.admin.PermissionsBaseAdmin.formfield_for_foreignkey","title":"<code>formfield_for_foreignkey(db_field, request, **kwargs)</code>","text":"<p>Limit the queryset for foreign key fields.</p> Source code in <code>management/admin.py</code> <pre><code>def formfield_for_foreignkey(self, db_field, request, **kwargs):\n    \"\"\"Limit the queryset for foreign key fields.\"\"\"\n    if db_field.name in self.foreign_key_fields:\n        kwargs[\"queryset\"] = get_queryset(db_field, request.user)\n    if db_field.name == \"owner\" and not request.user.is_superuser:\n        kwargs[\"initial\"] = request.user.id\n        kwargs[\"disabled\"] = True\n    return super().formfield_for_foreignkey(db_field, request, **kwargs)\n</code></pre>"},{"location":"reference/management/admin/#management.admin.PermissionsBaseAdmin.get_queryset","title":"<code>get_queryset(request)</code>","text":"<p>Return a queryset of the objects that the user has view permissions for.</p> Source code in <code>management/admin.py</code> <pre><code>def get_queryset(self, request):\n    \"\"\"Return a queryset of the objects that the user has view permissions for.\"\"\"\n    qs = super().get_queryset(request)\n    return get_objects_for_user(\n        request.user, f\"{self.opts.app_label}.view_{self.opts.model_name}\", qs\n    )\n</code></pre>"},{"location":"reference/management/admin/#management.admin.PermissionsBaseAdmin.has_change_permission","title":"<code>has_change_permission(request, obj=None)</code>","text":"<p>Check if the user has the correct permission to change the object.</p> Source code in <code>management/admin.py</code> <pre><code>def has_change_permission(self, request, obj=None):\n    \"\"\"Check if the user has the correct permission to change the object.\"\"\"\n    if obj is not None:\n        return request.user.has_perm(\n            f\"{self.opts.app_label}.change_{self.opts.model_name}\", obj\n        )\n    return True\n</code></pre>"},{"location":"reference/management/admin/#management.admin.PermissionsBaseAdmin.has_delete_permission","title":"<code>has_delete_permission(request, obj=None)</code>","text":"<p>Check if the user has the correct permission to delete the object.</p> Source code in <code>management/admin.py</code> <pre><code>def has_delete_permission(self, request, obj=None):\n    \"\"\"Check if the user has the correct permission to delete the object.\"\"\"\n    return request.user.has_perm(\n        f\"{self.opts.app_label}.delete_{self.opts.model_name}\", obj\n    )\n</code></pre>"},{"location":"reference/management/admin/#management.admin.PermissionsBaseAdmin.has_view_permission","title":"<code>has_view_permission(request, obj=None)</code>","text":"<p>Check if the user has the correct permission to view the object.</p> Source code in <code>management/admin.py</code> <pre><code>def has_view_permission(self, request, obj=None):\n    \"\"\"Check if the user has the correct permission to view the object.\"\"\"\n    if obj is not None:\n        return request.user.has_perm(\n            f\"{self.opts.app_label}.view_{self.opts.model_name}\", obj\n        )\n</code></pre>"},{"location":"reference/management/admin/#management.admin.PermissionsBaseAdmin.obj_perms_manage_view","title":"<code>obj_perms_manage_view(request, object_pk)</code>","text":"<p>Prevents permission scalation at object level.</p> <p>Only allows users with change permissions for this object to change the object permissions.</p> Source code in <code>management/admin.py</code> <pre><code>def obj_perms_manage_view(self, request, object_pk):\n    \"\"\"Prevents permission scalation at object level.\n\n    Only allows users with change permissions for this object to change the object\n    permissions.\n    \"\"\"\n    obj = self.get_object(request, object_pk)\n    if not request.user.has_perm(\n        f\"{self.opts.app_label}.change_{self.opts.model_name}\", obj\n    ):\n        post_url = reverse(\"admin:index\", current_app=self.admin_site.name)\n        return redirect(post_url)\n\n    return super().obj_perms_manage_view(request, object_pk)\n</code></pre>"},{"location":"reference/management/admin/#management.admin.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Custom user model.</p> <p>All users are given staff status and added to the standard group.</p>"},{"location":"reference/management/admin/#management.admin-functions","title":"Functions","text":""},{"location":"reference/management/admin/#management.admin.get_queryset","title":"<code>get_queryset(db_field, user)</code>","text":"<p>Return a queryset based on the permissions of the user.</p> <p>Returns queryset of public objects and objects that the user has change permisions for. For the case of <code>Station</code> objects, having the <code>change</code> permission is necessary to include the object in the queryset - being <code>Public</code> is not enough.</p> <p>Parameters:</p> Name Type Description Default <code>db_field</code> <code>Field</code> <p>Field to filter.</p> required <code>user</code> <code>Model</code> <p>User to check permissions for.</p> required <p>Returns:</p> Type Description <code>QuerySet</code> <p>model.QuerySet: Queryset of objects that the user has permissions for.</p> Source code in <code>management/permissions.py</code> <pre><code>def get_queryset(db_field: model.Field, user: model.Model) -&gt; model.QuerySet:\n    \"\"\"Return a queryset based on the permissions of the user.\n\n    Returns queryset of public objects and objects that the user has change permisions\n    for. For the case of `Station` objects, having the `change` permission is\n    necessary to include the object in the queryset - being `Public` is not enough.\n\n    Args:\n        db_field (model.Field): Field to filter.\n        user (model.Model): User to check permissions for.\n\n    Returns:\n        model.QuerySet: Queryset of objects that the user has permissions for.\n    \"\"\"\n    app_name = db_field.related_model._meta.app_label\n    model_name = db_field.related_model._meta.model_name\n    user_objects = get_objects_for_user(user, f\"{app_name}.change_{model_name}\")\n    public_objects = (\n        db_field.related_model.objects.none()\n        if model_name == \"station\"\n        else db_field.related_model.objects.filter(visibility=\"public\")\n    )\n    return user_objects | public_objects\n</code></pre>"},{"location":"reference/management/apps/","title":"apps","text":""},{"location":"reference/management/apps/#management.apps","title":"<code>management.apps</code>","text":""},{"location":"reference/management/apps/#management.apps-classes","title":"Classes","text":""},{"location":"reference/management/apps/#management.apps.ManagementConfig","title":"<code>ManagementConfig</code>","text":"<p>               Bases: <code>AppConfig</code></p>"},{"location":"reference/management/filters/","title":"filters","text":""},{"location":"reference/management/filters/#management.filters","title":"<code>management.filters</code>","text":""},{"location":"reference/management/filters/#management.filters-classes","title":"Classes","text":""},{"location":"reference/management/filters/#management.filters.FilterVisible","title":"<code>FilterVisible(target, model, field=None)</code>","text":"<p>Filter objects the user has permission to view.</p> <p>Standard filter shows ALL objects available in the database when faced with a ForeignKey field. This filter shows only the objects that appear in the target model objects that the user has permission to view.</p> <p>If field is None, the name of the <code>model</code> model is used.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>type[Model]</code> <p>Model containing the objects.</p> required <code>model</code> <code>type[Model]</code> <p>Model of the objects to display.</p> required <code>field</code> <code>str | None</code> <p>Field to filter by. Defaults to None.</p> <code>None</code> Source code in <code>management/filters.py</code> <pre><code>def __init__(\n    self, target: type[Model], model: type[Model], field: str | None = None\n) -&gt; None:\n    self.target = target\n    self.model = model\n    self.field = field or model.__name__.lower()\n    self.permission = f\"{target._meta.app_label}.view_{target._meta.model_name}\"\n</code></pre>"},{"location":"reference/management/forms/","title":"forms","text":""},{"location":"reference/management/forms/#management.forms","title":"<code>management.forms</code>","text":""},{"location":"reference/management/forms/#management.forms-classes","title":"Classes","text":""},{"location":"reference/management/forms/#management.forms.CustomUserCreationForm","title":"<code>CustomUserCreationForm</code>","text":"<p>               Bases: <code>UserCreationForm</code></p>"},{"location":"reference/management/forms/#management.forms.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Custom user model.</p> <p>All users are given staff status and added to the standard group.</p>"},{"location":"reference/management/initial_data/","title":"initial_data","text":""},{"location":"reference/management/initial_data/#management.initial_data","title":"<code>management.initial_data</code>","text":""},{"location":"reference/management/initial_data/#management.initial_data-functions","title":"Functions","text":""},{"location":"reference/management/initial_data/#management.initial_data.create_user_group","title":"<code>create_user_group(apps, schema_editor)</code>","text":"<p>Create the standard user group This function is run in migrations/0002_initial_data.py as an initial data migration at project initialization.</p> Source code in <code>management/initial_data.py</code> <pre><code>def create_user_group(apps, schema_editor):\n    \"\"\"Create the standard user group\n    This function is run in migrations/0002_initial_data.py as an initial\n    data migration at project initialization.\n    \"\"\"\n    Group.objects.create(name=\"Standard\")\n</code></pre>"},{"location":"reference/management/models/","title":"models","text":""},{"location":"reference/management/models/#management.models","title":"<code>management.models</code>","text":""},{"location":"reference/management/models/#management.models-classes","title":"Classes","text":""},{"location":"reference/management/models/#management.models.PermissionsBase","title":"<code>PermissionsBase</code>","text":"<p>               Bases: <code>Model</code></p> <p>Base model for models that require permissions.</p>"},{"location":"reference/management/models/#management.models.PermissionsBase-functions","title":"Functions","text":""},{"location":"reference/management/models/#management.models.PermissionsBase.set_model_permissions","title":"<code>set_model_permissions()</code>  <code>classmethod</code>","text":"<p>Set model-level add permissions.</p> Source code in <code>management/models.py</code> <pre><code>@classmethod\ndef set_model_permissions(cls):\n    \"\"\"Set model-level add permissions.\"\"\"\n    apply_add_permissions_to_standard_group(cls)\n</code></pre>"},{"location":"reference/management/models/#management.models.PermissionsBase.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level delete, change and view permissions.</p> Source code in <code>management/models.py</code> <pre><code>def set_object_permissions(self):\n    \"\"\"Set object-level delete, change and view permissions.\"\"\"\n    delete, change, view, add = _get_perm_codenames(self.__class__)\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # View permissions based on permissions level\n    if self.visibility in [\"public\", \"internal\"]:\n        assign_perm(view, standard_group, self)\n        assign_perm(view, anonymous_user, self)\n        if self.owner:\n            remove_perm(view, self.owner, self)\n    elif self.visibility == \"private\" and self.owner:\n        remove_perm(view, standard_group, self)\n        remove_perm(view, anonymous_user, self)\n        if self.owner:\n            assign_perm(view, self.owner, self)\n\n    # Assign change and delete permissions for owner\n    for perm in [change, delete]:\n        remove_perm(perm, standard_group, self)\n        remove_perm(perm, anonymous_user, self)\n        if self.owner:\n            assign_perm(perm, self.owner, self)\n</code></pre>"},{"location":"reference/management/models/#management.models.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Custom user model.</p> <p>All users are given staff status and added to the standard group.</p>"},{"location":"reference/management/models/#management.models-functions","title":"Functions","text":""},{"location":"reference/management/models/#management.models._get_perm_codenames","title":"<code>_get_perm_codenames(model)</code>","text":"<p>Helper function to get delete, change and view permission codenames for a given model.</p> Source code in <code>management/models.py</code> <pre><code>def _get_perm_codenames(model):\n    \"\"\"Helper function to get delete, change and view permission codenames for a\n    given model.\n    \"\"\"\n    return (\n        f\"delete_{model._meta.model_name}\",\n        f\"change_{model._meta.model_name}\",\n        f\"view_{model._meta.model_name}\",\n        f\"add_{model._meta.model_name}\",\n    )\n</code></pre>"},{"location":"reference/management/models/#management.models.apply_add_permissions_to_standard_group","title":"<code>apply_add_permissions_to_standard_group(model)</code>","text":"<p>Apply model-level add permissions to the standard user group.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Model</code> <p>Model to apply permissions to.</p> required Source code in <code>management/models.py</code> <pre><code>def apply_add_permissions_to_standard_group(model):\n    \"\"\"Apply model-level add permissions to the standard user group.\n\n    Args:\n        model (Model): Model to apply permissions to.\n\n    \"\"\"\n    delete, change, view, add = _get_perm_codenames(model)\n    standard_group = Group.objects.get(name=\"Standard\")\n    content_type = ContentType.objects.get_for_model(model)\n    permission, created = Permission.objects.get_or_create(\n        codename=add, content_type=content_type\n    )\n    standard_group.permissions.add(permission)\n</code></pre>"},{"location":"reference/management/permissions/","title":"permissions","text":""},{"location":"reference/management/permissions/#management.permissions","title":"<code>management.permissions</code>","text":"<p>Customised permissions.</p>"},{"location":"reference/management/permissions/#management.permissions-classes","title":"Classes","text":""},{"location":"reference/management/permissions/#management.permissions.CustomDjangoModelPermissions","title":"<code>CustomDjangoModelPermissions</code>","text":"<p>               Bases: <code>DjangoModelPermissions</code></p> <p>Modify DjangoModelPermissions to allow only users with view permissions to do GET, OPTIONS and HEAD requests.</p>"},{"location":"reference/management/permissions/#management.permissions-functions","title":"Functions","text":""},{"location":"reference/management/permissions/#management.permissions.get_queryset","title":"<code>get_queryset(db_field, user)</code>","text":"<p>Return a queryset based on the permissions of the user.</p> <p>Returns queryset of public objects and objects that the user has change permisions for. For the case of <code>Station</code> objects, having the <code>change</code> permission is necessary to include the object in the queryset - being <code>Public</code> is not enough.</p> <p>Parameters:</p> Name Type Description Default <code>db_field</code> <code>Field</code> <p>Field to filter.</p> required <code>user</code> <code>Model</code> <p>User to check permissions for.</p> required <p>Returns:</p> Type Description <code>QuerySet</code> <p>model.QuerySet: Queryset of objects that the user has permissions for.</p> Source code in <code>management/permissions.py</code> <pre><code>def get_queryset(db_field: model.Field, user: model.Model) -&gt; model.QuerySet:\n    \"\"\"Return a queryset based on the permissions of the user.\n\n    Returns queryset of public objects and objects that the user has change permisions\n    for. For the case of `Station` objects, having the `change` permission is\n    necessary to include the object in the queryset - being `Public` is not enough.\n\n    Args:\n        db_field (model.Field): Field to filter.\n        user (model.Model): User to check permissions for.\n\n    Returns:\n        model.QuerySet: Queryset of objects that the user has permissions for.\n    \"\"\"\n    app_name = db_field.related_model._meta.app_label\n    model_name = db_field.related_model._meta.model_name\n    user_objects = get_objects_for_user(user, f\"{app_name}.change_{model_name}\")\n    public_objects = (\n        db_field.related_model.objects.none()\n        if model_name == \"station\"\n        else db_field.related_model.objects.filter(visibility=\"public\")\n    )\n    return user_objects | public_objects\n</code></pre>"},{"location":"reference/management/serializers/","title":"serializers","text":""},{"location":"reference/management/serializers/#management.serializers","title":"<code>management.serializers</code>","text":""},{"location":"reference/management/serializers/#management.serializers-classes","title":"Classes","text":""},{"location":"reference/management/serializers/#management.serializers.GroupSerializer","title":"<code>GroupSerializer</code>","text":"<p>               Bases: <code>ModelSerializer</code></p>"},{"location":"reference/management/serializers/#management.serializers.RegisterSerializer","title":"<code>RegisterSerializer</code>","text":"<p>               Bases: <code>ModelSerializer</code></p>"},{"location":"reference/management/serializers/#management.serializers.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Custom user model.</p> <p>All users are given staff status and added to the standard group.</p>"},{"location":"reference/management/serializers/#management.serializers.UserSerializer","title":"<code>UserSerializer</code>","text":"<p>               Bases: <code>ModelSerializer</code></p>"},{"location":"reference/management/tests/","title":"tests","text":""},{"location":"reference/management/tests/#management.tests","title":"<code>management.tests</code>","text":""},{"location":"reference/management/tools/","title":"tools","text":""},{"location":"reference/management/tools/#management.tools","title":"<code>management.tools</code>","text":""},{"location":"reference/management/tools/#management.tools-functions","title":"Functions","text":""},{"location":"reference/management/tools/#management.tools.get_deleted_objects","title":"<code>get_deleted_objects(objs)</code>","text":"<p>Return information about related objects to be deleted.</p> <p>How to do this has been taken from https://stackoverflow.com/a/39533619/3778792</p> <p>Parameters:</p> Name Type Description Default <code>objs</code> <code>list[Model]</code> <p>List of objects to be deleted.</p> required <p>Returns:</p> Type Description <code>tuple[list[str], dict[str, int], list[str]]</code> <p>tuple[list[str], dict[str, int], list[str]]: Tuple containing the following: - List of strings representing the objects to be deleted. - Dictionary containing the count of objects to be deleted for each model. - List of strings representing the objects that are protected from deletion</p> Source code in <code>management/tools.py</code> <pre><code>def get_deleted_objects(\n    objs: list[models.Model],\n) -&gt; tuple[list[str], dict[str, int], list[str]]:\n    \"\"\"Return information about related objects to be deleted.\n\n    How to do this has been taken from https://stackoverflow.com/a/39533619/3778792\n\n    Args:\n        objs (list[models.Model]): List of objects to be deleted.\n\n    Returns:\n        tuple[list[str], dict[str, int], list[str]]: Tuple containing the following:\n            - List of strings representing the objects to be deleted.\n            - Dictionary containing the count of objects to be deleted for each model.\n            - List of strings representing the objects that are protected from deletion\n    \"\"\"\n    collector = NestedObjects(using=\"default\")\n    collector.collect(objs)\n\n    def format_callback(obj):\n        opts = obj._meta\n        no_edit_link = f\"{capfirst(opts.verbose_name)}: {force_str(obj)}\"\n        return no_edit_link\n\n    to_delete = collector.nested(format_callback)\n    protected = [format_callback(obj) for obj in collector.protected]\n    model_count = {\n        model._meta.verbose_name_plural: len(objs)\n        for model, objs in collector.model_objs.items()\n    }\n    if len(to_delete) == 0:\n        to_delete.append(\"None\")\n\n    return to_delete, model_count, protected\n</code></pre>"},{"location":"reference/management/views/","title":"views","text":""},{"location":"reference/management/views/#management.views","title":"<code>management.views</code>","text":""},{"location":"reference/management/views/#management.views-classes","title":"Classes","text":""},{"location":"reference/management/views/#management.views.CustomCreateView","title":"<code>CustomCreateView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>CreateView</code></p> <p>Generic create view.</p> <p>This view is used to create a new model object. The user must have the permission to create the object, otherwise a 403 error is returned.</p> <p>The view includes a form with the object data, and the context includes the title of the view and the URL to the list view.</p> <p>If provided, the <code>foreign_key_fields</code> attribute is used to limit the queryset for foreign key fields.</p> <p>If successful, the view redirects to the detail view of the created object.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>template_name</code> <code>str</code> <p>Template to be used.</p>"},{"location":"reference/management/views/#management.views.CustomCreateView-functions","title":"Functions","text":""},{"location":"reference/management/views/#management.views.CustomCreateView.form_valid","title":"<code>form_valid(form)</code>","text":"<p>Set the owner of the object to the current user.</p> <p>This is done before saving the object to the database.</p> <p>Parameters:</p> Name Type Description Default <code>form</code> <code>ModelForm</code> <p>Form with the object data.</p> required <p>Returns:</p> Name Type Description <code>HttpResponse</code> <code>HttpResponse</code> <p>Redirect to the detail view of the created object.</p> Source code in <code>management/views.py</code> <pre><code>def form_valid(self, form: forms.ModelForm) -&gt; HttpResponse:\n    \"\"\"Set the owner of the object to the current user.\n\n    This is done before saving the object to the database.\n\n    Args:\n        form (forms.ModelForm): Form with the object data.\n\n    Returns:\n        HttpResponse: Redirect to the detail view of the created object.\n    \"\"\"\n    form.instance.owner = self.request.user\n    return super().form_valid(form)\n</code></pre>"},{"location":"reference/management/views/#management.views.CustomCreateView.get_form_kwargs","title":"<code>get_form_kwargs()</code>","text":"<p>Add the user to the form kwargs, so we can filter the options.</p> Source code in <code>management/views.py</code> <pre><code>def get_form_kwargs(self):\n    \"\"\"Add the user to the form kwargs, so we can filter the options.\"\"\"\n    kwargs = super().get_form_kwargs()\n    kwargs[\"user\"] = self.request.user\n    return kwargs\n</code></pre>"},{"location":"reference/management/views/#management.views.CustomDeleteView","title":"<code>CustomDeleteView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>DeleteView</code></p> <p>Generic delete view.</p> <p>This view is used to delete a model object. The user must have the permission to delete the object, otherwise a 403 error is returned. A confirmation page is shown with the related objects that will be deleted.</p> <p>The permissions required to delete the object are <code>app_label.delete_model_name</code>. For example, the permission required to delete a <code>DataImport</code> object would be <code>importing.delete_dataimport</code>.</p> <p>If successful, the view redirects to the list view.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>template_name</code> <code>str</code> <p>Template to be used.</p>"},{"location":"reference/management/views/#management.views.CustomDetailView","title":"<code>CustomDetailView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>DetailView</code></p> <p>Generic detail view.</p> <p>This view is used to show the details of a model object. The user must have the permission to view the object, otherwise a 403 error is returned.</p> <p>The view includes a form with the object data, and the context includes the URLs for the list, delete, and edit views.</p> <p>The permissions required to view the object are <code>app_label.view_model_name</code>. For example, the permission required to view a <code>DataImport</code> object would be <code>importing.view_dataimport</code>.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>template_name</code> <code>str</code> <p>Template to be used.</p> <code>fields</code> <code>str</code> <p>Fields to be shown in the form.</p>"},{"location":"reference/management/views/#management.views.CustomDetailView-functions","title":"Functions","text":""},{"location":"reference/management/views/#management.views.CustomDetailView.get_inline","title":"<code>get_inline()</code>","text":"<p>Return the inline data for the format.</p> <p>If provided, this method should return a dictionary with the inline data to be shown in the detail view. The dictionary should have the following keys:</p> <ul> <li>title: Title of the inline data.</li> <li>header: List with the header of the table.</li> <li>objects: List with the objects to be shown in the table. Each object should be     a list with the same length as the header.</li> </ul> <p>Returns:</p> Type Description <code>dict | None</code> <p>dict | None: Inline data for the format.</p> Source code in <code>management/views.py</code> <pre><code>def get_inline(self) -&gt; dict | None:\n    \"\"\"Return the inline data for the format.\n\n    If provided, this method should return a dictionary with the inline data to be\n    shown in the detail view. The dictionary should have the following keys:\n\n    - title: Title of the inline data.\n    - header: List with the header of the table.\n    - objects: List with the objects to be shown in the table. Each object should be\n        a list with the same length as the header.\n\n    Returns:\n        dict | None: Inline data for the format.\n    \"\"\"\n    return None\n</code></pre>"},{"location":"reference/management/views/#management.views.CustomEditView","title":"<code>CustomEditView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>UpdateView</code></p> <p>Generic edit view.</p> <p>This view is used to edit a model object. The user must have the permission to edit the object, otherwise a 403 error is returned.</p> <p>The view includes a form with the object data, and the context includes the title of the view and the URL to the list view.</p> <p>The permissions required to edit the object are <code>app_label.change_model_name</code>. For example, the permission required to edit a <code>DataImport</code> object would be <code>importing.change_dataimport</code>.</p> <p>If successful or cancelled, the view redirects to the detail view of the created object.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>template_name</code> <code>str</code> <p>Template to be used.</p>"},{"location":"reference/management/views/#management.views.CustomEditView-functions","title":"Functions","text":""},{"location":"reference/management/views/#management.views.CustomEditView.get_form_kwargs","title":"<code>get_form_kwargs()</code>","text":"<p>Add the user to the form kwargs, so we can filter the options.</p> Source code in <code>management/views.py</code> <pre><code>def get_form_kwargs(self):\n    \"\"\"Add the user to the form kwargs, so we can filter the options.\"\"\"\n    kwargs = super().get_form_kwargs()\n    kwargs[\"user\"] = self.request.user\n    return kwargs\n</code></pre>"},{"location":"reference/management/views/#management.views.CustomTableView","title":"<code>CustomTableView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>SingleTableMixin</code>, <code>FilterView</code></p> <p>This view is used to show a list of model objects.</p> <p>The view includes a table with the objects, and the context includes the title of the view, the refresh URL, and the URL to create a new object.</p> <p>The permissions required to view the objects are <code>app_label.view_model_name</code>. For example, the permission required to view a <code>DataImport</code> object would be <code>importing.view_dataimport</code>.</p> <p>If provided, the <code>filter_class</code> attribute is used to create a filter form on top of the table.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>model</code> <code>Model</code> <p>Model to be used.</p> <code>table_class</code> <code>Table</code> <p>Table class to be used.</p> <code>filterset_class</code> <code>FilterSet</code> <p>Filter class to be used. If not provided, the model's default filter is used.</p> <code>template_name</code> <code>str</code> <p>Template to be used.</p> <code>paginate_by</code> <code>int</code> <p>Number of objects per page.</p> <code>show_refresh_btn</code> <code>bool</code> <p>If True, a refresh url is included in the context.</p> <code>show_new_btn</code> <code>bool</code> <p>If True, a create url is included in the context.</p>"},{"location":"reference/management/views/#management.views.CustomTableView-functions","title":"Functions","text":""},{"location":"reference/management/views/#management.views.CustomTableView.get_filterset_class","title":"<code>get_filterset_class()</code>","text":"<p>Return the filter class for the view.</p> <p>If no filter class is provided in the view, the default filter for the model is used. The default filter is created by the <code>FilterSet</code> class, and includes only the 'visibility'.</p> Source code in <code>management/views.py</code> <pre><code>def get_filterset_class(self):\n    \"\"\"Return the filter class for the view.\n\n    If no filter class is provided in the view, the default filter for the model is\n    used. The default filter is created by the `FilterSet` class, and includes only\n    the 'visibility'.\n    \"\"\"\n    if not self.filterset_class:\n\n        class VisbilityFilter(FilterSet):\n            class Meta:\n                model = self.model\n                fields = [\"visibility\"]\n\n        return VisbilityFilter\n\n    return super().get_filterset_class()\n</code></pre>"},{"location":"reference/management/views/#management.views.CustomUserCreationForm","title":"<code>CustomUserCreationForm</code>","text":"<p>               Bases: <code>UserCreationForm</code></p>"},{"location":"reference/management/views/#management.views.SignUpView","title":"<code>SignUpView</code>","text":"<p>               Bases: <code>CreateView</code></p>"},{"location":"reference/management/views/#management.views.URLMixin","title":"<code>URLMixin</code>","text":"<p>Mixin to add URLs to a view.</p> <p>This mixin adds the URLs for the list, create, edit, and delete views to a view. The URLs follow the pattern <code>app_label:model_name_action</code>. For example, the list URL for the <code>DataImport</code> model would be <code>importing:dataimport_list</code>.</p> <p>Attributes:</p> Name Type Description <code>app_label</code> <code>str</code> <p>Application label.</p> <code>model_name</code> <code>str</code> <p>Model name.</p>"},{"location":"reference/management/views/#management.views-functions","title":"Functions","text":""},{"location":"reference/management/views/#management.views.get_deleted_objects","title":"<code>get_deleted_objects(objs)</code>","text":"<p>Return information about related objects to be deleted.</p> <p>How to do this has been taken from https://stackoverflow.com/a/39533619/3778792</p> <p>Parameters:</p> Name Type Description Default <code>objs</code> <code>list[Model]</code> <p>List of objects to be deleted.</p> required <p>Returns:</p> Type Description <code>tuple[list[str], dict[str, int], list[str]]</code> <p>tuple[list[str], dict[str, int], list[str]]: Tuple containing the following: - List of strings representing the objects to be deleted. - Dictionary containing the count of objects to be deleted for each model. - List of strings representing the objects that are protected from deletion</p> Source code in <code>management/tools.py</code> <pre><code>def get_deleted_objects(\n    objs: list[models.Model],\n) -&gt; tuple[list[str], dict[str, int], list[str]]:\n    \"\"\"Return information about related objects to be deleted.\n\n    How to do this has been taken from https://stackoverflow.com/a/39533619/3778792\n\n    Args:\n        objs (list[models.Model]): List of objects to be deleted.\n\n    Returns:\n        tuple[list[str], dict[str, int], list[str]]: Tuple containing the following:\n            - List of strings representing the objects to be deleted.\n            - Dictionary containing the count of objects to be deleted for each model.\n            - List of strings representing the objects that are protected from deletion\n    \"\"\"\n    collector = NestedObjects(using=\"default\")\n    collector.collect(objs)\n\n    def format_callback(obj):\n        opts = obj._meta\n        no_edit_link = f\"{capfirst(opts.verbose_name)}: {force_str(obj)}\"\n        return no_edit_link\n\n    to_delete = collector.nested(format_callback)\n    protected = [format_callback(obj) for obj in collector.protected]\n    model_count = {\n        model._meta.verbose_name_plural: len(objs)\n        for model, objs in collector.model_objs.items()\n    }\n    if len(to_delete) == 0:\n        to_delete.append(\"None\")\n\n    return to_delete, model_count, protected\n</code></pre>"},{"location":"reference/management/views/#management.views.get_queryset","title":"<code>get_queryset(db_field, user)</code>","text":"<p>Return a queryset based on the permissions of the user.</p> <p>Returns queryset of public objects and objects that the user has change permisions for. For the case of <code>Station</code> objects, having the <code>change</code> permission is necessary to include the object in the queryset - being <code>Public</code> is not enough.</p> <p>Parameters:</p> Name Type Description Default <code>db_field</code> <code>Field</code> <p>Field to filter.</p> required <code>user</code> <code>Model</code> <p>User to check permissions for.</p> required <p>Returns:</p> Type Description <code>QuerySet</code> <p>model.QuerySet: Queryset of objects that the user has permissions for.</p> Source code in <code>management/permissions.py</code> <pre><code>def get_queryset(db_field: model.Field, user: model.Model) -&gt; model.QuerySet:\n    \"\"\"Return a queryset based on the permissions of the user.\n\n    Returns queryset of public objects and objects that the user has change permisions\n    for. For the case of `Station` objects, having the `change` permission is\n    necessary to include the object in the queryset - being `Public` is not enough.\n\n    Args:\n        db_field (model.Field): Field to filter.\n        user (model.Model): User to check permissions for.\n\n    Returns:\n        model.QuerySet: Queryset of objects that the user has permissions for.\n    \"\"\"\n    app_name = db_field.related_model._meta.app_label\n    model_name = db_field.related_model._meta.model_name\n    user_objects = get_objects_for_user(user, f\"{app_name}.change_{model_name}\")\n    public_objects = (\n        db_field.related_model.objects.none()\n        if model_name == \"station\"\n        else db_field.related_model.objects.filter(visibility=\"public\")\n    )\n    return user_objects | public_objects\n</code></pre>"},{"location":"reference/measurement/","title":"measurement","text":""},{"location":"reference/measurement/#measurement","title":"<code>measurement</code>","text":""},{"location":"reference/measurement/admin/","title":"admin","text":""},{"location":"reference/measurement/admin/#measurement.admin","title":"<code>measurement.admin</code>","text":""},{"location":"reference/measurement/admin/#measurement.admin-classes","title":"Classes","text":""},{"location":"reference/measurement/admin/#measurement.admin.Measurement","title":"<code>Measurement</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Class to store the measurements and their validation status.</p> <p>This class holds the value of a given variable and station at a specific time, as well as auxiliary information such as maximum and minimum values, depth and direction, for vector quantities. All of these have a <code>raw</code> version where a backup of the original data is kept, should this change at any point.</p> <p>Flags to monitor its validation status, if the data is active (and therefore can be used for reporting) and if it has actually been used for that is also included.</p> <p>Attributes:</p> Name Type Description <code>depth</code> <code>int</code> <p>Depth of the measurement.</p> <code>direction</code> <code>Decimal</code> <p>Direction of the measurement, useful for vector quantities.</p> <code>raw_value</code> <code>Decimal</code> <p>Original value of the measurement.</p> <code>raw_maximum</code> <code>Decimal</code> <p>Original maximum value of the measurement.</p> <code>raw_minimum</code> <code>Decimal</code> <p>Original minimum value of the measurement.</p> <code>raw_direction</code> <code>Decimal</code> <p>Original direction of the measurement.</p> <code>raw_depth</code> <code>int</code> <p>Original depth of the measurement.</p> <code>is_validated</code> <code>bool</code> <p>Flag to indicate if the measurement has been validated.</p> <code>is_active</code> <code>bool</code> <p>Flag to indicate if the measurement is active. An inactive measurement is not used for reporting</p>"},{"location":"reference/measurement/admin/#measurement.admin.Measurement-attributes","title":"Attributes","text":""},{"location":"reference/measurement/admin/#measurement.admin.Measurement.overwritten","title":"<code>overwritten: bool</code>  <code>property</code>","text":"<p>Indicates if any of the values associated to the entry have been overwritten.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if any raw field is different to the corresponding standard field.</p>"},{"location":"reference/measurement/admin/#measurement.admin.Measurement.raws","title":"<code>raws: tuple[str, ...]</code>  <code>property</code>","text":"<p>Return the raw fields of the measurement.</p> <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>tuple[str]: Tuple with the names of the raw fields of the measurement.</p>"},{"location":"reference/measurement/admin/#measurement.admin.Measurement-functions","title":"Functions","text":""},{"location":"reference/measurement/admin/#measurement.admin.Measurement.clean","title":"<code>clean()</code>","text":"<p>Check consistency of validation, reporting and backs-up values.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Check consistency of validation, reporting and backs-up values.\"\"\"\n    # Check consistency of validation\n    if not self.is_validated and not self.is_active:\n        raise ValidationError(\"Only validated entries can be declared as inactive.\")\n\n    # Backup values to raws, if needed\n    for r in self.raws:\n        value = getattr(self, r.removeprefix(\"raw_\"))\n        if value and not getattr(self, r):\n            setattr(self, r, value)\n</code></pre>"},{"location":"reference/measurement/admin/#measurement.admin.MeasurementAdmin","title":"<code>MeasurementAdmin</code>","text":"<p>               Bases: <code>MeasurementBaseAdmin</code></p> <p>Admin class for the Measurement model.</p>"},{"location":"reference/measurement/admin/#measurement.admin.MeasurementBaseAdmin","title":"<code>MeasurementBaseAdmin</code>","text":"<p>               Bases: <code>GuardedModelAdmin</code></p>"},{"location":"reference/measurement/admin/#measurement.admin.MeasurementBaseAdmin-functions","title":"Functions","text":""},{"location":"reference/measurement/admin/#measurement.admin.MeasurementBaseAdmin.formfield_for_foreignkey","title":"<code>formfield_for_foreignkey(db_field, request, **kwargs)</code>","text":"<p>Limit the queryset for foreign key fields.</p> Source code in <code>measurement/admin.py</code> <pre><code>def formfield_for_foreignkey(self, db_field, request, **kwargs):\n    \"\"\"Limit the queryset for foreign key fields.\"\"\"\n    if db_field.name == \"station\":\n        kwargs[\"queryset\"] = get_objects_for_user(\n            request.user, \"station.change_station\"\n        )\n    elif db_field.name == \"variable\":\n        kwargs[\"queryset\"] = get_queryset(db_field, request.user)\n    return super().formfield_for_foreignkey(db_field, request, **kwargs)\n</code></pre>"},{"location":"reference/measurement/admin/#measurement.admin.MeasurementBaseAdmin.get_queryset","title":"<code>get_queryset(request)</code>","text":"<p>Return a queryset of the objects that the user has view permissions for.</p> Source code in <code>measurement/admin.py</code> <pre><code>def get_queryset(self, request):\n    \"\"\"Return a queryset of the objects that the user has view permissions for.\"\"\"\n    qs = super().get_queryset(request)\n    stations = get_objects_for_user(request.user, \"station.view_measurements\")\n    return qs.filter(station__in=stations)\n</code></pre>"},{"location":"reference/measurement/admin/#measurement.admin.MeasurementBaseAdmin.has_add_permission","title":"<code>has_add_permission(request)</code>","text":"<p>Check if the user has the correct permission to add objects.</p> Source code in <code>measurement/admin.py</code> <pre><code>def has_add_permission(self, request):\n    \"\"\"Check if the user has the correct permission to add objects.\"\"\"\n    return request.user.has_perm(\n        f\"{self.opts.app_label}.add_{self.opts.model_name}\"\n    )\n</code></pre>"},{"location":"reference/measurement/admin/#measurement.admin.MeasurementBaseAdmin.has_change_permission","title":"<code>has_change_permission(request, obj=None)</code>","text":"<p>Check if the user has the correct permission to change the object.</p> Source code in <code>measurement/admin.py</code> <pre><code>def has_change_permission(self, request, obj=None):\n    \"\"\"Check if the user has the correct permission to change the object.\"\"\"\n    if obj is not None:\n        return request.user.has_perm(\"change_station\", obj.station)\n    return True\n</code></pre>"},{"location":"reference/measurement/admin/#measurement.admin.MeasurementBaseAdmin.has_delete_permission","title":"<code>has_delete_permission(request, obj=None)</code>","text":"<p>Check if the user has the correct permission to delete the object.</p> Source code in <code>measurement/admin.py</code> <pre><code>def has_delete_permission(self, request, obj=None):\n    \"\"\"Check if the user has the correct permission to delete the object.\"\"\"\n    if obj is not None:\n        return request.user.has_perm(\"delete_station\", obj.station)\n    return True\n</code></pre>"},{"location":"reference/measurement/admin/#measurement.admin.MeasurementBaseAdmin.has_view_permission","title":"<code>has_view_permission(request, obj=None)</code>","text":"<p>Check if the user has the correct permission to view the object.</p> Source code in <code>measurement/admin.py</code> <pre><code>def has_view_permission(self, request, obj=None):\n    \"\"\"Check if the user has the correct permission to view the object.\"\"\"\n    if obj is not None:\n        return request.user.has_perm(\"view_measurements\", obj.station)\n    return True\n</code></pre>"},{"location":"reference/measurement/admin/#measurement.admin.Report","title":"<code>Report</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Holds the different reporting data.</p> <p>It also keeps track of which data has already been used when creating the reports.</p> <p>Attributes:</p> Name Type Description <code>report_type</code> <code>str</code> <p>Type of report. It can be hourly, daily or monthly.</p> <code>completeness</code> <code>Decimal</code> <p>Completeness of the report. Eg. a daily report with 24 hourly measurements would have a completeness of 100%.</p>"},{"location":"reference/measurement/admin/#measurement.admin.Report-functions","title":"Functions","text":""},{"location":"reference/measurement/admin/#measurement.admin.Report.clean","title":"<code>clean()</code>","text":"<p>Validate that the report type and use of the data is consistent.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate that the report type and use of the data is consistent.\"\"\"\n    if self.report_type == ReportType.HOURLY:\n        self.time = self.time.replace(minute=0, second=0, microsecond=0)\n    elif self.report_type == ReportType.DAILY:\n        self.time = self.time.replace(hour=0, minute=0, second=0, microsecond=0)\n    elif self.report_type == ReportType.MONTLY:\n        self.time = self.time.replace(\n            day=1, hour=0, minute=0, second=0, microsecond=0\n        )\n</code></pre>"},{"location":"reference/measurement/admin/#measurement.admin.ReportAdmin","title":"<code>ReportAdmin</code>","text":"<p>               Bases: <code>MeasurementBaseAdmin</code></p> <p>Admin class for the Report model.</p>"},{"location":"reference/measurement/admin/#measurement.admin-functions","title":"Functions","text":""},{"location":"reference/measurement/admin/#measurement.admin.get_queryset","title":"<code>get_queryset(db_field, user)</code>","text":"<p>Return a queryset based on the permissions of the user.</p> <p>Returns queryset of public objects and objects that the user has change permisions for. For the case of <code>Station</code> objects, having the <code>change</code> permission is necessary to include the object in the queryset - being <code>Public</code> is not enough.</p> <p>Parameters:</p> Name Type Description Default <code>db_field</code> <code>Field</code> <p>Field to filter.</p> required <code>user</code> <code>Model</code> <p>User to check permissions for.</p> required <p>Returns:</p> Type Description <code>QuerySet</code> <p>model.QuerySet: Queryset of objects that the user has permissions for.</p> Source code in <code>management/permissions.py</code> <pre><code>def get_queryset(db_field: model.Field, user: model.Model) -&gt; model.QuerySet:\n    \"\"\"Return a queryset based on the permissions of the user.\n\n    Returns queryset of public objects and objects that the user has change permisions\n    for. For the case of `Station` objects, having the `change` permission is\n    necessary to include the object in the queryset - being `Public` is not enough.\n\n    Args:\n        db_field (model.Field): Field to filter.\n        user (model.Model): User to check permissions for.\n\n    Returns:\n        model.QuerySet: Queryset of objects that the user has permissions for.\n    \"\"\"\n    app_name = db_field.related_model._meta.app_label\n    model_name = db_field.related_model._meta.model_name\n    user_objects = get_objects_for_user(user, f\"{app_name}.change_{model_name}\")\n    public_objects = (\n        db_field.related_model.objects.none()\n        if model_name == \"station\"\n        else db_field.related_model.objects.filter(visibility=\"public\")\n    )\n    return user_objects | public_objects\n</code></pre>"},{"location":"reference/measurement/apps/","title":"apps","text":""},{"location":"reference/measurement/apps/#measurement.apps","title":"<code>measurement.apps</code>","text":""},{"location":"reference/measurement/apps/#measurement.apps-classes","title":"Classes","text":""},{"location":"reference/measurement/apps/#measurement.apps.MeasurementConfig","title":"<code>MeasurementConfig</code>","text":"<p>               Bases: <code>AppConfig</code></p>"},{"location":"reference/measurement/filters/","title":"filters","text":""},{"location":"reference/measurement/filters/#measurement.filters","title":"<code>measurement.filters</code>","text":""},{"location":"reference/measurement/filters/#measurement.filters-classes","title":"Classes","text":""},{"location":"reference/measurement/filters/#measurement.filters.Measurement","title":"<code>Measurement</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Class to store the measurements and their validation status.</p> <p>This class holds the value of a given variable and station at a specific time, as well as auxiliary information such as maximum and minimum values, depth and direction, for vector quantities. All of these have a <code>raw</code> version where a backup of the original data is kept, should this change at any point.</p> <p>Flags to monitor its validation status, if the data is active (and therefore can be used for reporting) and if it has actually been used for that is also included.</p> <p>Attributes:</p> Name Type Description <code>depth</code> <code>int</code> <p>Depth of the measurement.</p> <code>direction</code> <code>Decimal</code> <p>Direction of the measurement, useful for vector quantities.</p> <code>raw_value</code> <code>Decimal</code> <p>Original value of the measurement.</p> <code>raw_maximum</code> <code>Decimal</code> <p>Original maximum value of the measurement.</p> <code>raw_minimum</code> <code>Decimal</code> <p>Original minimum value of the measurement.</p> <code>raw_direction</code> <code>Decimal</code> <p>Original direction of the measurement.</p> <code>raw_depth</code> <code>int</code> <p>Original depth of the measurement.</p> <code>is_validated</code> <code>bool</code> <p>Flag to indicate if the measurement has been validated.</p> <code>is_active</code> <code>bool</code> <p>Flag to indicate if the measurement is active. An inactive measurement is not used for reporting</p>"},{"location":"reference/measurement/filters/#measurement.filters.Measurement-attributes","title":"Attributes","text":""},{"location":"reference/measurement/filters/#measurement.filters.Measurement.overwritten","title":"<code>overwritten: bool</code>  <code>property</code>","text":"<p>Indicates if any of the values associated to the entry have been overwritten.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if any raw field is different to the corresponding standard field.</p>"},{"location":"reference/measurement/filters/#measurement.filters.Measurement.raws","title":"<code>raws: tuple[str, ...]</code>  <code>property</code>","text":"<p>Return the raw fields of the measurement.</p> <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>tuple[str]: Tuple with the names of the raw fields of the measurement.</p>"},{"location":"reference/measurement/filters/#measurement.filters.Measurement-functions","title":"Functions","text":""},{"location":"reference/measurement/filters/#measurement.filters.Measurement.clean","title":"<code>clean()</code>","text":"<p>Check consistency of validation, reporting and backs-up values.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Check consistency of validation, reporting and backs-up values.\"\"\"\n    # Check consistency of validation\n    if not self.is_validated and not self.is_active:\n        raise ValidationError(\"Only validated entries can be declared as inactive.\")\n\n    # Backup values to raws, if needed\n    for r in self.raws:\n        value = getattr(self, r.removeprefix(\"raw_\"))\n        if value and not getattr(self, r):\n            setattr(self, r, value)\n</code></pre>"},{"location":"reference/measurement/filters/#measurement.filters.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/measurement/filters/#measurement.filters.Station-attributes","title":"Attributes","text":""},{"location":"reference/measurement/filters/#measurement.filters.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/measurement/filters/#measurement.filters.Station-functions","title":"Functions","text":""},{"location":"reference/measurement/filters/#measurement.filters.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/measurement/filters/#measurement.filters.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/measurement/filters/#measurement.filters.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/measurement/filters/#measurement.filters.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/measurement/filters/#measurement.filters.Variable-attributes","title":"Attributes","text":""},{"location":"reference/measurement/filters/#measurement.filters.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/measurement/filters/#measurement.filters.Variable-functions","title":"Functions","text":""},{"location":"reference/measurement/filters/#measurement.filters.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/measurement/filters/#measurement.filters.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/measurement/filters/#measurement.filters.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/measurement/filters/#measurement.filters-functions","title":"Functions","text":""},{"location":"reference/measurement/filters/#measurement.filters.get_date_range","title":"<code>get_date_range(station, variable)</code>","text":"<p>Get the date range covered by a chosen station and variable.</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Code for the chosen station</p> required <code>variable</code> <code>str</code> <p>Code for the chosen variable</p> required <p>Returns:</p> Type Description <code>tuple[str, str]</code> <p>tuple[str, str]: Start date, end date</p> Source code in <code>measurement/filters.py</code> <pre><code>def get_date_range(station: str, variable: str) -&gt; tuple[str, str]:\n    \"\"\"Get the date range covered by a chosen station and variable.\n\n    Args:\n        station (str): Code for the chosen station\n        variable (str): Code for the chosen variable\n\n    Returns:\n        tuple[str, str]: Start date, end date\n    \"\"\"\n    filter_vals = Measurement.objects.filter(\n        station__station_code=station,\n        variable__variable_code=variable,\n    ).aggregate(\n        first_date=Min(\"time\"),\n        last_date=Max(\"time\"),\n    )\n\n    first_date = to_local_time(filter_vals[\"first_date\"]).strftime(\"%Y-%m-%d\")\n    last_date = to_local_time(filter_vals[\"last_date\"]).strftime(\"%Y-%m-%d\")\n    return first_date, last_date\n</code></pre>"},{"location":"reference/measurement/filters/#measurement.filters.get_min_max","title":"<code>get_min_max(station, variable)</code>","text":"<p>Get the min and max of the data for a chosen station and variable.</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Code for the chosen station</p> required <code>variable</code> <code>str</code> <p>Code for the chosen variable</p> required <p>Returns:</p> Type Description <code>tuple[Decimal, Decimal]</code> <p>tuple[Decimal, Decimal]: Min value, max value</p> Source code in <code>measurement/filters.py</code> <pre><code>def get_min_max(\n    station, variable\n) -&gt; tuple[\n    Decimal,\n    Decimal,\n]:\n    \"\"\"Get the min and max of the data for a chosen station and variable.\n\n    Args:\n        station (str): Code for the chosen station\n        variable (str): Code for the chosen variable\n\n    Returns:\n        tuple[Decimal, Decimal]: Min value, max value\n    \"\"\"\n    filter_vals = Measurement.objects.filter(\n        station__station_code=station,\n        variable__variable_code=variable,\n    ).aggregate(\n        min_value=Min(\"minimum\"),\n        max_value=Max(\"maximum\"),\n    )\n\n    min_value = filter_vals[\"min_value\"]\n    max_value = filter_vals[\"max_value\"]\n\n    return min_value, max_value\n</code></pre>"},{"location":"reference/measurement/filters/#measurement.filters.get_station_options","title":"<code>get_station_options(station_codes)</code>","text":"<p>Get valid station options and default value based on permissions and data availability.</p> <p>Parameters:</p> Name Type Description Default <code>station_codes</code> <code>list[str]</code> <p>List of station codes based on permissions</p> required <p>Returns:</p> Type Description <code>tuple[list[dict[str, str]], str | None]</code> <p>tuple[list[dict], str]: Options for the station dropdown, default value</p> Source code in <code>measurement/filters.py</code> <pre><code>def get_station_options(\n    station_codes: list[str],\n) -&gt; tuple[list[dict[str, str]], str | None]:\n    \"\"\"Get valid station options and default value based on permissions and data\n    availability.\n\n    Args:\n        station_codes (list[str]): List of station codes based on permissions\n\n    Returns:\n        tuple[list[dict], str]: Options for the station dropdown, default value\n    \"\"\"\n    stations_with_measurements = Station.objects.filter(\n        ~Q(variables=\"\"), station_code__in=station_codes\n    ).values_list(\"station_code\", flat=True)\n\n    station_options = [\n        {\"label\": station_code, \"value\": station_code}\n        for station_code in stations_with_measurements\n    ]\n    station_value = station_options[0][\"value\"] if station_options else None\n    return station_options, station_value\n</code></pre>"},{"location":"reference/measurement/filters/#measurement.filters.get_variable_options","title":"<code>get_variable_options(station)</code>","text":"<p>Get valid variable options and default value based on the chosen station.</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Code for the chosen station</p> required <p>Returns:</p> Type Description <code>tuple[list[dict[str, str]], str | None]</code> <p>tuple[list[dict], str]: Options for the variable dropdown, default value</p> Source code in <code>measurement/filters.py</code> <pre><code>def get_variable_options(station: str) -&gt; tuple[list[dict[str, str]], str | None]:\n    \"\"\"Get valid variable options and default value based on the chosen station.\n\n    Args:\n        station (str): Code for the chosen station\n\n    Returns:\n        tuple[list[dict], str]: Options for the variable dropdown, default value\n    \"\"\"\n    variable_codes = Station.objects.get(station_code=station).variables_list\n    variable_dicts = Variable.objects.filter(variable_code__in=variable_codes).values(\n        \"name\", \"variable_code\"\n    )\n\n    variable_options = [\n        {\n            \"label\": variable[\"name\"],\n            \"value\": variable[\"variable_code\"],\n        }\n        for variable in variable_dicts\n    ]\n\n    variable_value = variable_options[0][\"value\"] if variable_options else None\n    return variable_options, variable_value\n</code></pre>"},{"location":"reference/measurement/models/","title":"models","text":""},{"location":"reference/measurement/models/#measurement.models","title":"<code>measurement.models</code>","text":""},{"location":"reference/measurement/models/#measurement.models-attributes","title":"Attributes","text":""},{"location":"reference/measurement/models/#measurement.models.MEASUREMENTS","title":"<code>MEASUREMENTS: list[str] = []</code>  <code>module-attribute</code>","text":"<p>Available measurement variables.</p>"},{"location":"reference/measurement/models/#measurement.models-classes","title":"Classes","text":""},{"location":"reference/measurement/models/#measurement.models.DataImport","title":"<code>DataImport</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Model to store the data imports.</p> <p>This model stores the data imports, which are files with data that are uploaded to the system. The data is then processed asynchronously and stored in the database.</p> <p>Attributes:</p> Name Type Description <code>station</code> <code>ForeignKey</code> <p>Station to which the data belongs.</p> <code>format</code> <code>ForeignKey</code> <p>Format of the data.</p> <code>rawfile</code> <code>FileField</code> <p>File with the data to be imported.</p> <code>date</code> <code>DateTimeField</code> <p>Date of submission of the data.</p> <code>start_date</code> <code>DateTimeField</code> <p>Start date of the data.</p> <code>end_date</code> <code>DateTimeField</code> <p>End date of the data.</p> <code>records</code> <code>IntegerField</code> <p>Number of records in the data.</p> <code>observations</code> <code>TextField</code> <p>Notes or observations about the data.</p> <code>status</code> <code>TextField</code> <p>Status of the import.</p> <code>log</code> <code>TextField</code> <p>Log of the data ingestion, indicating any errors.</p> <code>reprocess</code> <code>BooleanField</code> <p>If checked, the data will be reprocessed.</p>"},{"location":"reference/measurement/models/#measurement.models.DataImport-functions","title":"Functions","text":""},{"location":"reference/measurement/models/#measurement.models.DataImport.clean","title":"<code>clean()</code>","text":"<p>Validate information and uploads the measurement data.</p> Source code in <code>importing/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate information and uploads the measurement data.\"\"\"\n    tz = self.station.timezone\n    if not tz:\n        raise ValidationError(\"Station must have a timezone set.\")\n\n    # If the file has changed, we reprocess the data\n    if self.pk and self.rawfile != self.__class__.objects.get(pk=self.pk).rawfile:\n        self.reprocess = True\n\n    if self.reprocess:\n        self.status = \"N\"\n        self.reprocess = False\n</code></pre>"},{"location":"reference/measurement/models/#measurement.models.Measurement","title":"<code>Measurement</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Class to store the measurements and their validation status.</p> <p>This class holds the value of a given variable and station at a specific time, as well as auxiliary information such as maximum and minimum values, depth and direction, for vector quantities. All of these have a <code>raw</code> version where a backup of the original data is kept, should this change at any point.</p> <p>Flags to monitor its validation status, if the data is active (and therefore can be used for reporting) and if it has actually been used for that is also included.</p> <p>Attributes:</p> Name Type Description <code>depth</code> <code>int</code> <p>Depth of the measurement.</p> <code>direction</code> <code>Decimal</code> <p>Direction of the measurement, useful for vector quantities.</p> <code>raw_value</code> <code>Decimal</code> <p>Original value of the measurement.</p> <code>raw_maximum</code> <code>Decimal</code> <p>Original maximum value of the measurement.</p> <code>raw_minimum</code> <code>Decimal</code> <p>Original minimum value of the measurement.</p> <code>raw_direction</code> <code>Decimal</code> <p>Original direction of the measurement.</p> <code>raw_depth</code> <code>int</code> <p>Original depth of the measurement.</p> <code>is_validated</code> <code>bool</code> <p>Flag to indicate if the measurement has been validated.</p> <code>is_active</code> <code>bool</code> <p>Flag to indicate if the measurement is active. An inactive measurement is not used for reporting</p>"},{"location":"reference/measurement/models/#measurement.models.Measurement-attributes","title":"Attributes","text":""},{"location":"reference/measurement/models/#measurement.models.Measurement.overwritten","title":"<code>overwritten: bool</code>  <code>property</code>","text":"<p>Indicates if any of the values associated to the entry have been overwritten.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if any raw field is different to the corresponding standard field.</p>"},{"location":"reference/measurement/models/#measurement.models.Measurement.raws","title":"<code>raws: tuple[str, ...]</code>  <code>property</code>","text":"<p>Return the raw fields of the measurement.</p> <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>tuple[str]: Tuple with the names of the raw fields of the measurement.</p>"},{"location":"reference/measurement/models/#measurement.models.Measurement-functions","title":"Functions","text":""},{"location":"reference/measurement/models/#measurement.models.Measurement.clean","title":"<code>clean()</code>","text":"<p>Check consistency of validation, reporting and backs-up values.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Check consistency of validation, reporting and backs-up values.\"\"\"\n    # Check consistency of validation\n    if not self.is_validated and not self.is_active:\n        raise ValidationError(\"Only validated entries can be declared as inactive.\")\n\n    # Backup values to raws, if needed\n    for r in self.raws:\n        value = getattr(self, r.removeprefix(\"raw_\"))\n        if value and not getattr(self, r):\n            setattr(self, r, value)\n</code></pre>"},{"location":"reference/measurement/models/#measurement.models.MeasurementBase","title":"<code>MeasurementBase</code>","text":"<p>               Bases: <code>TimescaleModel</code></p> <p>Base class for all the measurement related entries.</p> <p>It contains the barebone attributes that any measurement entry will likely need, although this is enforced only for station, variable and value. Maximum and minimum are very likely to be present in most cases, but might not be there in some occasions, therefore the possibility of nulling them.</p> <p>Attributes:</p> Name Type Description <code>time</code> <code>TimescaleDateTimeField</code> <p>Time of the measurement.</p> <code>station</code> <code>Station</code> <p>Station this measurement belongs to.</p> <code>variable</code> <code>Variable</code> <p>Variable being measured.</p> <code>value</code> <code>Decimal</code> <p>Value of the measurement.</p> <code>maximum</code> <code>Decimal</code> <p>Maximum value of the measurement. Mostly useful for reports or when the measurement represents an average over time.</p> <code>minimum</code> <code>Decimal</code> <p>Minimum value of the measurement. Mostly useful for reports or when the measurement represents an average over time.</p>"},{"location":"reference/measurement/models/#measurement.models.MeasurementBase-functions","title":"Functions","text":""},{"location":"reference/measurement/models/#measurement.models.MeasurementBase.set_model_permissions","title":"<code>set_model_permissions()</code>  <code>classmethod</code>","text":"<p>Set model-level add permissions.</p> Source code in <code>measurement/models.py</code> <pre><code>@classmethod\ndef set_model_permissions(cls) -&gt; None:\n    \"\"\"Set model-level add permissions.\"\"\"\n    apply_add_permissions_to_standard_group(cls)\n</code></pre>"},{"location":"reference/measurement/models/#measurement.models.Report","title":"<code>Report</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Holds the different reporting data.</p> <p>It also keeps track of which data has already been used when creating the reports.</p> <p>Attributes:</p> Name Type Description <code>report_type</code> <code>str</code> <p>Type of report. It can be hourly, daily or monthly.</p> <code>completeness</code> <code>Decimal</code> <p>Completeness of the report. Eg. a daily report with 24 hourly measurements would have a completeness of 100%.</p>"},{"location":"reference/measurement/models/#measurement.models.Report-functions","title":"Functions","text":""},{"location":"reference/measurement/models/#measurement.models.Report.clean","title":"<code>clean()</code>","text":"<p>Validate that the report type and use of the data is consistent.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate that the report type and use of the data is consistent.\"\"\"\n    if self.report_type == ReportType.HOURLY:\n        self.time = self.time.replace(minute=0, second=0, microsecond=0)\n    elif self.report_type == ReportType.DAILY:\n        self.time = self.time.replace(hour=0, minute=0, second=0, microsecond=0)\n    elif self.report_type == ReportType.MONTLY:\n        self.time = self.time.replace(\n            day=1, hour=0, minute=0, second=0, microsecond=0\n        )\n</code></pre>"},{"location":"reference/measurement/models/#measurement.models.ReportType","title":"<code>ReportType</code>","text":"<p>               Bases: <code>TextChoices</code></p>"},{"location":"reference/measurement/models/#measurement.models.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/measurement/models/#measurement.models.Station-attributes","title":"Attributes","text":""},{"location":"reference/measurement/models/#measurement.models.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/measurement/models/#measurement.models.Station-functions","title":"Functions","text":""},{"location":"reference/measurement/models/#measurement.models.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/measurement/models/#measurement.models.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/measurement/models/#measurement.models.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/measurement/models/#measurement.models.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/measurement/models/#measurement.models.Variable-attributes","title":"Attributes","text":""},{"location":"reference/measurement/models/#measurement.models.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/measurement/models/#measurement.models.Variable-functions","title":"Functions","text":""},{"location":"reference/measurement/models/#measurement.models.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/measurement/models/#measurement.models.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/measurement/models/#measurement.models.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/measurement/models/#measurement.models-functions","title":"Functions","text":""},{"location":"reference/measurement/models/#measurement.models.apply_add_permissions_to_standard_group","title":"<code>apply_add_permissions_to_standard_group(model)</code>","text":"<p>Apply model-level add permissions to the standard user group.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Model</code> <p>Model to apply permissions to.</p> required Source code in <code>management/models.py</code> <pre><code>def apply_add_permissions_to_standard_group(model):\n    \"\"\"Apply model-level add permissions to the standard user group.\n\n    Args:\n        model (Model): Model to apply permissions to.\n\n    \"\"\"\n    delete, change, view, add = _get_perm_codenames(model)\n    standard_group = Group.objects.get(name=\"Standard\")\n    content_type = ContentType.objects.get_for_model(model)\n    permission, created = Permission.objects.get_or_create(\n        codename=add, content_type=content_type\n    )\n    standard_group.permissions.add(permission)\n</code></pre>"},{"location":"reference/measurement/reporting/","title":"reporting","text":""},{"location":"reference/measurement/reporting/#measurement.reporting","title":"<code>measurement.reporting</code>","text":""},{"location":"reference/measurement/reporting/#measurement.reporting-classes","title":"Classes","text":""},{"location":"reference/measurement/reporting/#measurement.reporting.DataImport","title":"<code>DataImport</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Model to store the data imports.</p> <p>This model stores the data imports, which are files with data that are uploaded to the system. The data is then processed asynchronously and stored in the database.</p> <p>Attributes:</p> Name Type Description <code>station</code> <code>ForeignKey</code> <p>Station to which the data belongs.</p> <code>format</code> <code>ForeignKey</code> <p>Format of the data.</p> <code>rawfile</code> <code>FileField</code> <p>File with the data to be imported.</p> <code>date</code> <code>DateTimeField</code> <p>Date of submission of the data.</p> <code>start_date</code> <code>DateTimeField</code> <p>Start date of the data.</p> <code>end_date</code> <code>DateTimeField</code> <p>End date of the data.</p> <code>records</code> <code>IntegerField</code> <p>Number of records in the data.</p> <code>observations</code> <code>TextField</code> <p>Notes or observations about the data.</p> <code>status</code> <code>TextField</code> <p>Status of the import.</p> <code>log</code> <code>TextField</code> <p>Log of the data ingestion, indicating any errors.</p> <code>reprocess</code> <code>BooleanField</code> <p>If checked, the data will be reprocessed.</p>"},{"location":"reference/measurement/reporting/#measurement.reporting.DataImport-functions","title":"Functions","text":""},{"location":"reference/measurement/reporting/#measurement.reporting.DataImport.clean","title":"<code>clean()</code>","text":"<p>Validate information and uploads the measurement data.</p> Source code in <code>importing/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate information and uploads the measurement data.\"\"\"\n    tz = self.station.timezone\n    if not tz:\n        raise ValidationError(\"Station must have a timezone set.\")\n\n    # If the file has changed, we reprocess the data\n    if self.pk and self.rawfile != self.__class__.objects.get(pk=self.pk).rawfile:\n        self.reprocess = True\n\n    if self.reprocess:\n        self.status = \"N\"\n        self.reprocess = False\n</code></pre>"},{"location":"reference/measurement/reporting/#measurement.reporting.Measurement","title":"<code>Measurement</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Class to store the measurements and their validation status.</p> <p>This class holds the value of a given variable and station at a specific time, as well as auxiliary information such as maximum and minimum values, depth and direction, for vector quantities. All of these have a <code>raw</code> version where a backup of the original data is kept, should this change at any point.</p> <p>Flags to monitor its validation status, if the data is active (and therefore can be used for reporting) and if it has actually been used for that is also included.</p> <p>Attributes:</p> Name Type Description <code>depth</code> <code>int</code> <p>Depth of the measurement.</p> <code>direction</code> <code>Decimal</code> <p>Direction of the measurement, useful for vector quantities.</p> <code>raw_value</code> <code>Decimal</code> <p>Original value of the measurement.</p> <code>raw_maximum</code> <code>Decimal</code> <p>Original maximum value of the measurement.</p> <code>raw_minimum</code> <code>Decimal</code> <p>Original minimum value of the measurement.</p> <code>raw_direction</code> <code>Decimal</code> <p>Original direction of the measurement.</p> <code>raw_depth</code> <code>int</code> <p>Original depth of the measurement.</p> <code>is_validated</code> <code>bool</code> <p>Flag to indicate if the measurement has been validated.</p> <code>is_active</code> <code>bool</code> <p>Flag to indicate if the measurement is active. An inactive measurement is not used for reporting</p>"},{"location":"reference/measurement/reporting/#measurement.reporting.Measurement-attributes","title":"Attributes","text":""},{"location":"reference/measurement/reporting/#measurement.reporting.Measurement.overwritten","title":"<code>overwritten: bool</code>  <code>property</code>","text":"<p>Indicates if any of the values associated to the entry have been overwritten.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if any raw field is different to the corresponding standard field.</p>"},{"location":"reference/measurement/reporting/#measurement.reporting.Measurement.raws","title":"<code>raws: tuple[str, ...]</code>  <code>property</code>","text":"<p>Return the raw fields of the measurement.</p> <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>tuple[str]: Tuple with the names of the raw fields of the measurement.</p>"},{"location":"reference/measurement/reporting/#measurement.reporting.Measurement-functions","title":"Functions","text":""},{"location":"reference/measurement/reporting/#measurement.reporting.Measurement.clean","title":"<code>clean()</code>","text":"<p>Check consistency of validation, reporting and backs-up values.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Check consistency of validation, reporting and backs-up values.\"\"\"\n    # Check consistency of validation\n    if not self.is_validated and not self.is_active:\n        raise ValidationError(\"Only validated entries can be declared as inactive.\")\n\n    # Backup values to raws, if needed\n    for r in self.raws:\n        value = getattr(self, r.removeprefix(\"raw_\"))\n        if value and not getattr(self, r):\n            setattr(self, r, value)\n</code></pre>"},{"location":"reference/measurement/reporting/#measurement.reporting.Report","title":"<code>Report</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Holds the different reporting data.</p> <p>It also keeps track of which data has already been used when creating the reports.</p> <p>Attributes:</p> Name Type Description <code>report_type</code> <code>str</code> <p>Type of report. It can be hourly, daily or monthly.</p> <code>completeness</code> <code>Decimal</code> <p>Completeness of the report. Eg. a daily report with 24 hourly measurements would have a completeness of 100%.</p>"},{"location":"reference/measurement/reporting/#measurement.reporting.Report-functions","title":"Functions","text":""},{"location":"reference/measurement/reporting/#measurement.reporting.Report.clean","title":"<code>clean()</code>","text":"<p>Validate that the report type and use of the data is consistent.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate that the report type and use of the data is consistent.\"\"\"\n    if self.report_type == ReportType.HOURLY:\n        self.time = self.time.replace(minute=0, second=0, microsecond=0)\n    elif self.report_type == ReportType.DAILY:\n        self.time = self.time.replace(hour=0, minute=0, second=0, microsecond=0)\n    elif self.report_type == ReportType.MONTLY:\n        self.time = self.time.replace(\n            day=1, hour=0, minute=0, second=0, microsecond=0\n        )\n</code></pre>"},{"location":"reference/measurement/reporting/#measurement.reporting.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/measurement/reporting/#measurement.reporting.Station-attributes","title":"Attributes","text":""},{"location":"reference/measurement/reporting/#measurement.reporting.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/measurement/reporting/#measurement.reporting.Station-functions","title":"Functions","text":""},{"location":"reference/measurement/reporting/#measurement.reporting.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/measurement/reporting/#measurement.reporting.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/measurement/reporting/#measurement.reporting.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/measurement/reporting/#measurement.reporting.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/measurement/reporting/#measurement.reporting.Variable-attributes","title":"Attributes","text":""},{"location":"reference/measurement/reporting/#measurement.reporting.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/measurement/reporting/#measurement.reporting.Variable-functions","title":"Functions","text":""},{"location":"reference/measurement/reporting/#measurement.reporting.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/measurement/reporting/#measurement.reporting.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/measurement/reporting/#measurement.reporting.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/measurement/reporting/#measurement.reporting-functions","title":"Functions","text":""},{"location":"reference/measurement/reporting/#measurement.reporting.calculate_reports","title":"<code>calculate_reports(data, station, variable, operation)</code>","text":"<p>Calculates the report for the chosen days.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The dataframe with the data.</p> required <code>station</code> <code>str</code> <p>The name of the station.</p> required <code>variable</code> <code>str</code> <p>The name of the variable.</p> required <code>operation</code> <code>str</code> <p>Aggregation operation to perform on the data when calculating the report.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dataframe with the hourly, daily and monthly reports.</p> Source code in <code>measurement/reporting.py</code> <pre><code>def calculate_reports(\n    data: pd.DataFrame, station: str, variable: str, operation: str\n) -&gt; pd.DataFrame:\n    \"\"\"Calculates the report for the chosen days.\n\n    Args:\n        data: The dataframe with the data.\n        station: The name of the station.\n        variable: The name of the variable.\n        operation: Aggregation operation to perform on the data when calculating the\n            report.\n\n    Returns:\n        A dataframe with the hourly, daily and monthly reports.\n    \"\"\"\n    cols = [\"time\", \"value\"]\n    if \"maximum\" in data.columns:\n        cols.append(\"maximum\")\n    if \"minimum\" in data.columns:\n        cols.append(\"minimum\")\n\n    # Calculate the reports\n    hourly = data[cols].resample(\"h\", on=\"time\").agg(operation)\n    daily = hourly.resample(\"D\").agg(operation)\n    monthly = daily.resample(\"MS\").agg(operation)\n\n    # Get the right data_import for each period. We use the mode to get the most common\n    # data_import value in the period.\n    def mode(x: pd.Series) -&gt; str | None:\n        modes = x.mode()\n        return modes[0] if not modes.empty else None\n\n    cols2 = [\"time\", \"data_import_id\"]\n    hourly[\"data_import_id\"] = data[cols2].resample(\"h\", on=\"time\").agg(mode)\n    daily[\"data_import_id\"] = data[cols2].resample(\"D\", on=\"time\").agg(mode)\n    monthly[\"data_import_id\"] = data[cols2].resample(\"MS\", on=\"time\").agg(mode)\n\n    # Put everything together\n    hourly[\"report_type\"] = \"hourly\"\n    daily[\"report_type\"] = \"daily\"\n    monthly[\"report_type\"] = \"monthly\"\n\n    report = pd.concat([hourly, daily, monthly])\n    report[\"station\"] = station\n    report[\"variable\"] = variable\n\n    return report\n</code></pre>"},{"location":"reference/measurement/reporting/#measurement.reporting.get_data_to_report","title":"<code>get_data_to_report(station, variable, start_time, end_time)</code>","text":"<p>Retrieves data to be reported about.</p> <p>It enforces to retrieve only active measurements and to use the station timezone.</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Station of interest.</p> required <code>variable</code> <code>str</code> <p>Variable of interest.</p> required <code>start_time</code> <code>datetime</code> <p>Start time.</p> required <code>end_time</code> <code>datetime</code> <p>End time.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dataframe with the data to report about.</p> Source code in <code>measurement/reporting.py</code> <pre><code>def get_data_to_report(\n    station: str,\n    variable: str,\n    start_time: datetime,\n    end_time: datetime,\n) -&gt; pd.DataFrame:\n    \"\"\"Retrieves data to be reported about.\n\n    It enforces to retrieve only active measurements and to use the station timezone.\n\n    Args:\n        station: Station of interest.\n        variable: Variable of interest.\n        start_time: Start time.\n        end_time: End time.\n\n    Returns:\n        A dataframe with the data to report about.\n    \"\"\"\n\n    return pd.DataFrame.from_records(\n        Measurement.objects.filter(\n            station__station_code=station,\n            variable__variable_code=variable,\n            time__date__range=(start_time.date(), end_time.date()),\n            is_active=True,\n        ).values()\n    )\n</code></pre>"},{"location":"reference/measurement/reporting/#measurement.reporting.get_report_data_from_db","title":"<code>get_report_data_from_db(station, variable, start_time, end_time, report_type, whole_months=True)</code>  <code>cached</code>","text":"<p>Retrieves the report data from the database.</p> <p>Time is set to the station timezone and the time range is inclusive of both start and end times.</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Station of interest.</p> required <code>variable</code> <code>str</code> <p>Variable of interest.</p> required <code>start_time</code> <code>str</code> <p>Start time.</p> required <code>end_time</code> <code>str</code> <p>End time.</p> required <code>report_type</code> <code>str</code> <p>Type of report to retrieve.</p> required <code>whole_months</code> <code>bool</code> <p>Whether to cover whole months or not.</p> <code>True</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dataframe with the report data.</p> Source code in <code>measurement/reporting.py</code> <pre><code>@lru_cache(1)\ndef get_report_data_from_db(\n    station: str,\n    variable: str,\n    start_time: str,\n    end_time: str,\n    report_type: str,\n    whole_months: bool = True,\n) -&gt; pd.DataFrame:\n    \"\"\"Retrieves the report data from the database.\n\n    Time is set to the station timezone and the time range is inclusive of both\n    start and end times.\n\n    Args:\n        station: Station of interest.\n        variable: Variable of interest.\n        start_time: Start time.\n        end_time: End time.\n        report_type: Type of report to retrieve.\n        whole_months: Whether to cover whole months or not.\n\n    Returns:\n        A dataframe with the report data.\n    \"\"\"\n    start_time_, end_time_ = reformat_dates(start_time, end_time, whole_months)\n\n    if report_type == \"measurement\":\n        data = pd.DataFrame.from_records(\n            Measurement.objects.filter(\n                station__station_code=station,\n                variable__variable_code=variable,\n                time__date__range=(start_time_.date(), end_time_.date()),\n            ).values()\n        )\n        raw_cols = [col for col in data.columns if col.startswith(\"raw_\")]\n        normal = [col.strip(\"raw_\") for col in raw_cols]\n        data = data.drop(columns=normal).rename(columns=dict(zip(raw_cols, normal)))\n\n    elif report_type == \"validated\":\n        data = pd.DataFrame.from_records(\n            Measurement.objects.filter(\n                station__station_code=station,\n                variable__variable_code=variable,\n                time__date__range=(start_time_.date(), end_time_.date()),\n                is_validated=True,\n                is_active=True,\n            ).values()\n        )\n        raw_cols = [col for col in data.columns if col.startswith(\"raw_\")]\n        data = data.drop(columns=raw_cols)\n\n    else:\n        data = pd.DataFrame.from_records(\n            Report.objects.filter(\n                station__station_code=station,\n                variable__variable_code=variable,\n                time__date__range=(start_time_.date(), end_time_.date()),\n                report_type=report_type,\n            ).values()\n        )\n\n    data = data.rename(columns={\"station_id\": \"station\", \"variable_id\": \"variable\"})\n\n    if data.empty:\n        return data\n\n    tz = timezone.get_current_timezone()\n    data[\"time\"] = data[\"time\"].dt.tz_convert(tz)\n    return data.sort_values(\"time\")\n</code></pre>"},{"location":"reference/measurement/reporting/#measurement.reporting.launch_reports_calculation","title":"<code>launch_reports_calculation(station, variable, start_time, end_time)</code>","text":"<p>Launches the calculation of the reports.</p> <p>Time is set to the station timezone and the time range is inclusive of both start and end times.</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Station of interest.</p> required <code>variable</code> <code>str</code> <p>Variable of interest.</p> required <code>start_time</code> <code>str</code> <p>Start time.</p> required <code>end_time</code> <code>str</code> <p>End time.</p> required Source code in <code>measurement/reporting.py</code> <pre><code>def launch_reports_calculation(\n    station: str,\n    variable: str,\n    start_time: str,\n    end_time: str,\n) -&gt; None:\n    \"\"\"Launches the calculation of the reports.\n\n    Time is set to the station timezone and the time range is inclusive of both\n    start and end times.\n\n    Args:\n        station: Station of interest.\n        variable: Variable of interest.\n        start_time: Start time.\n        end_time: End time.\n    \"\"\"\n    operation = (\n        \"sum\" if Variable.objects.get(variable_code=variable).is_cumulative else \"mean\"\n    )\n\n    start_time_, end_time_ = reformat_dates(start_time, end_time)\n    data = get_data_to_report(station, variable, start_time_, end_time_)\n    report = calculate_reports(data, station, variable, operation)\n    remove_report_data_in_range(station, variable, start_time_, end_time_)\n    save_report_data(report)\n</code></pre>"},{"location":"reference/measurement/reporting/#measurement.reporting.reformat_dates","title":"<code>reformat_dates(start_time, end_time, whole_months=True)</code>","text":"<p>Reformat dates so they have the right timezone and cover full days.</p> <p>The start date is always the first day of the first month and the end date is the last day of the last month. Times are set to 00:00:00 and 23:59:59, respectively, and the timezone is set to the station timezone.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>str</code> <p>Start time.</p> required <code>end_time</code> <code>str</code> <p>End time.</p> required <code>whole_months</code> <code>bool</code> <p>Whether to cover whole months or not.</p> <code>True</code> <p>Returns:</p> Type Description <code>tuple[datetime, datetime]</code> <p>A series with the dates to be validated.</p> Source code in <code>measurement/reporting.py</code> <pre><code>def reformat_dates(\n    start_time: str,\n    end_time: str,\n    whole_months: bool = True,\n) -&gt; tuple[datetime, datetime]:\n    \"\"\"Reformat dates so they have the right timezone and cover full days.\n\n    The start date is always the first day of the first month and the end date is the\n    last day of the last month. Times are set to 00:00:00 and 23:59:59, respectively,\n    and the timezone is set to the station timezone.\n\n    Args:\n        start_time: Start time.\n        end_time: End time.\n        whole_months: Whether to cover whole months or not.\n\n    Returns:\n        A series with the dates to be validated.\n    \"\"\"\n    tz = timezone.get_current_timezone()\n\n    if whole_months:\n        start_time_ = datetime.strptime(start_time, \"%Y-%m-%d\").replace(\n            day=1, tzinfo=tz\n        )\n        end_time_ = (\n            datetime.strptime(end_time, \"%Y-%m-%d\").replace(day=1)\n            + pd.DateOffset(months=1)\n            - pd.DateOffset(seconds=1)\n        )\n        end_time_ = datetime.fromtimestamp(end_time_.timestamp()).astimezone(tz)\n    else:\n        start_time_ = datetime.strptime(start_time, \"%Y-%m-%d\").replace(tzinfo=tz)\n        end_time_ = (\n            datetime.strptime(end_time, \"%Y-%m-%d\")\n            + pd.DateOffset(days=1)\n            - pd.DateOffset(seconds=1)\n        )\n        end_time_ = datetime.fromtimestamp(end_time_.timestamp()).astimezone(tz)\n    return start_time_, end_time_\n</code></pre>"},{"location":"reference/measurement/reporting/#measurement.reporting.remove_report_data_in_range","title":"<code>remove_report_data_in_range(station, variable, start_time, end_time)</code>","text":"<p>Removes data in the range from the database.</p> <p>It enforces to use the station timezone.</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Station of interest.</p> required <code>variable</code> <code>str</code> <p>Variable of interest.</p> required <code>start_time</code> <code>datetime</code> <p>Start time.</p> required <code>end_time</code> <code>datetime</code> <p>End time.</p> required Source code in <code>measurement/reporting.py</code> <pre><code>def remove_report_data_in_range(\n    station: str,\n    variable: str,\n    start_time: datetime,\n    end_time: datetime,\n) -&gt; None:\n    \"\"\"Removes data in the range from the database.\n\n    It enforces to use the station timezone.\n\n    Args:\n        station: Station of interest.\n        variable: Variable of interest.\n        start_time: Start time.\n        end_time: End time.\n    \"\"\"\n\n    Report.objects.filter(\n        station__station_code=station,\n        variable__variable_code=variable,\n        time__date__range=(start_time.date(), end_time.date()),\n    ).delete()\n</code></pre>"},{"location":"reference/measurement/reporting/#measurement.reporting.save_report_data","title":"<code>save_report_data(data)</code>","text":"<p>Saves the report data into the database.</p> <p>Before saving, the function removes maximum and minimum columns if they have all NaN and removes rows with NaN in the value column.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The dataframe with the report data.</p> required Source code in <code>measurement/reporting.py</code> <pre><code>def save_report_data(data: pd.DataFrame) -&gt; None:\n    \"\"\"Saves the report data into the database.\n\n    Before saving, the function removes maximum and minimum columns if they have all NaN\n    and removes rows with NaN in the value column.\n\n    Args:\n        data: The dataframe with the report data.\n    \"\"\"\n    data_ = data.dropna(axis=1, how=\"all\").dropna(axis=0, subset=[\"value\"])\n    data_import_avail = \"data_import_id\" in data_.columns\n    Report.objects.bulk_create(\n        [\n            Report(\n                data_import=DataImport.objects.get(pk=row[\"data_import_id\"])\n                if data_import_avail and not pd.isna(row[\"data_import_id\"])\n                else None,\n                station=Station.objects.get(station_code=row[\"station\"]),\n                variable=Variable.objects.get(variable_code=row[\"variable\"]),\n                time=time,\n                value=row[\"value\"],\n                maximum=row.get(\"maximum\", None),\n                minimum=row.get(\"minimum\", None),\n                report_type=row[\"report_type\"],\n            )\n            for time, row in data_.iterrows()\n        ]\n    )\n</code></pre>"},{"location":"reference/measurement/urls/","title":"urls","text":""},{"location":"reference/measurement/urls/#measurement.urls","title":"<code>measurement.urls</code>","text":""},{"location":"reference/measurement/urls/#measurement.urls-attributes","title":"Attributes","text":""},{"location":"reference/measurement/urls/#measurement.urls.app_name","title":"<code>app_name = 'measurement'</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/urls/#measurement.urls.urlpatterns","title":"<code>urlpatterns = format_suffix_patterns(urlpatterns)</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/validation/","title":"validation","text":""},{"location":"reference/measurement/validation/#measurement.validation","title":"<code>measurement.validation</code>","text":""},{"location":"reference/measurement/validation/#measurement.validation-classes","title":"Classes","text":""},{"location":"reference/measurement/validation/#measurement.validation.Measurement","title":"<code>Measurement</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Class to store the measurements and their validation status.</p> <p>This class holds the value of a given variable and station at a specific time, as well as auxiliary information such as maximum and minimum values, depth and direction, for vector quantities. All of these have a <code>raw</code> version where a backup of the original data is kept, should this change at any point.</p> <p>Flags to monitor its validation status, if the data is active (and therefore can be used for reporting) and if it has actually been used for that is also included.</p> <p>Attributes:</p> Name Type Description <code>depth</code> <code>int</code> <p>Depth of the measurement.</p> <code>direction</code> <code>Decimal</code> <p>Direction of the measurement, useful for vector quantities.</p> <code>raw_value</code> <code>Decimal</code> <p>Original value of the measurement.</p> <code>raw_maximum</code> <code>Decimal</code> <p>Original maximum value of the measurement.</p> <code>raw_minimum</code> <code>Decimal</code> <p>Original minimum value of the measurement.</p> <code>raw_direction</code> <code>Decimal</code> <p>Original direction of the measurement.</p> <code>raw_depth</code> <code>int</code> <p>Original depth of the measurement.</p> <code>is_validated</code> <code>bool</code> <p>Flag to indicate if the measurement has been validated.</p> <code>is_active</code> <code>bool</code> <p>Flag to indicate if the measurement is active. An inactive measurement is not used for reporting</p>"},{"location":"reference/measurement/validation/#measurement.validation.Measurement-attributes","title":"Attributes","text":""},{"location":"reference/measurement/validation/#measurement.validation.Measurement.overwritten","title":"<code>overwritten: bool</code>  <code>property</code>","text":"<p>Indicates if any of the values associated to the entry have been overwritten.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if any raw field is different to the corresponding standard field.</p>"},{"location":"reference/measurement/validation/#measurement.validation.Measurement.raws","title":"<code>raws: tuple[str, ...]</code>  <code>property</code>","text":"<p>Return the raw fields of the measurement.</p> <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>tuple[str]: Tuple with the names of the raw fields of the measurement.</p>"},{"location":"reference/measurement/validation/#measurement.validation.Measurement-functions","title":"Functions","text":""},{"location":"reference/measurement/validation/#measurement.validation.Measurement.clean","title":"<code>clean()</code>","text":"<p>Check consistency of validation, reporting and backs-up values.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Check consistency of validation, reporting and backs-up values.\"\"\"\n    # Check consistency of validation\n    if not self.is_validated and not self.is_active:\n        raise ValidationError(\"Only validated entries can be declared as inactive.\")\n\n    # Backup values to raws, if needed\n    for r in self.raws:\n        value = getattr(self, r.removeprefix(\"raw_\"))\n        if value and not getattr(self, r):\n            setattr(self, r, value)\n</code></pre>"},{"location":"reference/measurement/validation/#measurement.validation.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/measurement/validation/#measurement.validation.Variable-attributes","title":"Attributes","text":""},{"location":"reference/measurement/validation/#measurement.validation.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/measurement/validation/#measurement.validation.Variable-functions","title":"Functions","text":""},{"location":"reference/measurement/validation/#measurement.validation.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/measurement/validation/#measurement.validation.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/measurement/validation/#measurement.validation.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/measurement/validation/#measurement.validation-functions","title":"Functions","text":""},{"location":"reference/measurement/validation/#measurement.validation.flag_suspicious_daily_count","title":"<code>flag_suspicious_daily_count(data, null_limit)</code>","text":"<p>Finds suspicious records count for daily data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Series</code> <p>The count of records per day.</p> required <code>null_limit</code> <code>Decimal</code> <p>The percentage of null data allowed.</p> required <p>Returns:     A dataframe with the suspicious data.</p> Source code in <code>measurement/validation.py</code> <pre><code>def flag_suspicious_daily_count(data: pd.Series, null_limit: Decimal) -&gt; pd.DataFrame:\n    \"\"\"Finds suspicious records count for daily data.\n\n    Args:\n        data: The count of records per day.\n        null_limit: The percentage of null data allowed.\n    Returns:\n        A dataframe with the suspicious data.\n    \"\"\"\n    expected_data_count = data.mode().iloc[0]\n\n    suspicious = pd.DataFrame(index=data.index)\n    suspicious[\"daily_count_fraction\"] = (data / expected_data_count).round(2)\n\n    suspicious[\"suspicious_daily_count\"] = (\n        suspicious[\"daily_count_fraction\"] &lt; 1 - float(null_limit) / 100\n    ) | (suspicious[\"daily_count_fraction\"] &gt; 1)\n\n    return suspicious\n</code></pre>"},{"location":"reference/measurement/validation/#measurement.validation.flag_suspicious_data","title":"<code>flag_suspicious_data(data, maximum, minimum, allowed_difference)</code>","text":"<p>Finds suspicious data in the database.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The dataframe with the data to be evaluated.</p> required <code>maximum</code> <code>Decimal</code> <p>The maximum allowed value.</p> required <code>minimum</code> <code>Decimal</code> <p>The minimum allowed value.</p> required <code>allowed_difference</code> <code>Decimal</code> <p>The allowed difference between the measurements.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dataframe with the suspicious data.</p> Source code in <code>measurement/validation.py</code> <pre><code>def flag_suspicious_data(\n    data: pd.DataFrame,\n    maximum: Decimal,\n    minimum: Decimal,\n    allowed_difference: Decimal,\n) -&gt; pd.DataFrame:\n    \"\"\"Finds suspicious data in the database.\n\n    Args:\n        data: The dataframe with the data to be evaluated.\n        maximum: The maximum allowed value.\n        minimum: The minimum allowed value.\n        allowed_difference: The allowed difference between the measurements.\n\n    Returns:\n        A dataframe with the suspicious data.\n    \"\"\"\n    time_lapse = flag_time_lapse_status(data)\n    value_difference = flag_value_difference(data, allowed_difference)\n    value_limits = flag_value_limits(data, maximum, minimum)\n    return pd.concat([time_lapse, value_difference, value_limits], axis=1)\n</code></pre>"},{"location":"reference/measurement/validation/#measurement.validation.flag_time_lapse_status","title":"<code>flag_time_lapse_status(data)</code>","text":"<p>Flags if period of the time entries is correct.</p> <p>It is assumes that the first entry is correct. A tolerance of 2% of the period is used when deciding on the suspicious status. The period is the mode of the time differences.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The dataframe with allowed_difference = Variable. the data.</p> required <p>Returns:</p> Type Description <code>Series</code> <p>A series with the status of the time lapse.</p> Source code in <code>measurement/validation.py</code> <pre><code>def flag_time_lapse_status(data: pd.DataFrame) -&gt; pd.Series:\n    \"\"\"Flags if period of the time entries is correct.\n\n    It is assumes that the first entry is correct. A tolerance of 2% of the period\n    is used when deciding on the suspicious status. The period is the mode of the\n    time differences.\n\n    Args:\n        data: The dataframe with allowed_difference = Variable. the data.\n\n    Returns:\n        A series with the status of the time lapse.\n    \"\"\"\n    period = data.time.diff().mode().iloc[0]\n    flags = pd.DataFrame(index=data.index, columns=[\"suspicious_time_lapse\"])\n    low = pd.Timedelta(f\"{period}min\") * (1 - 0.02)\n    high = pd.Timedelta(f\"{period}min\") * (1 + 0.02)\n    flags[\"suspicious_time_lapse\"] = ~data.time.diff().between(\n        low, high, inclusive=\"both\"\n    )\n    flags[\"suspicious_time_lapse\"].iloc[0] = False\n    return flags\n</code></pre>"},{"location":"reference/measurement/validation/#measurement.validation.flag_value_difference","title":"<code>flag_value_difference(data, allowed_difference)</code>","text":"<p>Flags if the differences in value of the measurements is correct.</p> <p>It is assume that the first entry is correct.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The dataframe with allowed_difference = Variable. the data.</p> required <code>allowed_difference</code> <code>Decimal</code> <p>The allowed difference between the measurements.</p> required <p>Returns:</p> Type Description <code>Series</code> <p>A series with the status of the value.</p> Source code in <code>measurement/validation.py</code> <pre><code>def flag_value_difference(data: pd.DataFrame, allowed_difference: Decimal) -&gt; pd.Series:\n    \"\"\"Flags if the differences in value of the measurements is correct.\n\n    It is assume that the first entry is correct.\n\n    Args:\n        data: The dataframe with allowed_difference = Variable. the data.\n        allowed_difference: The allowed difference between the measurements.\n\n    Returns:\n        A series with the status of the value.\n    \"\"\"\n    flags = pd.DataFrame(index=data.index, columns=[\"suspicious_value_difference\"])\n    flags[\"suspicious_value_difference\"] = data[\"value\"].diff().abs() &gt; float(\n        allowed_difference\n    )\n    flags[\"suspicious_value_difference\"].iloc[0] = False\n    return flags\n</code></pre>"},{"location":"reference/measurement/validation/#measurement.validation.flag_value_limits","title":"<code>flag_value_limits(data, maximum, minimum)</code>","text":"<p>Flags if the values and limits of the measurements are within limits.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The dataframe with allowed_difference = Variable. the data.</p> required <code>maximum</code> <code>Decimal</code> <p>The maximum allowed value.</p> required <code>minimum</code> <code>Decimal</code> <p>The minimum allowed value.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dataframe with suspicious columns indicating a problem.</p> Source code in <code>measurement/validation.py</code> <pre><code>def flag_value_limits(\n    data: pd.DataFrame, maximum: Decimal, minimum: Decimal\n) -&gt; pd.DataFrame:\n    \"\"\"Flags if the values and limits of the measurements are within limits.\n\n    Args:\n        data: The dataframe with allowed_difference = Variable. the data.\n        maximum: The maximum allowed value.\n        minimum: The minimum allowed value.\n\n    Returns:\n        A dataframe with suspicious columns indicating a problem.\n    \"\"\"\n    flags = pd.DataFrame(index=data.index)\n    flags[\"suspicious_value_limits\"] = (data[\"value\"] &lt; minimum) | (\n        data[\"value\"] &gt; maximum\n    )\n    if \"maximum\" in data.columns:\n        flags[\"suspicious_maximum_limits\"] = (data[\"maximum\"] &lt; minimum) | (\n            data[\"maximum\"] &gt; maximum\n        )\n    if \"minimum\" in data.columns:\n        flags[\"suspicious_minimum_limits\"] = (data[\"minimum\"] &lt; minimum) | (\n            data[\"minimum\"] &gt; maximum\n        )\n    return flags\n</code></pre>"},{"location":"reference/measurement/validation/#measurement.validation.generate_daily_summary","title":"<code>generate_daily_summary(data, suspicious, null_limit, is_cumulative)</code>","text":"<p>Generates a daily report of the data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The dataframe with the data to be evaluated.</p> required <code>suspicious</code> <code>DataFrame</code> <p>The dataframe with the suspicious data.</p> required <code>null_limit</code> <code>Decimal</code> <p>The percentage of null data allowed.</p> required <code>is_cumulative</code> <code>bool</code> <p>If the data is cumulative and should be aggregated by sum.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dataframe with the daily report.</p> Source code in <code>measurement/validation.py</code> <pre><code>def generate_daily_summary(\n    data: pd.DataFrame,\n    suspicious: pd.DataFrame,\n    null_limit: Decimal,\n    is_cumulative: bool,\n) -&gt; pd.DataFrame:\n    \"\"\"Generates a daily report of the data.\n\n    Args:\n        data: The dataframe with the data to be evaluated.\n        suspicious: The dataframe with the suspicious data.\n        null_limit: The percentage of null data allowed.\n        is_cumulative: If the data is cumulative and should be aggregated by sum.\n\n    Returns:\n        A dataframe with the daily report.\n    \"\"\"\n    report = pd.DataFrame(index=data.time.dt.date.unique())\n\n    # Group the data by day and calculate the mean or sum\n    datagroup = data.groupby(data.time.dt.date)\n    report[\"value\"] = (\n        datagroup[\"value\"].sum() if is_cumulative else datagroup[\"value\"].mean()\n    )\n\n    if \"maximum\" in data.columns:\n        report[\"maximum\"] = datagroup[\"maximum\"].max()\n    if \"minimum\" in data.columns:\n        report[\"minimum\"] = datagroup[\"minimum\"].min()\n\n    # Count the number of entries per day and flag the suspicious ones\n    count_report = flag_suspicious_daily_count(datagroup[\"value\"].count(), null_limit)\n\n    # Group the suspicious data by day and calculate the sum\n    suspiciousgroup = suspicious.groupby(data.time.dt.date)\n    suspicious_report = suspiciousgroup.sum().astype(int)\n    suspicious_report[\"total_suspicious_entries\"] = suspicious_report.sum(axis=1)\n\n    # Put together the final report\n    report = pd.concat([report, suspicious_report, count_report], axis=1)\n    report = report.sort_index().reset_index().rename(columns={\"index\": \"date\"})\n    report.date = pd.to_datetime(report.date)\n    return report\n</code></pre>"},{"location":"reference/measurement/validation/#measurement.validation.generate_validation_report","title":"<code>generate_validation_report(station, variable, start_time, end_time, maximum, minimum, is_validated=False)</code>","text":"<p>Generates a report of the data.</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Station of interest.</p> required <code>variable</code> <code>str</code> <p>Variable of interest.</p> required <code>start_time</code> <code>str</code> <p>Start time.</p> required <code>end_time</code> <code>str</code> <p>End time.</p> required <code>maximum</code> <code>Decimal</code> <p>The maximum allowed value.</p> required <code>minimum</code> <code>Decimal</code> <p>The minimum allowed value.</p> required <code>is_validated</code> <code>bool</code> <p>Whether to retrieve validated or non-validated data.</p> <code>False</code> <p>Returns:</p> Type Description <code>tuple[DataFrame, DataFrame]</code> <p>A tuple with the summary report and the granular report.</p> Source code in <code>measurement/validation.py</code> <pre><code>def generate_validation_report(\n    station: str,\n    variable: str,\n    start_time: str,\n    end_time: str,\n    maximum: Decimal,\n    minimum: Decimal,\n    is_validated: bool = False,\n) -&gt; tuple[pd.DataFrame, pd.DataFrame]:\n    \"\"\"Generates a report of the data.\n\n    Args:\n        station: Station of interest.\n        variable: Variable of interest.\n        start_time: Start time.\n        end_time: End time.\n        maximum: The maximum allowed value.\n        minimum: The minimum allowed value.\n        is_validated: Whether to retrieve validated or non-validated data.\n\n    Returns:\n        A tuple with the summary report and the granular report.\n    \"\"\"\n    var = Variable.objects.get(variable_code=variable)\n\n    data = get_data_to_validate(station, variable, start_time, end_time, is_validated)\n    if data.empty:\n        return pd.DataFrame(), pd.DataFrame()\n\n    suspicious = flag_suspicious_data(data, maximum, minimum, var.diff_error)\n    summary = generate_daily_summary(\n        data, suspicious, var.null_limit, var.is_cumulative\n    )\n    granular = pd.concat([data, suspicious], axis=1)\n    return summary, granular\n</code></pre>"},{"location":"reference/measurement/validation/#measurement.validation.get_data_to_validate","title":"<code>get_data_to_validate(station, variable, start_time, end_time, is_validated=False)</code>","text":"<p>Retrieves data to be validated.</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Station of interest.</p> required <code>variable</code> <code>str</code> <p>Variable of interest.</p> required <code>start_time</code> <code>str</code> <p>Start time.</p> required <code>end_time</code> <code>str</code> <p>End time.</p> required <code>is_validated</code> <code>bool</code> <p>Whether to retrieve validated or non-validated data.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dictionary with the report for the chosen days.</p> Source code in <code>measurement/validation.py</code> <pre><code>def get_data_to_validate(\n    station: str,\n    variable: str,\n    start_time: str,\n    end_time: str,\n    is_validated: bool = False,\n) -&gt; pd.DataFrame:\n    \"\"\"Retrieves data to be validated.\n\n    Args:\n        station: Station of interest.\n        variable: Variable of interest.\n        start_time: Start time.\n        end_time: End time.\n        is_validated: Whether to retrieve validated or non-validated data.\n\n    Returns:\n        A dictionary with the report for the chosen days.\n    \"\"\"\n    tz = timezone.get_current_timezone()\n    start_time_ = datetime.strptime(start_time, \"%Y-%m-%d\").replace(tzinfo=tz)\n    end_time_ = datetime.strptime(end_time, \"%Y-%m-%d\").replace(tzinfo=tz)\n\n    df = pd.DataFrame.from_records(\n        Measurement.objects.filter(\n            station__station_code=station,\n            variable__variable_code=variable,\n            time__date__range=(start_time_.date(), end_time_.date()),\n            is_validated=is_validated,\n        ).values()\n    )\n\n    if df.empty:\n        return df\n\n    df[\"time\"] = df[\"time\"].dt.tz_convert(tz)\n    return df.sort_values(\"time\")\n</code></pre>"},{"location":"reference/measurement/validation/#measurement.validation.reset_validated_days","title":"<code>reset_validated_days(station, variable, start_date, end_date)</code>","text":"<p>Resets validation and active status for the selected data.</p> <p>It also deletes the associated report data.</p> <p>TODO: should this also reset any modified value, minimum or maximum entries?</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Station code</p> required <code>variable</code> <code>str</code> <p>Variable code</p> required <code>start_date</code> <code>str</code> <p>Start date</p> required <code>end_date</code> <code>str</code> <p>End date</p> required Source code in <code>measurement/validation.py</code> <pre><code>def reset_validated_days(\n    station: str, variable: str, start_date: str, end_date: str\n) -&gt; None:\n    \"\"\"Resets validation and active status for the selected data.\n\n    It also deletes the associated report data.\n\n    TODO: should this also reset any modified value, minimum or maximum entries?\n\n    Args:\n        station (str): Station code\n        variable (str): Variable code\n        start_date (str): Start date\n        end_date (str): End date\n    \"\"\"\n    tz = timezone.get_current_timezone()\n\n    # To update we use the exact date range.\n    start_date_ = datetime.strptime(start_date, \"%Y-%m-%d\").replace(tzinfo=tz)\n    end_date_ = datetime.strptime(end_date, \"%Y-%m-%d\").replace(tzinfo=tz)\n    Measurement.objects.filter(\n        station__station_code=station,\n        variable__variable_code=variable,\n        time__date__range=(start_date_.date(), end_date_.date()),\n    ).update(is_validated=False, is_active=True)\n\n    # To remove reports we use an extended date range to include the whole month.\n    start_date_, end_date_ = reporting.reformat_dates(start_date, end_date)\n    reporting.remove_report_data_in_range(station, variable, start_date_, end_date_)\n</code></pre>"},{"location":"reference/measurement/validation/#measurement.validation.reset_validated_entries","title":"<code>reset_validated_entries(ids)</code>","text":"<p>Resets validation and activation status for the selected data.</p> <p>TODO: should this also reset any modified value, minimum or maximum entries?</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>list</code> <p>List of measurement ids to reset.</p> required Source code in <code>measurement/validation.py</code> <pre><code>def reset_validated_entries(ids: list) -&gt; None:\n    \"\"\"Resets validation and activation status for the selected data.\n\n    TODO: should this also reset any modified value, minimum or maximum entries?\n\n    Args:\n        ids (list): List of measurement ids to reset.\n    \"\"\"\n    times: list[datetime] = []\n    for _id in ids:\n        current = Measurement.objects.get(id=_id)\n        current.is_validated = False\n        current.is_active = True\n        current.save()\n        times.append(current.time)\n\n    station = current.station.station_code\n    variable = current.variable.variable_code\n    start_time, end_time = reporting.reformat_dates(\n        to_local_time(min(times)).strftime(\"%Y-%m-%d\"),\n        to_local_time(max(times)).strftime(\"%Y-%m-%d\"),\n    )\n\n    reporting.remove_report_data_in_range(station, variable, start_time, end_time)\n</code></pre>"},{"location":"reference/measurement/validation/#measurement.validation.save_validated_days","title":"<code>save_validated_days(data)</code>","text":"<p>Saves the validated days to the database and launches the report calculation.</p> <p>Only the data that is flagged as \"validate?\" will be saved. The only updated field is is_active. To update the value, maximum or minimum, use save_validated_entries.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The dataframe with the validated data.</p> required Source code in <code>measurement/validation.py</code> <pre><code>def save_validated_days(data: pd.DataFrame) -&gt; None:\n    \"\"\"Saves the validated days to the database and launches the report calculation.\n\n    Only the data that is flagged as \"validate?\" will be saved. The only updated field\n    is is_active. To update the value, maximum or minimum, use save_validated_entries.\n\n    Args:\n        data: The dataframe with the validated data.\n    \"\"\"\n    tz = timezone.get_current_timezone()\n    validate = data[data[\"validate?\"]]\n    for _, row in validate.iterrows():\n        day = datetime.strptime(row[\"date\"], \"%Y-%m-%d\").replace(tzinfo=tz)\n        Measurement.objects.filter(\n            station__station_code=row[\"station\"],\n            variable__variable_code=row[\"variable\"],\n            time__date=day.date(),\n        ).update(is_validated=True, is_active=not row[\"deactivate?\"])\n\n    station = validate[\"station\"].iloc[0]\n    variable = validate[\"variable\"].iloc[0]\n    start_time = validate[\"date\"].min()\n    end_time = validate[\"date\"].max()\n\n    try:\n        reporting.launch_reports_calculation(station, variable, start_time, end_time)\n    except Exception as e:\n        reset_validated_days(station, variable, start_time, end_time)\n        raise e\n</code></pre>"},{"location":"reference/measurement/validation/#measurement.validation.save_validated_entries","title":"<code>save_validated_entries(data)</code>","text":"<p>Saves the validated data to the database.</p> <p>Only the data that is flagged as \"validate?\" will be saved. Possible updated fields are: value, maximum, minimum and is_active.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The dataframe with the validated data.</p> required Source code in <code>measurement/validation.py</code> <pre><code>def save_validated_entries(data: pd.DataFrame) -&gt; None:\n    \"\"\"Saves the validated data to the database.\n\n    Only the data that is flagged as \"validate?\" will be saved. Possible updated fields\n    are: value, maximum, minimum and is_active.\n\n    Args:\n        data: The dataframe with the validated data.\n    \"\"\"\n    times: list[datetime] = []\n    for _, row in data[data[\"validate?\"]].iterrows():\n        current = Measurement.objects.get(id=row[\"id\"])\n        times.append(current.time)\n\n        update = {\"is_validated\": True, \"is_active\": not row[\"deactivate?\"]}\n        if current.value != row[\"value\"]:\n            update[\"value\"] = row[\"value\"]\n        if \"maximum\" in row and current.maximum != row[\"maximum\"]:\n            update[\"maximum\"] = row[\"maximum\"]\n        if \"minimum\" in row and current.minimum != row[\"minimum\"]:\n            update[\"minimum\"] = row[\"minimum\"]\n\n        Measurement.objects.filter(id=row[\"id\"]).update(**update)\n\n    tz = timezone.get_current_timezone()\n    station = current.station.station_code\n    variable = current.variable.variable_code\n    start_time = min(times).astimezone(tz).strftime(\"%Y-%m-%d\")\n    end_time = max(times).astimezone(tz).strftime(\"%Y-%m-%d\")\n\n    try:\n        reporting.launch_reports_calculation(station, variable, start_time, end_time)\n    except Exception as e:\n        ids = data[data[\"validate?\"]][\"id\"].tolist()\n        reset_validated_entries(ids)\n        raise e\n</code></pre>"},{"location":"reference/measurement/views/","title":"views","text":""},{"location":"reference/measurement/views/#measurement.views","title":"<code>measurement.views</code>","text":""},{"location":"reference/measurement/views/#measurement.views-classes","title":"Classes","text":""},{"location":"reference/measurement/views/#measurement.views.DailyValidation","title":"<code>DailyValidation</code>","text":"<p>               Bases: <code>LoginRequiredMixin</code>, <code>View</code></p> <p>View for displaying the Daily Validation dash app.</p>"},{"location":"reference/measurement/views/#measurement.views.DataReport","title":"<code>DataReport</code>","text":"<p>               Bases: <code>View</code></p> <p>View for displaying the Data Report dash app.</p>"},{"location":"reference/measurement/views/#measurement.views.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/measurement/views/#measurement.views.Station-attributes","title":"Attributes","text":""},{"location":"reference/measurement/views/#measurement.views.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/measurement/views/#measurement.views.Station-functions","title":"Functions","text":""},{"location":"reference/measurement/views/#measurement.views.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/measurement/views/#measurement.views.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/measurement/views/#measurement.views.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/measurement/dash_apps/","title":"dash_apps","text":""},{"location":"reference/measurement/dash_apps/#measurement.dash_apps","title":"<code>measurement.dash_apps</code>","text":""},{"location":"reference/measurement/dash_apps/daily_validation/","title":"daily_validation","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation","title":"<code>measurement.dash_apps.daily_validation</code>","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation-attributes","title":"Attributes","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.DATA_GRANULAR","title":"<code>DATA_GRANULAR: pd.DataFrame = pd.DataFrame()</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.DATA_SUMMARY","title":"<code>DATA_SUMMARY: pd.DataFrame = pd.DataFrame()</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.SELECTED_DAY","title":"<code>SELECTED_DAY: date | None = None</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.app","title":"<code>app = DjangoDash('DailyValidation', external_stylesheets=[dbc.themes.BOOTSTRAP, '/static/styles/dashstyle.css'])</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.detail_date_picker","title":"<code>detail_date_picker = html.Div(children=[html.Div(children=['Open detailed view'], style={'display': 'inline-block', 'padding-right': '5px'}), dcc.DatePickerSingle(id='detail-date-picker', display_format='YYYY-MM-DD', min_date_allowed=None, max_date_allowed=None)], style={'display': 'inline-block', 'width': '50%', 'text-align': 'right'})</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.filters","title":"<code>filters = html.Div(children=[filters_row1, filters_row2])</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.filters_row1","title":"<code>filters_row1 = html.Div(children=[html.Div([html.Label('Station:', style={'display': 'block', 'font-weight': 'bold'}), dcc.Dropdown(id='station_drop', options=[], value=None)], style={'margin-right': '20px', 'width': '286px', 'display': 'inline-block'}), html.Div([html.Label('Variable:', style={'display': 'block', 'font-weight': 'bold'}), dcc.Dropdown(id='variable_drop', options=[], value=None)], style={'margin-right': '20px', 'width': '286px', 'display': 'inline-block'}), html.Div([html.Label('Date Range:', style={'display': 'block', 'font-weight': 'bold'}), dcc.DatePickerRange(id='date_range_picker', display_format='YYYY-MM-DD', start_date=None, end_date=None)], style={'width': '286px', 'display': 'inline-block'})], style={'display': 'flex', 'justify-content': 'flex-start', 'margin-bottom': '10px'})</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.filters_row2","title":"<code>filters_row2 = html.Div(children=[html.Div([html.Label('Minimum:', style={'display': 'block', 'font-weight': 'bold'}), dcc.Input(id='minimum_input', type='number', value=None)], style={'margin-right': '20px', 'width': '286px'}), html.Div([html.Label('Maximum:', style={'display': 'block', 'font-weight': 'bold'}), dcc.Input(id='maximum_input', type='number', value=None)], style={'margin-right': '20px', 'width': '286px'}), html.Div([html.Label('Validation status:', style={'display': 'block', 'font-weight': 'bold'}), dcc.Dropdown(id='validation_status_drop', options=[{'label': 'Validated', 'value': 'validated'}, {'label': 'Not validated', 'value': 'not_validated'}], value='not_validated')], style={'width': '286px'})], style={'display': 'flex', 'justify-content': 'flex-start'})</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.menu","title":"<code>menu = html.Div(children=[html.Div(children=[html.Button('Validate', id='save-button')], style={'display': 'inline-block', 'width': '50%'}), detail_date_picker], style={'background-color': '#f0f0f0', 'width': '100%'})</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.plot","title":"<code>plot = html.Div(children=[dcc.Graph(id='plot', figure=create_empty_plot(), style={'width': '100%'}), dcc.RadioItems(id='plot_radio', options=[{'value': c, 'label': c.capitalize()} for c in ['value', 'maximum', 'minimum']], value='value', style={'width': '100px'}, labelStyle={'display': 'block'})], style={'display': 'flex', 'justify-content': 'space-between', 'height': '400px'})</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.status_message","title":"<code>status_message = html.Div(id='status-message', children=[''], style={'min-height': '20px', 'padding-top': '5px', 'padding-bottom': '10px'})</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.table_daily","title":"<code>table_daily = AgGrid(id='table_daily', rowData=[], columnDefs=create_columns_daily(), columnSize='sizeToFit', defaultColDef={'resizable': True, 'sortable': True, 'checkboxSelection': {'function': 'params.column == params.columnApi.getAllDisplayedColumns()[0]'}, 'headerCheckboxSelection': {'function': 'params.column == params.columnApi.getAllDisplayedColumns()[0]'}, 'headerCheckboxSelectionFilteredOnly': True}, dashGridOptions={'rowSelection': 'multiple', 'suppressRowClickSelection': True}, selectAll=True, getRowId='params.data.date')</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.table_detail","title":"<code>table_detail = AgGrid(id='table_detail', rowData=[], columnDefs=create_columns_detail(), columnSize='sizeToFit', defaultColDef={'resizable': True, 'sortable': True, 'checkboxSelection': {'function': 'params.column == params.columnApi.getAllDisplayedColumns()[0]'}, 'headerCheckboxSelection': {'function': 'params.column == params.columnApi.getAllDisplayedColumns()[0]'}, 'headerCheckboxSelectionFilteredOnly': True}, dashGridOptions={'rowSelection': 'multiple', 'suppressRowClickSelection': True}, selectAll=True, getRowId='params.data.id')</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation-classes","title":"Classes","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.Variable-attributes","title":"Attributes","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.Variable-functions","title":"Functions","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation-functions","title":"Functions","text":""},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.callbacks","title":"<code>callbacks(in_submit_clicks, in_save_clicks, in_detail_date, in_plot_radio_value, in_tabs_value, in_station, in_variable, in_start_date, in_end_date, in_minimum, in_maximum, in_daily_selected_rows, in_daily_row_data, in_detail_selected_rows, in_detail_row_data, in_validation_status)</code>","text":"<p>Callbacks for daily validation app</p> <p>Parameters:</p> Name Type Description Default <code>in_submit_clicks</code> <code>int</code> <p>Number of times submit-button was clicked</p> required <code>in_save_clicks</code> <code>int</code> <p>Number of times save-button was clicked</p> required <code>in_detail_date</code> <code>str</code> <p>Date for detail view</p> required <code>in_plot_radio_value</code> <code>str</code> <p>Value of plot radio button</p> required <code>in_tabs_value</code> <code>str</code> <p>Value of tabs</p> required <code>in_station</code> <code>str</code> <p>Station from filters</p> required <code>in_variable</code> <code>str</code> <p>Variable from filters</p> required <code>in_start_date</code> <code>str</code> <p>Start date from filters</p> required <code>in_end_date</code> <code>str</code> <p>End date from filters</p> required <code>in_minimum</code> <code>float</code> <p>Minimum from filters</p> required <code>in_maximum</code> <code>float</code> <p>Maximum from filters</p> required <code>in_daily_selected_rows</code> <code>list[dict]</code> <p>Selected rows in table_daily</p> required <code>in_daily_row_data</code> <code>list[dict]</code> <p>Full row data for table_daily</p> required <code>in_detail_selected_rows</code> <code>list[dict]</code> <p>Selected rows in table_detail</p> required <code>in_detail_row_data</code> <code>list[dict]</code> <p>Full row data for table_detail</p> required <p>Returns:</p> Name Type Description <code>out_loading_top</code> <code>no_update</code> <p>Loading spinner for top</p> <code>out_loading</code> <code>no_update</code> <p>Loading spinner for bottom</p> <code>out_status</code> <code>str</code> <p>Status message</p> <code>out_plot</code> <code>Figure</code> <p>Plot</p> <code>out_daily_row_data</code> <code>list[dict]</code> <p>Data for daily table</p> <code>out_detail_row_data</code> <code>list[dict]</code> <p>Data for detail table</p> <code>out_daily_selected_rows</code> <code>list[dict]</code> <p>Selected rows in daily table</p> <code>out_detail_selected_rows</code> <code>list[dict]</code> <p>Selected rows in detail table</p> <code>out_tab_detail_disabled</code> <code>bool</code> <p>Disabled status for detail tab</p> <code>out_tab_detail_label</code> <code>str</code> <p>Label for detail tab</p> <code>out_tabs_value</code> <code>str</code> <p>Value for tabs</p> <code>out_save_label</code> <code>str</code> <p>Label for save button</p> Source code in <code>measurement/dash_apps/daily_validation.py</code> <pre><code>@app.callback(\n    [\n        Output(\"loading_top\", \"children\"),\n        Output(\"loading\", \"children\"),\n        Output(\"status-message\", \"children\"),\n        Output(\"plot\", \"figure\"),\n        Output(\"table_daily\", \"rowData\"),\n        Output(\"table_detail\", \"rowData\"),\n        Output(\"table_daily\", \"selectedRows\"),\n        Output(\"table_detail\", \"selectedRows\"),\n        Output(\"tab-detail\", \"disabled\"),\n        Output(\"tab-detail\", \"label\"),\n        Output(\"tabs\", \"value\"),\n        Output(\"save-button\", \"children\"),\n    ],\n    [\n        Input(\"submit-button\", \"n_clicks\"),\n        Input(\"save-button\", \"n_clicks\"),\n        Input(\"detail-date-picker\", \"date\"),\n        Input(\"plot_radio\", \"value\"),\n    ],\n    [\n        State(\"tabs\", \"value\"),\n        State(\"station_drop\", \"value\"),\n        State(\"variable_drop\", \"value\"),\n        State(\"date_range_picker\", \"start_date\"),\n        State(\"date_range_picker\", \"end_date\"),\n        State(\"minimum_input\", \"value\"),\n        State(\"maximum_input\", \"value\"),\n        State(\"table_daily\", \"selectedRows\"),\n        State(\"table_daily\", \"rowData\"),\n        State(\"table_detail\", \"selectedRows\"),\n        State(\"table_detail\", \"rowData\"),\n        State(\"validation_status_drop\", \"value\"),\n    ],\n    prevent_initial_call=True,\n)\ndef callbacks(\n    in_submit_clicks: int,\n    in_save_clicks: int,\n    in_detail_date: str,\n    in_plot_radio_value: str,\n    in_tabs_value: str,\n    in_station: str,\n    in_variable: str,\n    in_start_date: str,\n    in_end_date: str,\n    in_minimum: float,\n    in_maximum: float,\n    in_daily_selected_rows: list[dict],\n    in_daily_row_data: list[dict],\n    in_detail_selected_rows: list[dict],\n    in_detail_row_data: list[dict],\n    in_validation_status: str,\n) -&gt; tuple[\n    dash.no_update,\n    dash.no_update,\n    str,\n    go.Figure,\n    list[dict],\n    list[dict],\n    list[dict],\n    list[dict],\n    bool,\n    str,\n    str,\n    str,\n]:\n    \"\"\"Callbacks for daily validation app\n\n    Args:\n        in_submit_clicks (int): Number of times submit-button was clicked\n        in_save_clicks (int): Number of times save-button was clicked\n        in_detail_date (str): Date for detail view\n        in_plot_radio_value (str): Value of plot radio button\n        in_tabs_value (str): Value of tabs\n        in_station (str): Station from filters\n        in_variable (str): Variable from filters\n        in_start_date (str): Start date from filters\n        in_end_date (str): End date from filters\n        in_minimum (float): Minimum from filters\n        in_maximum (float): Maximum from filters\n        in_daily_selected_rows (list[dict]): Selected rows in table_daily\n        in_daily_row_data (list[dict]): Full row data for table_daily\n        in_detail_selected_rows (list[dict]): Selected rows in table_detail\n        in_detail_row_data (list[dict]): Full row data for table_detail\n\n    Returns:\n        out_loading_top (dash.no_update): Loading spinner for top\n        out_loading (dash.no_update): Loading spinner for bottom\n        out_status (str): Status message\n        out_plot (go.Figure): Plot\n        out_daily_row_data (list[dict]): Data for daily table\n        out_detail_row_data (list[dict]): Data for detail table\n        out_daily_selected_rows (list[dict]): Selected rows in daily table\n        out_detail_selected_rows (list[dict]): Selected rows in detail table\n        out_tab_detail_disabled (bool): Disabled status for detail tab\n        out_tab_detail_label (str): Label for detail tab\n        out_tabs_value (str): Value for tabs\n        out_save_label (str): Label for save button\n    \"\"\"\n    global SELECTED_DAY, DATA_SUMMARY, DATA_GRANULAR\n\n    ctx = dash.callback_context\n    input_id = ctx.triggered[0][\"prop_id\"].split(\".\")[0]\n\n    out_loading_top = dash.no_update\n    out_loading = dash.no_update\n    out_status = dash.no_update\n    out_plot = dash.no_update\n    out_daily_row_data = dash.no_update\n    out_detail_row_data = dash.no_update\n    out_daily_selected_rows = dash.no_update\n    out_detail_selected_rows = dash.no_update\n    out_tab_detail_disabled = dash.no_update\n    out_tab_detail_label = dash.no_update\n    out_tabs_value = dash.no_update\n    out_save_label = dash.no_update\n\n    data_refresh_required = False\n    daily_table_refresh_required = False\n    detail_table_refresh_required = False\n    daily_table_reset_selection = False\n    detail_table_reset_selection = False\n    plot_refresh_required = False\n\n    # Button: Submit\n    if input_id == \"submit-button\":\n        out_status = \"\"\n        out_save_label = (\n            \"Validate\"\n            if in_validation_status == \"not_validated\"\n            else \"Reset Validation\"\n        )\n        data_refresh_required = True\n        daily_table_refresh_required = True\n        detail_table_refresh_required = True\n        daily_table_reset_selection = True\n        detail_table_reset_selection = True\n        plot_refresh_required = True\n\n    # Button: Save (daily)\n    if (\n        input_id == \"save-button\"\n        and in_tabs_value == \"tab-daily\"\n        and in_validation_status == \"not_validated\"\n    ):\n        selected_dates = {row[\"date\"] for row in in_daily_selected_rows}\n        data_to_validate = [\n            {\n                \"date\": row[\"date\"].split(\"T\")[0],\n                \"validate?\": True,\n                \"deactivate?\": row[\"date\"] not in selected_dates,\n                \"station\": in_station,\n                \"variable\": in_variable,\n            }\n            for row in in_daily_row_data\n        ]\n        save_validated_days(pd.DataFrame.from_records(data_to_validate))\n        out_status = \"Validation successful\"\n        data_refresh_required = True\n        daily_table_refresh_required = True\n        plot_refresh_required = True\n\n    # Button: Save (detail)\n    elif (\n        input_id == \"save-button\"\n        and in_tabs_value == \"tab-detail\"\n        and in_validation_status == \"not_validated\"\n    ):\n        selected_ids = {row[\"id\"] for row in in_detail_selected_rows}\n        data_to_validate = [\n            {\n                \"id\": row[\"id\"],\n                \"validate?\": True,\n                \"deactivate?\": row[\"id\"] not in selected_ids,\n                \"value\": row[\"value\"],\n                \"minimum\": row[\"minimum\"],\n                \"maximum\": row[\"maximum\"],\n            }\n            for row in in_detail_row_data\n        ]\n        save_validated_entries(pd.DataFrame.from_records(data_to_validate))\n        out_status = \"Validation successful\"\n        data_refresh_required = True\n        daily_table_refresh_required = True\n        detail_table_refresh_required = True\n        plot_refresh_required = True\n\n    # Button: Reset (daily)\n    elif (\n        input_id == \"save-button\"\n        and in_tabs_value == \"tab-daily\"\n        and in_validation_status == \"validated\"\n    ):\n        reset_validated_days(\n            variable=in_variable,\n            station=in_station,\n            start_date=in_start_date,\n            end_date=in_end_date,\n        )\n        out_status = \"Validation reset\"\n        data_refresh_required = True\n        daily_table_refresh_required = True\n        daily_table_reset_selection = True\n        plot_refresh_required = True\n\n    # Button: Reset (detail)\n    elif (\n        input_id == \"save-button\"\n        and in_tabs_value == \"tab-detail\"\n        and in_validation_status == \"validated\"\n    ):\n        reset_validated_entries(ids=[row[\"id\"] for row in in_detail_row_data])\n        out_status = \"Validation reset\"\n        data_refresh_required = True\n        daily_table_refresh_required = True\n        detail_table_refresh_required = True\n        detail_table_reset_selection = True\n        plot_refresh_required = True\n\n    # Date picker\n    elif input_id == \"detail-date-picker\":\n        new_selected_day = next(\n            (\n                d.date()\n                for d in DATA_SUMMARY[\"date\"]\n                if d.strftime(\"%Y-%m-%d\") == in_detail_date\n            ),\n            None,\n        )\n        if new_selected_day is not None:\n            detail_table_refresh_required = True\n            detail_table_reset_selection = True\n            out_tab_detail_disabled = False\n            out_tab_detail_label = (\n                f\"Detail of Selected Day ({new_selected_day.strftime('%Y-%m-%d')})\"\n            )\n            out_tabs_value = \"tab-detail\"\n            out_status = \"\"\n            SELECTED_DAY = new_selected_day\n        else:\n            out_status = \"No data for selected day\"\n\n    # Plot radio\n    elif input_id == \"plot_radio\":\n        plot_refresh_required = True\n\n    # Reload data\n    if data_refresh_required:\n        DATA_SUMMARY, DATA_GRANULAR = generate_validation_report(\n            station=in_station,\n            variable=in_variable,\n            start_time=in_start_date,\n            end_time=in_end_date,\n            minimum=Decimal(in_minimum) if in_minimum is not None else None,\n            maximum=Decimal(in_maximum) if in_maximum is not None else None,\n            is_validated=in_validation_status == \"validated\",\n        )\n\n    # Refresh plot\n    if plot_refresh_required:\n        if not DATA_GRANULAR.empty:\n            out_plot = create_validation_plot(\n                data=DATA_GRANULAR,\n                variable_name=Variable.objects.get(variable_code=in_variable).name,\n                field=in_plot_radio_value,\n            )\n        else:\n            out_plot = create_empty_plot()\n\n    # Refresh daily table\n    if daily_table_refresh_required:\n        out_daily_row_data = DATA_SUMMARY.to_dict(\"records\")\n\n        # Reset daily table selection\n        if daily_table_reset_selection:\n            out_daily_selected_rows = out_daily_row_data\n\n    # Refresh detail table\n    if detail_table_refresh_required:\n        if DATA_GRANULAR.empty:\n            out_detail_row_data = []\n        else:\n            out_detail_row_data = DATA_GRANULAR[\n                DATA_GRANULAR.time.dt.date == SELECTED_DAY\n            ].to_dict(\"records\")\n\n        # Reset detail table selection\n        if detail_table_reset_selection:\n            out_detail_selected_rows = [\n                row for row in out_detail_row_data if row[\"is_active\"]\n            ]\n\n    return (\n        out_loading_top,\n        out_loading,\n        out_status,\n        out_plot,\n        out_daily_row_data,\n        out_detail_row_data,\n        out_daily_selected_rows,\n        out_detail_selected_rows,\n        out_tab_detail_disabled,\n        out_tab_detail_label,\n        out_tabs_value,\n        out_save_label,\n    )\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.create_columns_daily","title":"<code>create_columns_daily()</code>","text":"<p>Creates columns for Daily Report table</p> <p>Parameters:</p> Name Type Description Default <code>value_columns</code> <code>list</code> <p>List of value columns</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>List of columns</p> Source code in <code>measurement/dash_apps/tables.py</code> <pre><code>def create_columns_daily() -&gt; list:\n    \"\"\"Creates columns for Daily Report table\n\n    Args:\n        value_columns (list): List of value columns\n\n    Returns:\n        list: List of columns\n    \"\"\"\n    styles = create_style_conditions()\n\n    columns = [\n        {\n            \"valueGetter\": {\n                \"function\": \"d3.timeParse('%Y-%m-%d')(params.data.date.split('T')[0])\"\n            },\n            \"headerName\": \"Date\",\n            \"filter\": \"agDateColumnFilter\",\n            \"valueFormatter\": {\"function\": \"params.data.date.split('T')[0]\"},\n            \"sort\": \"asc\",\n            **styles[\"date\"],\n        },\n        *[\n            {\n                \"field\": c,\n                \"headerName\": c.capitalize(),\n                \"filter\": \"agNumberColumnFilter\",\n                \"valueFormatter\": {\"function\": \"d3.format(',.2f')(params.value)\"},\n                **styles[c],\n            }\n            for c in [\"value\", \"minimum\", \"maximum\"]\n        ],\n        {\n            \"field\": \"daily_count_fraction\",\n            \"headerName\": \"Daily count fraction\",\n            \"filter\": \"agNumberColumnFilter\",\n            \"valueFormatter\": {\"function\": \"d3.format(',.2f')(params.value)\"},\n            **styles[\"daily_count_fraction\"],\n        },\n        {\n            \"field\": \"total_suspicious_entries\",\n            \"headerName\": \"Suspicious entries\",\n            \"filter\": \"agNumberColumnFilter\",\n            **styles[\"total_suspicious_entries\"],\n        },\n    ]\n    return columns\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.create_columns_detail","title":"<code>create_columns_detail()</code>","text":"<p>Creates columns for Detail table</p> <p>Parameters:</p> Name Type Description Default <code>value_columns</code> <code>list</code> <p>List of value columns</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>List of columns</p> Source code in <code>measurement/dash_apps/tables.py</code> <pre><code>def create_columns_detail() -&gt; list:\n    \"\"\"Creates columns for Detail table\n\n    Args:\n        value_columns (list): List of value columns\n\n    Returns:\n        list: List of columns\n    \"\"\"\n    styles = create_style_conditions()\n\n    columns = [\n        {\n            \"field\": \"id\",\n            \"headerName\": \"Measurement ID\",\n            \"filter\": \"agNumberColumnFilter\",\n        },\n        {\n            \"field\": \"time\",\n            \"valueFormatter\": {\"function\": \"params.value.split('T')[1].split('+')[0]\"},\n            \"headerName\": \"Time\",\n            \"editable\": True,\n            \"sort\": \"asc\",\n            **styles[\"time\"],\n        },\n        *[\n            {\n                \"field\": c,\n                \"headerName\": c.capitalize(),\n                \"filter\": \"agNumberColumnFilter\",\n                \"editable\": True,\n                \"valueFormatter\": {\"function\": \"d3.format(',.2f')(params.value)\"},\n                **styles[c],\n            }\n            for c in [\"value\", \"minimum\", \"maximum\"]\n        ],\n    ]\n    return columns\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.create_empty_plot","title":"<code>create_empty_plot()</code>","text":"<p>Creates empty plot</p> <p>Returns:</p> Type Description <code>scatter</code> <p>px.Scatter: Plot</p> Source code in <code>measurement/dash_apps/plots.py</code> <pre><code>def create_empty_plot() -&gt; px.scatter:\n    \"\"\"Creates empty plot\n\n    Returns:\n        px.Scatter: Plot\n    \"\"\"\n    fig = px.scatter(title=\"No data to plot\")\n    fig.update_layout(\n        autosize=True,\n        margin=dict(\n            l=50,\n            r=20,\n            b=0,\n            t=50,\n        ),\n        title_font=dict(\n            size=14,\n        ),\n    )\n    return fig\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.create_validation_plot","title":"<code>create_validation_plot(data, variable_name, field)</code>","text":"<p>Creates plot for Validation app</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Data</p> required <code>variable_name</code> <code>str</code> <p>Variable name</p> required <code>field</code> <code>str</code> <p>'value', 'minimum' or 'maximum'</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: Plot</p> Source code in <code>measurement/dash_apps/plots.py</code> <pre><code>def create_validation_plot(\n    data: pd.DataFrame, variable_name: str, field: str\n) -&gt; go.Figure:\n    \"\"\"Creates plot for Validation app\n\n    Args:\n        data (pd.DataFrame): Data\n        variable_name (str): Variable name\n        field (str): 'value', 'minimum' or 'maximum'\n\n    Returns:\n        go.Figure: Plot\n    \"\"\"\n\n    def status(row):\n        if not row[\"is_validated\"]:\n            return \"Not validated\"\n        if row[\"is_active\"]:\n            return \"Active\"\n        return \"Inactive\"\n\n    color_map = {\n        \"Active\": \"#00CC96\",\n        \"Inactive\": \"#636EFA\",\n        \"Not validated\": \"black\",\n    }\n\n    fig = px.scatter(\n        data,\n        x=\"time\",\n        y=field,\n        color=data.apply(status, axis=1),\n        color_discrete_map=color_map,\n        labels={\"time\": \"Date\", field: f\"{variable_name} ({field.capitalize()})\"},\n    )\n\n    fig.update_traces(marker=dict(size=3))\n    fig.update_layout(\n        legend=dict(\n            title=dict(text=\"Status\", font=dict(size=12)),\n            x=1,\n            y=1,\n            xanchor=\"auto\",\n            yanchor=\"auto\",\n        ),\n        autosize=True,\n        margin=dict(\n            l=50,\n            r=20,\n            b=0,\n            t=50,\n        ),\n    )\n\n    return fig\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.generate_validation_report","title":"<code>generate_validation_report(station, variable, start_time, end_time, maximum, minimum, is_validated=False)</code>","text":"<p>Generates a report of the data.</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Station of interest.</p> required <code>variable</code> <code>str</code> <p>Variable of interest.</p> required <code>start_time</code> <code>str</code> <p>Start time.</p> required <code>end_time</code> <code>str</code> <p>End time.</p> required <code>maximum</code> <code>Decimal</code> <p>The maximum allowed value.</p> required <code>minimum</code> <code>Decimal</code> <p>The minimum allowed value.</p> required <code>is_validated</code> <code>bool</code> <p>Whether to retrieve validated or non-validated data.</p> <code>False</code> <p>Returns:</p> Type Description <code>tuple[DataFrame, DataFrame]</code> <p>A tuple with the summary report and the granular report.</p> Source code in <code>measurement/validation.py</code> <pre><code>def generate_validation_report(\n    station: str,\n    variable: str,\n    start_time: str,\n    end_time: str,\n    maximum: Decimal,\n    minimum: Decimal,\n    is_validated: bool = False,\n) -&gt; tuple[pd.DataFrame, pd.DataFrame]:\n    \"\"\"Generates a report of the data.\n\n    Args:\n        station: Station of interest.\n        variable: Variable of interest.\n        start_time: Start time.\n        end_time: End time.\n        maximum: The maximum allowed value.\n        minimum: The minimum allowed value.\n        is_validated: Whether to retrieve validated or non-validated data.\n\n    Returns:\n        A tuple with the summary report and the granular report.\n    \"\"\"\n    var = Variable.objects.get(variable_code=variable)\n\n    data = get_data_to_validate(station, variable, start_time, end_time, is_validated)\n    if data.empty:\n        return pd.DataFrame(), pd.DataFrame()\n\n    suspicious = flag_suspicious_data(data, maximum, minimum, var.diff_error)\n    summary = generate_daily_summary(\n        data, suspicious, var.null_limit, var.is_cumulative\n    )\n    granular = pd.concat([data, suspicious], axis=1)\n    return summary, granular\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.get_date_range","title":"<code>get_date_range(station, variable)</code>","text":"<p>Get the date range covered by a chosen station and variable.</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Code for the chosen station</p> required <code>variable</code> <code>str</code> <p>Code for the chosen variable</p> required <p>Returns:</p> Type Description <code>tuple[str, str]</code> <p>tuple[str, str]: Start date, end date</p> Source code in <code>measurement/filters.py</code> <pre><code>def get_date_range(station: str, variable: str) -&gt; tuple[str, str]:\n    \"\"\"Get the date range covered by a chosen station and variable.\n\n    Args:\n        station (str): Code for the chosen station\n        variable (str): Code for the chosen variable\n\n    Returns:\n        tuple[str, str]: Start date, end date\n    \"\"\"\n    filter_vals = Measurement.objects.filter(\n        station__station_code=station,\n        variable__variable_code=variable,\n    ).aggregate(\n        first_date=Min(\"time\"),\n        last_date=Max(\"time\"),\n    )\n\n    first_date = to_local_time(filter_vals[\"first_date\"]).strftime(\"%Y-%m-%d\")\n    last_date = to_local_time(filter_vals[\"last_date\"]).strftime(\"%Y-%m-%d\")\n    return first_date, last_date\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.get_min_max","title":"<code>get_min_max(station, variable)</code>","text":"<p>Get the min and max of the data for a chosen station and variable.</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Code for the chosen station</p> required <code>variable</code> <code>str</code> <p>Code for the chosen variable</p> required <p>Returns:</p> Type Description <code>tuple[Decimal, Decimal]</code> <p>tuple[Decimal, Decimal]: Min value, max value</p> Source code in <code>measurement/filters.py</code> <pre><code>def get_min_max(\n    station, variable\n) -&gt; tuple[\n    Decimal,\n    Decimal,\n]:\n    \"\"\"Get the min and max of the data for a chosen station and variable.\n\n    Args:\n        station (str): Code for the chosen station\n        variable (str): Code for the chosen variable\n\n    Returns:\n        tuple[Decimal, Decimal]: Min value, max value\n    \"\"\"\n    filter_vals = Measurement.objects.filter(\n        station__station_code=station,\n        variable__variable_code=variable,\n    ).aggregate(\n        min_value=Min(\"minimum\"),\n        max_value=Max(\"maximum\"),\n    )\n\n    min_value = filter_vals[\"min_value\"]\n    max_value = filter_vals[\"max_value\"]\n\n    return min_value, max_value\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.get_station_options","title":"<code>get_station_options(station_codes)</code>","text":"<p>Get valid station options and default value based on permissions and data availability.</p> <p>Parameters:</p> Name Type Description Default <code>station_codes</code> <code>list[str]</code> <p>List of station codes based on permissions</p> required <p>Returns:</p> Type Description <code>tuple[list[dict[str, str]], str | None]</code> <p>tuple[list[dict], str]: Options for the station dropdown, default value</p> Source code in <code>measurement/filters.py</code> <pre><code>def get_station_options(\n    station_codes: list[str],\n) -&gt; tuple[list[dict[str, str]], str | None]:\n    \"\"\"Get valid station options and default value based on permissions and data\n    availability.\n\n    Args:\n        station_codes (list[str]): List of station codes based on permissions\n\n    Returns:\n        tuple[list[dict], str]: Options for the station dropdown, default value\n    \"\"\"\n    stations_with_measurements = Station.objects.filter(\n        ~Q(variables=\"\"), station_code__in=station_codes\n    ).values_list(\"station_code\", flat=True)\n\n    station_options = [\n        {\"label\": station_code, \"value\": station_code}\n        for station_code in stations_with_measurements\n    ]\n    station_value = station_options[0][\"value\"] if station_options else None\n    return station_options, station_value\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.get_variable_options","title":"<code>get_variable_options(station)</code>","text":"<p>Get valid variable options and default value based on the chosen station.</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Code for the chosen station</p> required <p>Returns:</p> Type Description <code>tuple[list[dict[str, str]], str | None]</code> <p>tuple[list[dict], str]: Options for the variable dropdown, default value</p> Source code in <code>measurement/filters.py</code> <pre><code>def get_variable_options(station: str) -&gt; tuple[list[dict[str, str]], str | None]:\n    \"\"\"Get valid variable options and default value based on the chosen station.\n\n    Args:\n        station (str): Code for the chosen station\n\n    Returns:\n        tuple[list[dict], str]: Options for the variable dropdown, default value\n    \"\"\"\n    variable_codes = Station.objects.get(station_code=station).variables_list\n    variable_dicts = Variable.objects.filter(variable_code__in=variable_codes).values(\n        \"name\", \"variable_code\"\n    )\n\n    variable_options = [\n        {\n            \"label\": variable[\"name\"],\n            \"value\": variable[\"variable_code\"],\n        }\n        for variable in variable_dicts\n    ]\n\n    variable_value = variable_options[0][\"value\"] if variable_options else None\n    return variable_options, variable_value\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.populate_stations_dropdown","title":"<code>populate_stations_dropdown(station_codes)</code>","text":"<p>Populate the station dropdown based on the list of station codes.</p> Source code in <code>measurement/dash_apps/daily_validation.py</code> <pre><code>@app.callback(\n    [Output(\"station_drop\", \"options\"), Output(\"station_drop\", \"value\")],\n    Input(\"stations_list\", \"children\"),\n)\ndef populate_stations_dropdown(\n    station_codes: list[str],\n) -&gt; tuple[list[dict[str, str]], str | None]:\n    \"\"\"Populate the station dropdown based on the list of station codes.\"\"\"\n    return get_station_options(station_codes)\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.populate_variable_dropdown","title":"<code>populate_variable_dropdown(chosen_station)</code>","text":"<p>Populate the variable dropdown based on the chosen station.</p> Source code in <code>measurement/dash_apps/daily_validation.py</code> <pre><code>@app.callback(\n    [Output(\"variable_drop\", \"options\"), Output(\"variable_drop\", \"value\")],\n    Input(\"station_drop\", \"value\"),\n)\ndef populate_variable_dropdown(\n    chosen_station: str,\n) -&gt; tuple[list[dict[str, str]], str | None]:\n    \"\"\"Populate the variable dropdown based on the chosen station.\"\"\"\n    return get_variable_options(chosen_station)\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.reset_validated_days","title":"<code>reset_validated_days(station, variable, start_date, end_date)</code>","text":"<p>Resets validation and active status for the selected data.</p> <p>It also deletes the associated report data.</p> <p>TODO: should this also reset any modified value, minimum or maximum entries?</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Station code</p> required <code>variable</code> <code>str</code> <p>Variable code</p> required <code>start_date</code> <code>str</code> <p>Start date</p> required <code>end_date</code> <code>str</code> <p>End date</p> required Source code in <code>measurement/validation.py</code> <pre><code>def reset_validated_days(\n    station: str, variable: str, start_date: str, end_date: str\n) -&gt; None:\n    \"\"\"Resets validation and active status for the selected data.\n\n    It also deletes the associated report data.\n\n    TODO: should this also reset any modified value, minimum or maximum entries?\n\n    Args:\n        station (str): Station code\n        variable (str): Variable code\n        start_date (str): Start date\n        end_date (str): End date\n    \"\"\"\n    tz = timezone.get_current_timezone()\n\n    # To update we use the exact date range.\n    start_date_ = datetime.strptime(start_date, \"%Y-%m-%d\").replace(tzinfo=tz)\n    end_date_ = datetime.strptime(end_date, \"%Y-%m-%d\").replace(tzinfo=tz)\n    Measurement.objects.filter(\n        station__station_code=station,\n        variable__variable_code=variable,\n        time__date__range=(start_date_.date(), end_date_.date()),\n    ).update(is_validated=False, is_active=True)\n\n    # To remove reports we use an extended date range to include the whole month.\n    start_date_, end_date_ = reporting.reformat_dates(start_date, end_date)\n    reporting.remove_report_data_in_range(station, variable, start_date_, end_date_)\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.reset_validated_entries","title":"<code>reset_validated_entries(ids)</code>","text":"<p>Resets validation and activation status for the selected data.</p> <p>TODO: should this also reset any modified value, minimum or maximum entries?</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>list</code> <p>List of measurement ids to reset.</p> required Source code in <code>measurement/validation.py</code> <pre><code>def reset_validated_entries(ids: list) -&gt; None:\n    \"\"\"Resets validation and activation status for the selected data.\n\n    TODO: should this also reset any modified value, minimum or maximum entries?\n\n    Args:\n        ids (list): List of measurement ids to reset.\n    \"\"\"\n    times: list[datetime] = []\n    for _id in ids:\n        current = Measurement.objects.get(id=_id)\n        current.is_validated = False\n        current.is_active = True\n        current.save()\n        times.append(current.time)\n\n    station = current.station.station_code\n    variable = current.variable.variable_code\n    start_time, end_time = reporting.reformat_dates(\n        to_local_time(min(times)).strftime(\"%Y-%m-%d\"),\n        to_local_time(max(times)).strftime(\"%Y-%m-%d\"),\n    )\n\n    reporting.remove_report_data_in_range(station, variable, start_time, end_time)\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.save_validated_days","title":"<code>save_validated_days(data)</code>","text":"<p>Saves the validated days to the database and launches the report calculation.</p> <p>Only the data that is flagged as \"validate?\" will be saved. The only updated field is is_active. To update the value, maximum or minimum, use save_validated_entries.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The dataframe with the validated data.</p> required Source code in <code>measurement/validation.py</code> <pre><code>def save_validated_days(data: pd.DataFrame) -&gt; None:\n    \"\"\"Saves the validated days to the database and launches the report calculation.\n\n    Only the data that is flagged as \"validate?\" will be saved. The only updated field\n    is is_active. To update the value, maximum or minimum, use save_validated_entries.\n\n    Args:\n        data: The dataframe with the validated data.\n    \"\"\"\n    tz = timezone.get_current_timezone()\n    validate = data[data[\"validate?\"]]\n    for _, row in validate.iterrows():\n        day = datetime.strptime(row[\"date\"], \"%Y-%m-%d\").replace(tzinfo=tz)\n        Measurement.objects.filter(\n            station__station_code=row[\"station\"],\n            variable__variable_code=row[\"variable\"],\n            time__date=day.date(),\n        ).update(is_validated=True, is_active=not row[\"deactivate?\"])\n\n    station = validate[\"station\"].iloc[0]\n    variable = validate[\"variable\"].iloc[0]\n    start_time = validate[\"date\"].min()\n    end_time = validate[\"date\"].max()\n\n    try:\n        reporting.launch_reports_calculation(station, variable, start_time, end_time)\n    except Exception as e:\n        reset_validated_days(station, variable, start_time, end_time)\n        raise e\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.save_validated_entries","title":"<code>save_validated_entries(data)</code>","text":"<p>Saves the validated data to the database.</p> <p>Only the data that is flagged as \"validate?\" will be saved. Possible updated fields are: value, maximum, minimum and is_active.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The dataframe with the validated data.</p> required Source code in <code>measurement/validation.py</code> <pre><code>def save_validated_entries(data: pd.DataFrame) -&gt; None:\n    \"\"\"Saves the validated data to the database.\n\n    Only the data that is flagged as \"validate?\" will be saved. Possible updated fields\n    are: value, maximum, minimum and is_active.\n\n    Args:\n        data: The dataframe with the validated data.\n    \"\"\"\n    times: list[datetime] = []\n    for _, row in data[data[\"validate?\"]].iterrows():\n        current = Measurement.objects.get(id=row[\"id\"])\n        times.append(current.time)\n\n        update = {\"is_validated\": True, \"is_active\": not row[\"deactivate?\"]}\n        if current.value != row[\"value\"]:\n            update[\"value\"] = row[\"value\"]\n        if \"maximum\" in row and current.maximum != row[\"maximum\"]:\n            update[\"maximum\"] = row[\"maximum\"]\n        if \"minimum\" in row and current.minimum != row[\"minimum\"]:\n            update[\"minimum\"] = row[\"minimum\"]\n\n        Measurement.objects.filter(id=row[\"id\"]).update(**update)\n\n    tz = timezone.get_current_timezone()\n    station = current.station.station_code\n    variable = current.variable.variable_code\n    start_time = min(times).astimezone(tz).strftime(\"%Y-%m-%d\")\n    end_time = max(times).astimezone(tz).strftime(\"%Y-%m-%d\")\n\n    try:\n        reporting.launch_reports_calculation(station, variable, start_time, end_time)\n    except Exception as e:\n        ids = data[data[\"validate?\"]][\"id\"].tolist()\n        reset_validated_entries(ids)\n        raise e\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.set_date_range_min_max","title":"<code>set_date_range_min_max(chosen_station, chosen_variable)</code>","text":"<p>Set the default date range and min/max based on the chosen station and variable.</p> Source code in <code>measurement/dash_apps/daily_validation.py</code> <pre><code>@app.callback(\n    [\n        Output(\"date_range_picker\", \"start_date\"),\n        Output(\"date_range_picker\", \"end_date\"),\n        Output(\"minimum_input\", \"value\"),\n        Output(\"maximum_input\", \"value\"),\n    ],\n    [\n        Input(\"station_drop\", \"value\"),\n        Input(\"variable_drop\", \"value\"),\n    ],\n)\ndef set_date_range_min_max(\n    chosen_station, chosen_variable\n) -&gt; tuple[\n    str,\n    str,\n    Decimal,\n    Decimal,\n]:\n    \"\"\"Set the default date range and min/max based on the chosen station and\n    variable.\n    \"\"\"\n    start_date, end_date = get_date_range(chosen_station, chosen_variable)\n    min_val, max_val = get_min_max(chosen_station, chosen_variable)\n    return start_date, end_date, min_val, max_val\n</code></pre>"},{"location":"reference/measurement/dash_apps/daily_validation/#measurement.dash_apps.daily_validation.set_detail_date_range","title":"<code>set_detail_date_range(daily_row_data)</code>","text":"<p>Set the min and max date for the detail date picker based on the daily data.</p> <p>This will run whenever the data is updated.</p> <p>Parameters:</p> Name Type Description Default <code>daily_row_data</code> <code>list[dict]</code> <p>Data for the daily table</p> required <p>Returns:</p> Type Description <code>tuple[str, str]</code> <p>tuple[str, str]: Min date, max date</p> Source code in <code>measurement/dash_apps/daily_validation.py</code> <pre><code>@app.callback(\n    Output(\"detail-date-picker\", \"min_date_allowed\"),\n    Output(\"detail-date-picker\", \"max_date_allowed\"),\n    Input(\"table_daily\", \"rowData\"),\n    prevent_initial_call=True,\n)\ndef set_detail_date_range(daily_row_data) -&gt; tuple[str, str]:\n    \"\"\"Set the min and max date for the detail date picker based on the daily data.\n\n    This will run whenever the data is updated.\n\n    Args:\n        daily_row_data (list[dict]): Data for the daily table\n\n    Returns:\n        tuple[str, str]: Min date, max date\n    \"\"\"\n    if daily_row_data:\n        min_date = min(daily_row_data, key=lambda x: x[\"date\"])[\"date\"]\n        max_date = max(daily_row_data, key=lambda x: x[\"date\"])[\"date\"]\n    else:\n        min_date = None\n        max_date = None\n    return min_date, max_date\n</code></pre>"},{"location":"reference/measurement/dash_apps/data_report/","title":"data_report","text":""},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report","title":"<code>measurement.dash_apps.data_report</code>","text":""},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report-attributes","title":"Attributes","text":""},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.MAX_POINTS","title":"<code>MAX_POINTS = 1000</code>  <code>module-attribute</code>","text":"<p>Maximum number of points to display in the graph.</p>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.app","title":"<code>app = DjangoDash('DataReport', external_stylesheets=[dbc.themes.BOOTSTRAP, '/static/styles/dashstyle.css'])</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.filters","title":"<code>filters = html.Div(style={'width': '286px'}, children=[html.Label('Temporality:', style={'font-weight': 'bold'}), dcc.Dropdown(id='temporality_drop', options=[{'label': 'Raw measurement', 'value': 'measurement'}, {'label': 'Validated measurement', 'value': 'validated'}, {'label': 'Hourly', 'value': 'hourly'}, {'label': 'Daily', 'value': 'daily'}, {'label': 'Monthly', 'value': 'monthly'}], value='measurement'), html.Br(), html.Label('Station:', style={'font-weight': 'bold'}), dcc.Dropdown(id='station_drop', options=[], value=None), html.Br(), html.Label('Variable:', style={'font-weight': 'bold'}), dcc.Dropdown(id='variable_drop', options=[], value=None), html.Br(), html.Label('Date Range:', style={'font-weight': 'bold'}), dcc.DatePickerRange(id='date_range_picker', display_format='YYYY-MM-DD', start_date=None, end_date=None), html.Br(), html.Div(id='csv_div', style={'margin-top': '30px'})])</code>  <code>module-attribute</code>","text":""},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report-classes","title":"Classes","text":""},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.Variable-attributes","title":"Attributes","text":""},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.Variable-functions","title":"Functions","text":""},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report-functions","title":"Functions","text":""},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.create_empty_plot","title":"<code>create_empty_plot()</code>","text":"<p>Creates empty plot</p> <p>Returns:</p> Type Description <code>scatter</code> <p>px.Scatter: Plot</p> Source code in <code>measurement/dash_apps/plots.py</code> <pre><code>def create_empty_plot() -&gt; px.scatter:\n    \"\"\"Creates empty plot\n\n    Returns:\n        px.Scatter: Plot\n    \"\"\"\n    fig = px.scatter(title=\"No data to plot\")\n    fig.update_layout(\n        autosize=True,\n        margin=dict(\n            l=50,\n            r=20,\n            b=0,\n            t=50,\n        ),\n        title_font=dict(\n            size=14,\n        ),\n    )\n    return fig\n</code></pre>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.create_report_plot","title":"<code>create_report_plot(data, variable_name, station_code, agg='')</code>","text":"<p>Creates plot for Report app</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Data</p> required <code>variable_name</code> <code>str</code> <p>Variable name</p> required <code>station_code</code> <code>str</code> <p>Station code</p> required <code>agg</code> <code>str</code> <p>Aggregation level. Defaults to \"\".</p> <code>''</code> <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: Plot</p> Source code in <code>measurement/dash_apps/plots.py</code> <pre><code>def create_report_plot(\n    data: pd.DataFrame,\n    variable_name: str,\n    station_code: str,\n    agg: str = \"\",\n) -&gt; go.Figure:\n    \"\"\"Creates plot for Report app\n\n    Args:\n        data (pd.DataFrame): Data\n        variable_name (str): Variable name\n        station_code (str): Station code\n        agg (str, optional): Aggregation level. Defaults to \"\".\n\n    Returns:\n        go.Figure: Plot\n    \"\"\"\n\n    fig = px.scatter(\n        data,\n        x=\"time\",\n        y=[\"value\", \"minimum\", \"maximum\"],\n        title=f\"{station_code} - {variable_name}\" + agg,\n        labels={\n            \"time\": \"Date\",\n        },\n    )\n\n    fig.for_each_trace(\n        lambda trace: trace.update(name=trace.name.title()),\n    )\n    fig.update_traces(marker=dict(size=3))\n    fig.update_layout(\n        legend=dict(\n            title=dict(text=\"\", font=dict(size=12)),\n            x=1,\n            y=1,\n            xanchor=\"auto\",\n            yanchor=\"auto\",\n        ),\n        autosize=True,\n        margin=dict(\n            l=50,\n            r=20,\n            b=0,\n            t=50,\n        ),\n        yaxis_title=f\"{variable_name}\",\n        title_font=dict(\n            size=14,\n        ),\n    )\n\n    return fig\n</code></pre>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.download_csv_report","title":"<code>download_csv_report(n_clicks, temporality, station, variable, start_time, end_time)</code>","text":"Source code in <code>measurement/dash_apps/data_report.py</code> <pre><code>@app.callback(\n    [\n        Output(\"download_csv\", \"data\"),\n        Output(\"csv_alert_div\", \"children\"),\n    ],\n    Input(\"csv_button\", \"n_clicks\"),\n    [\n        State(\"temporality_drop\", \"value\"),\n        State(\"station_drop\", \"value\"),\n        State(\"variable_drop\", \"value\"),\n        State(\"date_range_picker\", \"start_date\"),\n        State(\"date_range_picker\", \"end_date\"),\n    ],\n    prevent_initial_call=True,\n)\ndef download_csv_report(\n    n_clicks: int,\n    temporality: str,\n    station: str,\n    variable: str,\n    start_time: str,\n    end_time: str,\n):\n    if n_clicks and n_clicks &gt; 0:\n        try:\n            file = (\n                get_report_data_from_db(\n                    station=station,\n                    variable=variable,\n                    start_time=start_time,\n                    end_time=end_time,\n                    report_type=temporality,\n                    whole_months=False,\n                )\n                .drop(columns=[\"station\", \"variable\", \"data_import_id\"])\n                .dropna(axis=1, how=\"all\")\n                .dropna(axis=0)\n                .to_csv(index=False)\n            )\n            return (\n                dict(\n                    content=file,\n                    filename=f\"{station}_{variable}_{temporality}_{start_time}-{end_time}.csv\",\n                ),\n                [],\n            )\n        except Exception as e:\n            alert = dbc.Alert(f\"Could not export data to CSV: {e}\", color=\"warning\")\n            return None, [alert]\n\n    return None, []\n</code></pre>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.get_aggregation_level","title":"<code>get_aggregation_level(timeseries, aggregate=False)</code>","text":"<p>Calculates the aggregation level based on the timeseries separation.</p> <p>Parameters:</p> Name Type Description Default <code>timeseries</code> <code>Series</code> <p>Time data to be aggregated.</p> required <code>aggregate</code> <code>bool</code> <p>Flag indicating if there should be aggregation</p> <code>False</code> Return <p>String indicating the aggregation level as \" - LEVEL UNITS aggregation\" or an empty string if no aggregation is required.</p> Source code in <code>measurement/dash_apps/plots.py</code> <pre><code>def get_aggregation_level(timeseries: pd.Series, aggregate: bool = False) -&gt; str:\n    \"\"\"Calculates the aggregation level based on the timeseries separation.\n\n    Args:\n        timeseries: Time data to be aggregated.\n        aggregate: Flag indicating if there should be aggregation\n\n    Return:\n        String indicating the aggregation level as \" - LEVEL UNITS aggregation\" or an\n        empty string if no aggregation is required.\n    \"\"\"\n    if not aggregate:\n        return \"\"\n\n    aggregation = timeseries.diff().dt.seconds.median() / 60\n    unit = \"minutes\"\n    if aggregation &gt; 60:\n        aggregation = aggregation / 60\n        unit = \"hours\"\n        if aggregation &gt; 24:\n            aggregation = aggregation / 24\n            unit = \"days\"\n    return f\" - {aggregation:.1f} {unit} aggregation\"\n</code></pre>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.get_date_range","title":"<code>get_date_range(station, variable)</code>","text":"<p>Get the date range covered by a chosen station and variable.</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Code for the chosen station</p> required <code>variable</code> <code>str</code> <p>Code for the chosen variable</p> required <p>Returns:</p> Type Description <code>tuple[str, str]</code> <p>tuple[str, str]: Start date, end date</p> Source code in <code>measurement/filters.py</code> <pre><code>def get_date_range(station: str, variable: str) -&gt; tuple[str, str]:\n    \"\"\"Get the date range covered by a chosen station and variable.\n\n    Args:\n        station (str): Code for the chosen station\n        variable (str): Code for the chosen variable\n\n    Returns:\n        tuple[str, str]: Start date, end date\n    \"\"\"\n    filter_vals = Measurement.objects.filter(\n        station__station_code=station,\n        variable__variable_code=variable,\n    ).aggregate(\n        first_date=Min(\"time\"),\n        last_date=Max(\"time\"),\n    )\n\n    first_date = to_local_time(filter_vals[\"first_date\"]).strftime(\"%Y-%m-%d\")\n    last_date = to_local_time(filter_vals[\"last_date\"]).strftime(\"%Y-%m-%d\")\n    return first_date, last_date\n</code></pre>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.get_report_data_from_db","title":"<code>get_report_data_from_db(station, variable, start_time, end_time, report_type, whole_months=True)</code>  <code>cached</code>","text":"<p>Retrieves the report data from the database.</p> <p>Time is set to the station timezone and the time range is inclusive of both start and end times.</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Station of interest.</p> required <code>variable</code> <code>str</code> <p>Variable of interest.</p> required <code>start_time</code> <code>str</code> <p>Start time.</p> required <code>end_time</code> <code>str</code> <p>End time.</p> required <code>report_type</code> <code>str</code> <p>Type of report to retrieve.</p> required <code>whole_months</code> <code>bool</code> <p>Whether to cover whole months or not.</p> <code>True</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dataframe with the report data.</p> Source code in <code>measurement/reporting.py</code> <pre><code>@lru_cache(1)\ndef get_report_data_from_db(\n    station: str,\n    variable: str,\n    start_time: str,\n    end_time: str,\n    report_type: str,\n    whole_months: bool = True,\n) -&gt; pd.DataFrame:\n    \"\"\"Retrieves the report data from the database.\n\n    Time is set to the station timezone and the time range is inclusive of both\n    start and end times.\n\n    Args:\n        station: Station of interest.\n        variable: Variable of interest.\n        start_time: Start time.\n        end_time: End time.\n        report_type: Type of report to retrieve.\n        whole_months: Whether to cover whole months or not.\n\n    Returns:\n        A dataframe with the report data.\n    \"\"\"\n    start_time_, end_time_ = reformat_dates(start_time, end_time, whole_months)\n\n    if report_type == \"measurement\":\n        data = pd.DataFrame.from_records(\n            Measurement.objects.filter(\n                station__station_code=station,\n                variable__variable_code=variable,\n                time__date__range=(start_time_.date(), end_time_.date()),\n            ).values()\n        )\n        raw_cols = [col for col in data.columns if col.startswith(\"raw_\")]\n        normal = [col.strip(\"raw_\") for col in raw_cols]\n        data = data.drop(columns=normal).rename(columns=dict(zip(raw_cols, normal)))\n\n    elif report_type == \"validated\":\n        data = pd.DataFrame.from_records(\n            Measurement.objects.filter(\n                station__station_code=station,\n                variable__variable_code=variable,\n                time__date__range=(start_time_.date(), end_time_.date()),\n                is_validated=True,\n                is_active=True,\n            ).values()\n        )\n        raw_cols = [col for col in data.columns if col.startswith(\"raw_\")]\n        data = data.drop(columns=raw_cols)\n\n    else:\n        data = pd.DataFrame.from_records(\n            Report.objects.filter(\n                station__station_code=station,\n                variable__variable_code=variable,\n                time__date__range=(start_time_.date(), end_time_.date()),\n                report_type=report_type,\n            ).values()\n        )\n\n    data = data.rename(columns={\"station_id\": \"station\", \"variable_id\": \"variable\"})\n\n    if data.empty:\n        return data\n\n    tz = timezone.get_current_timezone()\n    data[\"time\"] = data[\"time\"].dt.tz_convert(tz)\n    return data.sort_values(\"time\")\n</code></pre>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.get_station_options","title":"<code>get_station_options(station_codes)</code>","text":"<p>Get valid station options and default value based on permissions and data availability.</p> <p>Parameters:</p> Name Type Description Default <code>station_codes</code> <code>list[str]</code> <p>List of station codes based on permissions</p> required <p>Returns:</p> Type Description <code>tuple[list[dict[str, str]], str | None]</code> <p>tuple[list[dict], str]: Options for the station dropdown, default value</p> Source code in <code>measurement/filters.py</code> <pre><code>def get_station_options(\n    station_codes: list[str],\n) -&gt; tuple[list[dict[str, str]], str | None]:\n    \"\"\"Get valid station options and default value based on permissions and data\n    availability.\n\n    Args:\n        station_codes (list[str]): List of station codes based on permissions\n\n    Returns:\n        tuple[list[dict], str]: Options for the station dropdown, default value\n    \"\"\"\n    stations_with_measurements = Station.objects.filter(\n        ~Q(variables=\"\"), station_code__in=station_codes\n    ).values_list(\"station_code\", flat=True)\n\n    station_options = [\n        {\"label\": station_code, \"value\": station_code}\n        for station_code in stations_with_measurements\n    ]\n    station_value = station_options[0][\"value\"] if station_options else None\n    return station_options, station_value\n</code></pre>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.get_variable_options","title":"<code>get_variable_options(station)</code>","text":"<p>Get valid variable options and default value based on the chosen station.</p> <p>Parameters:</p> Name Type Description Default <code>station</code> <code>str</code> <p>Code for the chosen station</p> required <p>Returns:</p> Type Description <code>tuple[list[dict[str, str]], str | None]</code> <p>tuple[list[dict], str]: Options for the variable dropdown, default value</p> Source code in <code>measurement/filters.py</code> <pre><code>def get_variable_options(station: str) -&gt; tuple[list[dict[str, str]], str | None]:\n    \"\"\"Get valid variable options and default value based on the chosen station.\n\n    Args:\n        station (str): Code for the chosen station\n\n    Returns:\n        tuple[list[dict], str]: Options for the variable dropdown, default value\n    \"\"\"\n    variable_codes = Station.objects.get(station_code=station).variables_list\n    variable_dicts = Variable.objects.filter(variable_code__in=variable_codes).values(\n        \"name\", \"variable_code\"\n    )\n\n    variable_options = [\n        {\n            \"label\": variable[\"name\"],\n            \"value\": variable[\"variable_code\"],\n        }\n        for variable in variable_dicts\n    ]\n\n    variable_value = variable_options[0][\"value\"] if variable_options else None\n    return variable_options, variable_value\n</code></pre>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.populate_stations_dropdown","title":"<code>populate_stations_dropdown(station_codes)</code>","text":"<p>Populate the station dropdown based on the list of station codes.</p> Source code in <code>measurement/dash_apps/data_report.py</code> <pre><code>@app.callback(\n    [Output(\"station_drop\", \"options\"), Output(\"station_drop\", \"value\")],\n    Input(\"stations_list\", \"children\"),\n)\ndef populate_stations_dropdown(\n    station_codes: list[str],\n) -&gt; tuple[list[dict[str, str]], str | None]:\n    \"\"\"Populate the station dropdown based on the list of station codes.\"\"\"\n    return get_station_options(station_codes)\n</code></pre>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.populate_variable_dropdown","title":"<code>populate_variable_dropdown(chosen_station)</code>","text":"<p>Populate the variable dropdown based on the chosen station.</p> Source code in <code>measurement/dash_apps/data_report.py</code> <pre><code>@app.callback(\n    [Output(\"variable_drop\", \"options\"), Output(\"variable_drop\", \"value\")],\n    Input(\"station_drop\", \"value\"),\n)\ndef populate_variable_dropdown(\n    chosen_station: str,\n) -&gt; tuple[list[dict[str, str]], str | None]:\n    \"\"\"Populate the variable dropdown based on the chosen station.\"\"\"\n    return get_variable_options(chosen_station)\n</code></pre>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.set_date_range","title":"<code>set_date_range(chosen_station, chosen_variable)</code>","text":"<p>Set the default date range based on the chosen station and variable.</p> Source code in <code>measurement/dash_apps/data_report.py</code> <pre><code>@app.callback(\n    [\n        Output(\"date_range_picker\", \"start_date\"),\n        Output(\"date_range_picker\", \"end_date\"),\n    ],\n    [\n        Input(\"station_drop\", \"value\"),\n        Input(\"variable_drop\", \"value\"),\n    ],\n)\ndef set_date_range(\n    chosen_station, chosen_variable\n) -&gt; tuple[\n    str,\n    str,\n]:\n    \"\"\"Set the default date range based on the chosen station and variable.\"\"\"\n    return get_date_range(chosen_station, chosen_variable)\n</code></pre>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.update_alert","title":"<code>update_alert(temporality, station, variable, start_time, end_time, figure)</code>","text":"Source code in <code>measurement/dash_apps/data_report.py</code> <pre><code>@app.callback(\n    [\n        Output(\"data_alert_div\", \"children\"),\n        Output(\"csv_div\", \"children\"),\n    ],\n    [\n        Input(\"temporality_drop\", \"value\"),\n        Input(\"station_drop\", \"value\"),\n        Input(\"variable_drop\", \"value\"),\n        Input(\"date_range_picker\", \"start_date\"),\n        Input(\"date_range_picker\", \"end_date\"),\n    ],\n    State(\"data_report_graph\", \"figure\"),\n)\ndef update_alert(\n    temporality: str,\n    station: str,\n    variable: str,\n    start_time: str,\n    end_time: str,\n    figure: go.Figure,\n):\n    if figure[\"layout\"][\"title\"][\"text\"] == \"Data not found\":\n        alert = dbc.Alert(\n            \"No data was found with the selected criteria\", color=\"warning\"\n        )\n        return [alert], []\n    else:\n        download = html.Button(\"Download CSV\", id=\"csv_button\")\n        display = html.Button(\n            \"Display data\",\n            id=\"display_button\",\n            style={\"margin-left\": \"10px\"},\n            n_clicks=0,\n        )\n        return [], [download, display]\n</code></pre>"},{"location":"reference/measurement/dash_apps/data_report/#measurement.dash_apps.data_report.update_graph","title":"<code>update_graph(relayout_data, n_clicks, temporality, station, variable, start_time, end_time, figure, callback_context)</code>","text":"Source code in <code>measurement/dash_apps/data_report.py</code> <pre><code>@app.callback(\n    Output(\"data_report_graph\", \"figure\"),\n    [\n        Input(\"data_report_graph\", \"relayoutData\"),\n        Input(\"display_button\", \"n_clicks\"),\n    ],\n    [\n        State(\"temporality_drop\", \"value\"),\n        State(\"station_drop\", \"value\"),\n        State(\"variable_drop\", \"value\"),\n        State(\"date_range_picker\", \"start_date\"),\n        State(\"date_range_picker\", \"end_date\"),\n        State(\"data_report_graph\", \"figure\"),\n    ],\n)\ndef update_graph(\n    relayout_data: dict,\n    n_clicks: int,\n    temporality: str,\n    station: str,\n    variable: str,\n    start_time: str,\n    end_time: str,\n    figure: go.Figure,\n    callback_context,\n) -&gt; go.Figure:\n    ctx = callback_context\n    triggered_id = ctx.triggered[0][\"prop_id\"].split(\".\")[0] if ctx.triggered else \"\"\n\n    if not n_clicks:\n        # After the first load, n_clicks is always &gt; 0, so zooming works\n        return figure\n\n    # This is cached, so it's not a big deal to call it multiple times\n    data = get_report_data_from_db(\n        station=station,\n        variable=variable,\n        start_time=start_time,\n        end_time=end_time,\n        report_type=temporality,\n        whole_months=False,\n    )\n    if data.empty:\n        return create_empty_plot()\n\n    if triggered_id == \"data_report_graph\" and \"xaxis.range[0]\" in relayout_data:\n        start = relayout_data[\"xaxis.range[0]\"]\n        end = relayout_data[\"xaxis.range[1]\"]\n        data = data[(data[\"time\"] &gt;= start) &amp; (data[\"time\"] &lt;= end)]\n\n    try:\n        every = max(1, len(data) // MAX_POINTS)\n        resampled = data.iloc[::every]\n        agg = get_aggregation_level(resampled[\"time\"], every &gt; 1)\n\n        plot = create_report_plot(\n            data=resampled,\n            variable_name=Variable.objects.get(variable_code=variable).name,\n            station_code=station,\n            agg=agg,\n        )\n        if \"xaxis.range[0]\" in relayout_data:\n            plot[\"layout\"][\"xaxis\"][\"range\"] = [\n                relayout_data[\"xaxis.range[0]\"],\n                relayout_data[\"xaxis.range[1]\"],\n            ]\n        return plot\n\n    except Exception as e:\n        getLogger().error(e)\n        return create_empty_plot()\n</code></pre>"},{"location":"reference/measurement/dash_apps/plots/","title":"plots","text":""},{"location":"reference/measurement/dash_apps/plots/#measurement.dash_apps.plots","title":"<code>measurement.dash_apps.plots</code>","text":""},{"location":"reference/measurement/dash_apps/plots/#measurement.dash_apps.plots-functions","title":"Functions","text":""},{"location":"reference/measurement/dash_apps/plots/#measurement.dash_apps.plots.create_empty_plot","title":"<code>create_empty_plot()</code>","text":"<p>Creates empty plot</p> <p>Returns:</p> Type Description <code>scatter</code> <p>px.Scatter: Plot</p> Source code in <code>measurement/dash_apps/plots.py</code> <pre><code>def create_empty_plot() -&gt; px.scatter:\n    \"\"\"Creates empty plot\n\n    Returns:\n        px.Scatter: Plot\n    \"\"\"\n    fig = px.scatter(title=\"No data to plot\")\n    fig.update_layout(\n        autosize=True,\n        margin=dict(\n            l=50,\n            r=20,\n            b=0,\n            t=50,\n        ),\n        title_font=dict(\n            size=14,\n        ),\n    )\n    return fig\n</code></pre>"},{"location":"reference/measurement/dash_apps/plots/#measurement.dash_apps.plots.create_report_plot","title":"<code>create_report_plot(data, variable_name, station_code, agg='')</code>","text":"<p>Creates plot for Report app</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Data</p> required <code>variable_name</code> <code>str</code> <p>Variable name</p> required <code>station_code</code> <code>str</code> <p>Station code</p> required <code>agg</code> <code>str</code> <p>Aggregation level. Defaults to \"\".</p> <code>''</code> <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: Plot</p> Source code in <code>measurement/dash_apps/plots.py</code> <pre><code>def create_report_plot(\n    data: pd.DataFrame,\n    variable_name: str,\n    station_code: str,\n    agg: str = \"\",\n) -&gt; go.Figure:\n    \"\"\"Creates plot for Report app\n\n    Args:\n        data (pd.DataFrame): Data\n        variable_name (str): Variable name\n        station_code (str): Station code\n        agg (str, optional): Aggregation level. Defaults to \"\".\n\n    Returns:\n        go.Figure: Plot\n    \"\"\"\n\n    fig = px.scatter(\n        data,\n        x=\"time\",\n        y=[\"value\", \"minimum\", \"maximum\"],\n        title=f\"{station_code} - {variable_name}\" + agg,\n        labels={\n            \"time\": \"Date\",\n        },\n    )\n\n    fig.for_each_trace(\n        lambda trace: trace.update(name=trace.name.title()),\n    )\n    fig.update_traces(marker=dict(size=3))\n    fig.update_layout(\n        legend=dict(\n            title=dict(text=\"\", font=dict(size=12)),\n            x=1,\n            y=1,\n            xanchor=\"auto\",\n            yanchor=\"auto\",\n        ),\n        autosize=True,\n        margin=dict(\n            l=50,\n            r=20,\n            b=0,\n            t=50,\n        ),\n        yaxis_title=f\"{variable_name}\",\n        title_font=dict(\n            size=14,\n        ),\n    )\n\n    return fig\n</code></pre>"},{"location":"reference/measurement/dash_apps/plots/#measurement.dash_apps.plots.create_validation_plot","title":"<code>create_validation_plot(data, variable_name, field)</code>","text":"<p>Creates plot for Validation app</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Data</p> required <code>variable_name</code> <code>str</code> <p>Variable name</p> required <code>field</code> <code>str</code> <p>'value', 'minimum' or 'maximum'</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: Plot</p> Source code in <code>measurement/dash_apps/plots.py</code> <pre><code>def create_validation_plot(\n    data: pd.DataFrame, variable_name: str, field: str\n) -&gt; go.Figure:\n    \"\"\"Creates plot for Validation app\n\n    Args:\n        data (pd.DataFrame): Data\n        variable_name (str): Variable name\n        field (str): 'value', 'minimum' or 'maximum'\n\n    Returns:\n        go.Figure: Plot\n    \"\"\"\n\n    def status(row):\n        if not row[\"is_validated\"]:\n            return \"Not validated\"\n        if row[\"is_active\"]:\n            return \"Active\"\n        return \"Inactive\"\n\n    color_map = {\n        \"Active\": \"#00CC96\",\n        \"Inactive\": \"#636EFA\",\n        \"Not validated\": \"black\",\n    }\n\n    fig = px.scatter(\n        data,\n        x=\"time\",\n        y=field,\n        color=data.apply(status, axis=1),\n        color_discrete_map=color_map,\n        labels={\"time\": \"Date\", field: f\"{variable_name} ({field.capitalize()})\"},\n    )\n\n    fig.update_traces(marker=dict(size=3))\n    fig.update_layout(\n        legend=dict(\n            title=dict(text=\"Status\", font=dict(size=12)),\n            x=1,\n            y=1,\n            xanchor=\"auto\",\n            yanchor=\"auto\",\n        ),\n        autosize=True,\n        margin=dict(\n            l=50,\n            r=20,\n            b=0,\n            t=50,\n        ),\n    )\n\n    return fig\n</code></pre>"},{"location":"reference/measurement/dash_apps/plots/#measurement.dash_apps.plots.get_aggregation_level","title":"<code>get_aggregation_level(timeseries, aggregate=False)</code>","text":"<p>Calculates the aggregation level based on the timeseries separation.</p> <p>Parameters:</p> Name Type Description Default <code>timeseries</code> <code>Series</code> <p>Time data to be aggregated.</p> required <code>aggregate</code> <code>bool</code> <p>Flag indicating if there should be aggregation</p> <code>False</code> Return <p>String indicating the aggregation level as \" - LEVEL UNITS aggregation\" or an empty string if no aggregation is required.</p> Source code in <code>measurement/dash_apps/plots.py</code> <pre><code>def get_aggregation_level(timeseries: pd.Series, aggregate: bool = False) -&gt; str:\n    \"\"\"Calculates the aggregation level based on the timeseries separation.\n\n    Args:\n        timeseries: Time data to be aggregated.\n        aggregate: Flag indicating if there should be aggregation\n\n    Return:\n        String indicating the aggregation level as \" - LEVEL UNITS aggregation\" or an\n        empty string if no aggregation is required.\n    \"\"\"\n    if not aggregate:\n        return \"\"\n\n    aggregation = timeseries.diff().dt.seconds.median() / 60\n    unit = \"minutes\"\n    if aggregation &gt; 60:\n        aggregation = aggregation / 60\n        unit = \"hours\"\n        if aggregation &gt; 24:\n            aggregation = aggregation / 24\n            unit = \"days\"\n    return f\" - {aggregation:.1f} {unit} aggregation\"\n</code></pre>"},{"location":"reference/measurement/dash_apps/tables/","title":"tables","text":""},{"location":"reference/measurement/dash_apps/tables/#measurement.dash_apps.tables","title":"<code>measurement.dash_apps.tables</code>","text":"<p>Functions defining columns and style conditions for tables in the measurement app</p>"},{"location":"reference/measurement/dash_apps/tables/#measurement.dash_apps.tables-functions","title":"Functions","text":""},{"location":"reference/measurement/dash_apps/tables/#measurement.dash_apps.tables.create_columns_daily","title":"<code>create_columns_daily()</code>","text":"<p>Creates columns for Daily Report table</p> <p>Parameters:</p> Name Type Description Default <code>value_columns</code> <code>list</code> <p>List of value columns</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>List of columns</p> Source code in <code>measurement/dash_apps/tables.py</code> <pre><code>def create_columns_daily() -&gt; list:\n    \"\"\"Creates columns for Daily Report table\n\n    Args:\n        value_columns (list): List of value columns\n\n    Returns:\n        list: List of columns\n    \"\"\"\n    styles = create_style_conditions()\n\n    columns = [\n        {\n            \"valueGetter\": {\n                \"function\": \"d3.timeParse('%Y-%m-%d')(params.data.date.split('T')[0])\"\n            },\n            \"headerName\": \"Date\",\n            \"filter\": \"agDateColumnFilter\",\n            \"valueFormatter\": {\"function\": \"params.data.date.split('T')[0]\"},\n            \"sort\": \"asc\",\n            **styles[\"date\"],\n        },\n        *[\n            {\n                \"field\": c,\n                \"headerName\": c.capitalize(),\n                \"filter\": \"agNumberColumnFilter\",\n                \"valueFormatter\": {\"function\": \"d3.format(',.2f')(params.value)\"},\n                **styles[c],\n            }\n            for c in [\"value\", \"minimum\", \"maximum\"]\n        ],\n        {\n            \"field\": \"daily_count_fraction\",\n            \"headerName\": \"Daily count fraction\",\n            \"filter\": \"agNumberColumnFilter\",\n            \"valueFormatter\": {\"function\": \"d3.format(',.2f')(params.value)\"},\n            **styles[\"daily_count_fraction\"],\n        },\n        {\n            \"field\": \"total_suspicious_entries\",\n            \"headerName\": \"Suspicious entries\",\n            \"filter\": \"agNumberColumnFilter\",\n            **styles[\"total_suspicious_entries\"],\n        },\n    ]\n    return columns\n</code></pre>"},{"location":"reference/measurement/dash_apps/tables/#measurement.dash_apps.tables.create_columns_detail","title":"<code>create_columns_detail()</code>","text":"<p>Creates columns for Detail table</p> <p>Parameters:</p> Name Type Description Default <code>value_columns</code> <code>list</code> <p>List of value columns</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>List of columns</p> Source code in <code>measurement/dash_apps/tables.py</code> <pre><code>def create_columns_detail() -&gt; list:\n    \"\"\"Creates columns for Detail table\n\n    Args:\n        value_columns (list): List of value columns\n\n    Returns:\n        list: List of columns\n    \"\"\"\n    styles = create_style_conditions()\n\n    columns = [\n        {\n            \"field\": \"id\",\n            \"headerName\": \"Measurement ID\",\n            \"filter\": \"agNumberColumnFilter\",\n        },\n        {\n            \"field\": \"time\",\n            \"valueFormatter\": {\"function\": \"params.value.split('T')[1].split('+')[0]\"},\n            \"headerName\": \"Time\",\n            \"editable\": True,\n            \"sort\": \"asc\",\n            **styles[\"time\"],\n        },\n        *[\n            {\n                \"field\": c,\n                \"headerName\": c.capitalize(),\n                \"filter\": \"agNumberColumnFilter\",\n                \"editable\": True,\n                \"valueFormatter\": {\"function\": \"d3.format(',.2f')(params.value)\"},\n                **styles[c],\n            }\n            for c in [\"value\", \"minimum\", \"maximum\"]\n        ],\n    ]\n    return columns\n</code></pre>"},{"location":"reference/measurement/dash_apps/tables/#measurement.dash_apps.tables.create_style_condition","title":"<code>create_style_condition(condition, style_true, style_false)</code>","text":"<p>Create a cell style condition</p> <p>Parameters:</p> Name Type Description Default <code>condition</code> <code>str</code> <p>Javascript code to evaluate</p> required <code>style_true</code> <code>dict</code> <p>Style to apply when condition is true</p> required <code>style_false</code> <code>dict</code> <p>Style to apply when condition is false</p> required <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: Style condition</p> Source code in <code>measurement/dash_apps/tables.py</code> <pre><code>def create_style_condition(\n    condition: str, style_true: dict, style_false: dict\n) -&gt; list[dict]:\n    \"\"\"Create a cell style condition\n\n    Args:\n        condition (str): Javascript code to evaluate\n        style_true (dict): Style to apply when condition is true\n        style_false (dict): Style to apply when condition is false\n\n    Returns:\n        list[dict]: Style condition\n    \"\"\"\n    return [\n        {\n            \"condition\": condition,\n            \"style\": style_true,\n        },\n        {\n            \"condition\": f\"!({condition})\",\n            \"style\": style_false,\n        },\n    ]\n</code></pre>"},{"location":"reference/measurement/dash_apps/tables/#measurement.dash_apps.tables.create_style_conditions","title":"<code>create_style_conditions()</code>","text":"<p>Creates style conditions for Daily Report table</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Style conditions</p> Source code in <code>measurement/dash_apps/tables.py</code> <pre><code>def create_style_conditions() -&gt; dict:\n    \"\"\"Creates style conditions for Daily Report table\n\n    Returns:\n        dict: Style conditions\n    \"\"\"\n    style_error = {\"backgroundColor\": \"#E45756\"}\n    style_normal = {\"backgroundColor\": \"transparent\"}\n\n    styles = {}\n\n    styles[\"date\"] = {\n        \"cellStyle\": {\n            \"styleConditions\": create_style_condition(\n                condition=\"params.data['date_error'] &gt; 0\",\n                style_true=style_error,\n                style_false=style_normal,\n            )\n        },\n    }\n\n    styles[\"time\"] = {\n        \"cellStyle\": {\n            \"styleConditions\": create_style_condition(\n                condition=\"params.data['suspicious_time_lapse']\",\n                style_true=style_error,\n                style_false=style_normal,\n            )\n        },\n    }\n\n    styles[\"value\"] = {\n        \"cellStyle\": {\n            \"styleConditions\": create_style_condition(\n                condition=\"params.data['suspicious_value_limits'] &gt; 0 || params.data['suspicious_value_difference'] &gt; 0\",  # noqa: E501\n                style_true=style_error,\n                style_false=style_normal,\n            )\n        },\n    }\n\n    for field in [\"maximum\", \"minimum\"]:\n        styles[field] = {\n            \"cellStyle\": {\n                \"styleConditions\": create_style_condition(\n                    condition=f\"params.data['suspicious_{field}_limits'] &gt; 0\",\n                    style_true=style_error,\n                    style_false=style_normal,\n                )\n            },\n        }\n\n    styles[\"daily_count_fraction\"] = {\n        \"cellStyle\": {\n            \"styleConditions\": create_style_condition(\n                condition=\"params.data['daily_count_fraction'] != 1\",\n                style_true=style_error,\n                style_false=style_normal,\n            )\n        },\n    }\n\n    styles[\"total_suspicious_entries\"] = {\n        \"cellStyle\": {\n            \"styleConditions\": create_style_condition(\n                condition=\"params.data['total_suspicious_entries'] &gt; 0\",\n                style_true=style_error,\n                style_false=style_normal,\n            )\n        },\n    }\n\n    return styles\n</code></pre>"},{"location":"reference/measurement/signals/","title":"signals","text":""},{"location":"reference/measurement/signals/#measurement.signals","title":"<code>measurement.signals</code>","text":""},{"location":"reference/measurement/signals/handlers/","title":"handlers","text":""},{"location":"reference/measurement/signals/handlers/#measurement.signals.handlers","title":"<code>measurement.signals.handlers</code>","text":""},{"location":"reference/measurement/signals/handlers/#measurement.signals.handlers-classes","title":"Classes","text":""},{"location":"reference/measurement/signals/handlers/#measurement.signals.handlers.Measurement","title":"<code>Measurement</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Class to store the measurements and their validation status.</p> <p>This class holds the value of a given variable and station at a specific time, as well as auxiliary information such as maximum and minimum values, depth and direction, for vector quantities. All of these have a <code>raw</code> version where a backup of the original data is kept, should this change at any point.</p> <p>Flags to monitor its validation status, if the data is active (and therefore can be used for reporting) and if it has actually been used for that is also included.</p> <p>Attributes:</p> Name Type Description <code>depth</code> <code>int</code> <p>Depth of the measurement.</p> <code>direction</code> <code>Decimal</code> <p>Direction of the measurement, useful for vector quantities.</p> <code>raw_value</code> <code>Decimal</code> <p>Original value of the measurement.</p> <code>raw_maximum</code> <code>Decimal</code> <p>Original maximum value of the measurement.</p> <code>raw_minimum</code> <code>Decimal</code> <p>Original minimum value of the measurement.</p> <code>raw_direction</code> <code>Decimal</code> <p>Original direction of the measurement.</p> <code>raw_depth</code> <code>int</code> <p>Original depth of the measurement.</p> <code>is_validated</code> <code>bool</code> <p>Flag to indicate if the measurement has been validated.</p> <code>is_active</code> <code>bool</code> <p>Flag to indicate if the measurement is active. An inactive measurement is not used for reporting</p>"},{"location":"reference/measurement/signals/handlers/#measurement.signals.handlers.Measurement-attributes","title":"Attributes","text":""},{"location":"reference/measurement/signals/handlers/#measurement.signals.handlers.Measurement.overwritten","title":"<code>overwritten: bool</code>  <code>property</code>","text":"<p>Indicates if any of the values associated to the entry have been overwritten.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if any raw field is different to the corresponding standard field.</p>"},{"location":"reference/measurement/signals/handlers/#measurement.signals.handlers.Measurement.raws","title":"<code>raws: tuple[str, ...]</code>  <code>property</code>","text":"<p>Return the raw fields of the measurement.</p> <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>tuple[str]: Tuple with the names of the raw fields of the measurement.</p>"},{"location":"reference/measurement/signals/handlers/#measurement.signals.handlers.Measurement-functions","title":"Functions","text":""},{"location":"reference/measurement/signals/handlers/#measurement.signals.handlers.Measurement.clean","title":"<code>clean()</code>","text":"<p>Check consistency of validation, reporting and backs-up values.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Check consistency of validation, reporting and backs-up values.\"\"\"\n    # Check consistency of validation\n    if not self.is_validated and not self.is_active:\n        raise ValidationError(\"Only validated entries can be declared as inactive.\")\n\n    # Backup values to raws, if needed\n    for r in self.raws:\n        value = getattr(self, r.removeprefix(\"raw_\"))\n        if value and not getattr(self, r):\n            setattr(self, r, value)\n</code></pre>"},{"location":"reference/measurement/signals/handlers/#measurement.signals.handlers.Report","title":"<code>Report</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Holds the different reporting data.</p> <p>It also keeps track of which data has already been used when creating the reports.</p> <p>Attributes:</p> Name Type Description <code>report_type</code> <code>str</code> <p>Type of report. It can be hourly, daily or monthly.</p> <code>completeness</code> <code>Decimal</code> <p>Completeness of the report. Eg. a daily report with 24 hourly measurements would have a completeness of 100%.</p>"},{"location":"reference/measurement/signals/handlers/#measurement.signals.handlers.Report-functions","title":"Functions","text":""},{"location":"reference/measurement/signals/handlers/#measurement.signals.handlers.Report.clean","title":"<code>clean()</code>","text":"<p>Validate that the report type and use of the data is consistent.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate that the report type and use of the data is consistent.\"\"\"\n    if self.report_type == ReportType.HOURLY:\n        self.time = self.time.replace(minute=0, second=0, microsecond=0)\n    elif self.report_type == ReportType.DAILY:\n        self.time = self.time.replace(hour=0, minute=0, second=0, microsecond=0)\n    elif self.report_type == ReportType.MONTLY:\n        self.time = self.time.replace(\n            day=1, hour=0, minute=0, second=0, microsecond=0\n        )\n</code></pre>"},{"location":"reference/measurement/signals/handlers/#measurement.signals.handlers-functions","title":"Functions","text":""},{"location":"reference/measurement/signals/handlers/#measurement.signals.handlers.set_model_permissions","title":"<code>set_model_permissions(sender, **kwargs)</code>","text":"<p>Set model-level permissions.</p> Source code in <code>measurement/signals/handlers.py</code> <pre><code>@receiver(post_migrate)\ndef set_model_permissions(sender, **kwargs):\n    \"\"\"Set model-level permissions.\"\"\"\n    for model in [\n        Measurement,\n        Report,\n    ]:\n        model.set_model_permissions()\n</code></pre>"},{"location":"reference/sensor/","title":"sensor","text":""},{"location":"reference/sensor/#sensor","title":"<code>sensor</code>","text":""},{"location":"reference/sensor/admin/","title":"admin","text":""},{"location":"reference/sensor/admin/#sensor.admin","title":"<code>sensor.admin</code>","text":""},{"location":"reference/sensor/admin/#sensor.admin-classes","title":"Classes","text":""},{"location":"reference/sensor/admin/#sensor.admin.PermissionsBaseAdmin","title":"<code>PermissionsBaseAdmin</code>","text":"<p>               Bases: <code>GuardedModelAdmin</code></p> <p>Base admin class for models that require permissions.</p>"},{"location":"reference/sensor/admin/#sensor.admin.PermissionsBaseAdmin-functions","title":"Functions","text":""},{"location":"reference/sensor/admin/#sensor.admin.PermissionsBaseAdmin.formfield_for_choice_field","title":"<code>formfield_for_choice_field(db_field, request, **kwargs)</code>","text":"<p>Limit the queryset for choice fields.</p> Source code in <code>management/admin.py</code> <pre><code>def formfield_for_choice_field(self, db_field, request, **kwargs):\n    \"\"\"Limit the queryset for choice fields.\"\"\"\n    if db_field.name == \"visibility\":\n        kwargs[\"initial\"] = \"private\"\n        if self.limit_visibility_level and not request.user.is_superuser:\n            kwargs[\"disabled\"] = True\n    return super().formfield_for_choice_field(db_field, request, **kwargs)\n</code></pre>"},{"location":"reference/sensor/admin/#sensor.admin.PermissionsBaseAdmin.formfield_for_foreignkey","title":"<code>formfield_for_foreignkey(db_field, request, **kwargs)</code>","text":"<p>Limit the queryset for foreign key fields.</p> Source code in <code>management/admin.py</code> <pre><code>def formfield_for_foreignkey(self, db_field, request, **kwargs):\n    \"\"\"Limit the queryset for foreign key fields.\"\"\"\n    if db_field.name in self.foreign_key_fields:\n        kwargs[\"queryset\"] = get_queryset(db_field, request.user)\n    if db_field.name == \"owner\" and not request.user.is_superuser:\n        kwargs[\"initial\"] = request.user.id\n        kwargs[\"disabled\"] = True\n    return super().formfield_for_foreignkey(db_field, request, **kwargs)\n</code></pre>"},{"location":"reference/sensor/admin/#sensor.admin.PermissionsBaseAdmin.get_queryset","title":"<code>get_queryset(request)</code>","text":"<p>Return a queryset of the objects that the user has view permissions for.</p> Source code in <code>management/admin.py</code> <pre><code>def get_queryset(self, request):\n    \"\"\"Return a queryset of the objects that the user has view permissions for.\"\"\"\n    qs = super().get_queryset(request)\n    return get_objects_for_user(\n        request.user, f\"{self.opts.app_label}.view_{self.opts.model_name}\", qs\n    )\n</code></pre>"},{"location":"reference/sensor/admin/#sensor.admin.PermissionsBaseAdmin.has_change_permission","title":"<code>has_change_permission(request, obj=None)</code>","text":"<p>Check if the user has the correct permission to change the object.</p> Source code in <code>management/admin.py</code> <pre><code>def has_change_permission(self, request, obj=None):\n    \"\"\"Check if the user has the correct permission to change the object.\"\"\"\n    if obj is not None:\n        return request.user.has_perm(\n            f\"{self.opts.app_label}.change_{self.opts.model_name}\", obj\n        )\n    return True\n</code></pre>"},{"location":"reference/sensor/admin/#sensor.admin.PermissionsBaseAdmin.has_delete_permission","title":"<code>has_delete_permission(request, obj=None)</code>","text":"<p>Check if the user has the correct permission to delete the object.</p> Source code in <code>management/admin.py</code> <pre><code>def has_delete_permission(self, request, obj=None):\n    \"\"\"Check if the user has the correct permission to delete the object.\"\"\"\n    return request.user.has_perm(\n        f\"{self.opts.app_label}.delete_{self.opts.model_name}\", obj\n    )\n</code></pre>"},{"location":"reference/sensor/admin/#sensor.admin.PermissionsBaseAdmin.has_view_permission","title":"<code>has_view_permission(request, obj=None)</code>","text":"<p>Check if the user has the correct permission to view the object.</p> Source code in <code>management/admin.py</code> <pre><code>def has_view_permission(self, request, obj=None):\n    \"\"\"Check if the user has the correct permission to view the object.\"\"\"\n    if obj is not None:\n        return request.user.has_perm(\n            f\"{self.opts.app_label}.view_{self.opts.model_name}\", obj\n        )\n</code></pre>"},{"location":"reference/sensor/admin/#sensor.admin.PermissionsBaseAdmin.obj_perms_manage_view","title":"<code>obj_perms_manage_view(request, object_pk)</code>","text":"<p>Prevents permission scalation at object level.</p> <p>Only allows users with change permissions for this object to change the object permissions.</p> Source code in <code>management/admin.py</code> <pre><code>def obj_perms_manage_view(self, request, object_pk):\n    \"\"\"Prevents permission scalation at object level.\n\n    Only allows users with change permissions for this object to change the object\n    permissions.\n    \"\"\"\n    obj = self.get_object(request, object_pk)\n    if not request.user.has_perm(\n        f\"{self.opts.app_label}.change_{self.opts.model_name}\", obj\n    ):\n        post_url = reverse(\"admin:index\", current_app=self.admin_site.name)\n        return redirect(post_url)\n\n    return super().obj_perms_manage_view(request, object_pk)\n</code></pre>"},{"location":"reference/sensor/admin/#sensor.admin.Sensor","title":"<code>Sensor</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Specific sensor details.</p> <p>Attributes:</p> Name Type Description <code>sensor_id</code> <code>int</code> <p>Primary key, sensor id.</p> <code>code</code> <p>(str) sensor code.</p> <code>sensor_type</code> <code>SensorType</code> <p>sensor type.</p> <code>sensor_brand</code> <code>SensorBrand</code> <p>sensor brand.</p> <code>model</code> <code>str</code> <p>specific model of the sensor.</p> <code>serial</code> <code>str</code> <p>serial number of the sensor.</p> <code>status</code> <code>bool</code> <p>sensor status.</p>"},{"location":"reference/sensor/admin/#sensor.admin.Sensor-functions","title":"Functions","text":""},{"location":"reference/sensor/admin/#sensor.admin.Sensor.__str__","title":"<code>__str__()</code>","text":"<p>Return the sensor code.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the sensor code.\"\"\"\n    return str(self.code)\n</code></pre>"},{"location":"reference/sensor/admin/#sensor.admin.Sensor.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor.\"\"\"\n    return reverse(\"sensor:sensor_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/admin/#sensor.admin.SensorAdmin","title":"<code>SensorAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the Sensor model.</p>"},{"location":"reference/sensor/admin/#sensor.admin.SensorBrand","title":"<code>SensorBrand</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Brand of the sensor, eg. Davis, Texas Electronics, etc.</p> <p>Attributes:</p> Name Type Description <code>brand_id</code> <p>int, primary key, sensor brand id.</p> <code>name</code> <p>str, sensor brand name.</p>"},{"location":"reference/sensor/admin/#sensor.admin.SensorBrand-functions","title":"Functions","text":""},{"location":"reference/sensor/admin/#sensor.admin.SensorBrand.__str__","title":"<code>__str__()</code>","text":"<p>Return the brand name.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the brand name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/sensor/admin/#sensor.admin.SensorBrand.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor brand.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor brand.\"\"\"\n    return reverse(\"sensor:sensorbrand_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/admin/#sensor.admin.SensorBrandAdmin","title":"<code>SensorBrandAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the SensorBrand model.</p>"},{"location":"reference/sensor/admin/#sensor.admin.SensorType","title":"<code>SensorType</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Type of sensor, eg. pluviometric, wind sensor, etc.</p> <p>Attributes:</p> Name Type Description <code>sensor_type_id</code> <p>int, primary key, sensor type id.</p> <code>name</code> <p>str, sensor type name.</p>"},{"location":"reference/sensor/admin/#sensor.admin.SensorType-functions","title":"Functions","text":""},{"location":"reference/sensor/admin/#sensor.admin.SensorType.__str__","title":"<code>__str__()</code>","text":"<p>Return the sensor type name.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the sensor type name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/sensor/admin/#sensor.admin.SensorType.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor type.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor type.\"\"\"\n    return reverse(\"sensor:sensortype_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/admin/#sensor.admin.SensorTypeAdmin","title":"<code>SensorTypeAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the SensorType model.</p>"},{"location":"reference/sensor/apps/","title":"apps","text":""},{"location":"reference/sensor/apps/#sensor.apps","title":"<code>sensor.apps</code>","text":""},{"location":"reference/sensor/apps/#sensor.apps-classes","title":"Classes","text":""},{"location":"reference/sensor/apps/#sensor.apps.SensorConfig","title":"<code>SensorConfig</code>","text":"<p>               Bases: <code>AppConfig</code></p>"},{"location":"reference/sensor/filters/","title":"filters","text":""},{"location":"reference/sensor/filters/#sensor.filters","title":"<code>sensor.filters</code>","text":""},{"location":"reference/sensor/filters/#sensor.filters-classes","title":"Classes","text":""},{"location":"reference/sensor/filters/#sensor.filters.FilterVisible","title":"<code>FilterVisible(target, model, field=None)</code>","text":"<p>Filter objects the user has permission to view.</p> <p>Standard filter shows ALL objects available in the database when faced with a ForeignKey field. This filter shows only the objects that appear in the target model objects that the user has permission to view.</p> <p>If field is None, the name of the <code>model</code> model is used.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>type[Model]</code> <p>Model containing the objects.</p> required <code>model</code> <code>type[Model]</code> <p>Model of the objects to display.</p> required <code>field</code> <code>str | None</code> <p>Field to filter by. Defaults to None.</p> <code>None</code> Source code in <code>management/filters.py</code> <pre><code>def __init__(\n    self, target: type[Model], model: type[Model], field: str | None = None\n) -&gt; None:\n    self.target = target\n    self.model = model\n    self.field = field or model.__name__.lower()\n    self.permission = f\"{target._meta.app_label}.view_{target._meta.model_name}\"\n</code></pre>"},{"location":"reference/sensor/filters/#sensor.filters.Sensor","title":"<code>Sensor</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Specific sensor details.</p> <p>Attributes:</p> Name Type Description <code>sensor_id</code> <code>int</code> <p>Primary key, sensor id.</p> <code>code</code> <p>(str) sensor code.</p> <code>sensor_type</code> <code>SensorType</code> <p>sensor type.</p> <code>sensor_brand</code> <code>SensorBrand</code> <p>sensor brand.</p> <code>model</code> <code>str</code> <p>specific model of the sensor.</p> <code>serial</code> <code>str</code> <p>serial number of the sensor.</p> <code>status</code> <code>bool</code> <p>sensor status.</p>"},{"location":"reference/sensor/filters/#sensor.filters.Sensor-functions","title":"Functions","text":""},{"location":"reference/sensor/filters/#sensor.filters.Sensor.__str__","title":"<code>__str__()</code>","text":"<p>Return the sensor code.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the sensor code.\"\"\"\n    return str(self.code)\n</code></pre>"},{"location":"reference/sensor/filters/#sensor.filters.Sensor.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor.\"\"\"\n    return reverse(\"sensor:sensor_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/filters/#sensor.filters.SensorBrand","title":"<code>SensorBrand</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Brand of the sensor, eg. Davis, Texas Electronics, etc.</p> <p>Attributes:</p> Name Type Description <code>brand_id</code> <p>int, primary key, sensor brand id.</p> <code>name</code> <p>str, sensor brand name.</p>"},{"location":"reference/sensor/filters/#sensor.filters.SensorBrand-functions","title":"Functions","text":""},{"location":"reference/sensor/filters/#sensor.filters.SensorBrand.__str__","title":"<code>__str__()</code>","text":"<p>Return the brand name.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the brand name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/sensor/filters/#sensor.filters.SensorBrand.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor brand.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor brand.\"\"\"\n    return reverse(\"sensor:sensorbrand_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/filters/#sensor.filters.SensorFilter","title":"<code>SensorFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/sensor/filters/#sensor.filters.SensorType","title":"<code>SensorType</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Type of sensor, eg. pluviometric, wind sensor, etc.</p> <p>Attributes:</p> Name Type Description <code>sensor_type_id</code> <p>int, primary key, sensor type id.</p> <code>name</code> <p>str, sensor type name.</p>"},{"location":"reference/sensor/filters/#sensor.filters.SensorType-functions","title":"Functions","text":""},{"location":"reference/sensor/filters/#sensor.filters.SensorType.__str__","title":"<code>__str__()</code>","text":"<p>Return the sensor type name.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the sensor type name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/sensor/filters/#sensor.filters.SensorType.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor type.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor type.\"\"\"\n    return reverse(\"sensor:sensortype_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/models/","title":"models","text":""},{"location":"reference/sensor/models/#sensor.models","title":"<code>sensor.models</code>","text":""},{"location":"reference/sensor/models/#sensor.models-classes","title":"Classes","text":""},{"location":"reference/sensor/models/#sensor.models.PermissionsBase","title":"<code>PermissionsBase</code>","text":"<p>               Bases: <code>Model</code></p> <p>Base model for models that require permissions.</p>"},{"location":"reference/sensor/models/#sensor.models.PermissionsBase-functions","title":"Functions","text":""},{"location":"reference/sensor/models/#sensor.models.PermissionsBase.set_model_permissions","title":"<code>set_model_permissions()</code>  <code>classmethod</code>","text":"<p>Set model-level add permissions.</p> Source code in <code>management/models.py</code> <pre><code>@classmethod\ndef set_model_permissions(cls):\n    \"\"\"Set model-level add permissions.\"\"\"\n    apply_add_permissions_to_standard_group(cls)\n</code></pre>"},{"location":"reference/sensor/models/#sensor.models.PermissionsBase.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level delete, change and view permissions.</p> Source code in <code>management/models.py</code> <pre><code>def set_object_permissions(self):\n    \"\"\"Set object-level delete, change and view permissions.\"\"\"\n    delete, change, view, add = _get_perm_codenames(self.__class__)\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # View permissions based on permissions level\n    if self.visibility in [\"public\", \"internal\"]:\n        assign_perm(view, standard_group, self)\n        assign_perm(view, anonymous_user, self)\n        if self.owner:\n            remove_perm(view, self.owner, self)\n    elif self.visibility == \"private\" and self.owner:\n        remove_perm(view, standard_group, self)\n        remove_perm(view, anonymous_user, self)\n        if self.owner:\n            assign_perm(view, self.owner, self)\n\n    # Assign change and delete permissions for owner\n    for perm in [change, delete]:\n        remove_perm(perm, standard_group, self)\n        remove_perm(perm, anonymous_user, self)\n        if self.owner:\n            assign_perm(perm, self.owner, self)\n</code></pre>"},{"location":"reference/sensor/models/#sensor.models.Sensor","title":"<code>Sensor</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Specific sensor details.</p> <p>Attributes:</p> Name Type Description <code>sensor_id</code> <code>int</code> <p>Primary key, sensor id.</p> <code>code</code> <p>(str) sensor code.</p> <code>sensor_type</code> <code>SensorType</code> <p>sensor type.</p> <code>sensor_brand</code> <code>SensorBrand</code> <p>sensor brand.</p> <code>model</code> <code>str</code> <p>specific model of the sensor.</p> <code>serial</code> <code>str</code> <p>serial number of the sensor.</p> <code>status</code> <code>bool</code> <p>sensor status.</p>"},{"location":"reference/sensor/models/#sensor.models.Sensor-functions","title":"Functions","text":""},{"location":"reference/sensor/models/#sensor.models.Sensor.__str__","title":"<code>__str__()</code>","text":"<p>Return the sensor code.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the sensor code.\"\"\"\n    return str(self.code)\n</code></pre>"},{"location":"reference/sensor/models/#sensor.models.Sensor.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor.\"\"\"\n    return reverse(\"sensor:sensor_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/models/#sensor.models.SensorBrand","title":"<code>SensorBrand</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Brand of the sensor, eg. Davis, Texas Electronics, etc.</p> <p>Attributes:</p> Name Type Description <code>brand_id</code> <p>int, primary key, sensor brand id.</p> <code>name</code> <p>str, sensor brand name.</p>"},{"location":"reference/sensor/models/#sensor.models.SensorBrand-functions","title":"Functions","text":""},{"location":"reference/sensor/models/#sensor.models.SensorBrand.__str__","title":"<code>__str__()</code>","text":"<p>Return the brand name.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the brand name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/sensor/models/#sensor.models.SensorBrand.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor brand.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor brand.\"\"\"\n    return reverse(\"sensor:sensorbrand_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/models/#sensor.models.SensorType","title":"<code>SensorType</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Type of sensor, eg. pluviometric, wind sensor, etc.</p> <p>Attributes:</p> Name Type Description <code>sensor_type_id</code> <p>int, primary key, sensor type id.</p> <code>name</code> <p>str, sensor type name.</p>"},{"location":"reference/sensor/models/#sensor.models.SensorType-functions","title":"Functions","text":""},{"location":"reference/sensor/models/#sensor.models.SensorType.__str__","title":"<code>__str__()</code>","text":"<p>Return the sensor type name.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the sensor type name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/sensor/models/#sensor.models.SensorType.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor type.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor type.\"\"\"\n    return reverse(\"sensor:sensortype_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/tables/","title":"tables","text":""},{"location":"reference/sensor/tables/#sensor.tables","title":"<code>sensor.tables</code>","text":""},{"location":"reference/sensor/tables/#sensor.tables-classes","title":"Classes","text":""},{"location":"reference/sensor/tables/#sensor.tables.Sensor","title":"<code>Sensor</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Specific sensor details.</p> <p>Attributes:</p> Name Type Description <code>sensor_id</code> <code>int</code> <p>Primary key, sensor id.</p> <code>code</code> <p>(str) sensor code.</p> <code>sensor_type</code> <code>SensorType</code> <p>sensor type.</p> <code>sensor_brand</code> <code>SensorBrand</code> <p>sensor brand.</p> <code>model</code> <code>str</code> <p>specific model of the sensor.</p> <code>serial</code> <code>str</code> <p>serial number of the sensor.</p> <code>status</code> <code>bool</code> <p>sensor status.</p>"},{"location":"reference/sensor/tables/#sensor.tables.Sensor-functions","title":"Functions","text":""},{"location":"reference/sensor/tables/#sensor.tables.Sensor.__str__","title":"<code>__str__()</code>","text":"<p>Return the sensor code.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the sensor code.\"\"\"\n    return str(self.code)\n</code></pre>"},{"location":"reference/sensor/tables/#sensor.tables.Sensor.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor.\"\"\"\n    return reverse(\"sensor:sensor_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/tables/#sensor.tables.SensorBrand","title":"<code>SensorBrand</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Brand of the sensor, eg. Davis, Texas Electronics, etc.</p> <p>Attributes:</p> Name Type Description <code>brand_id</code> <p>int, primary key, sensor brand id.</p> <code>name</code> <p>str, sensor brand name.</p>"},{"location":"reference/sensor/tables/#sensor.tables.SensorBrand-functions","title":"Functions","text":""},{"location":"reference/sensor/tables/#sensor.tables.SensorBrand.__str__","title":"<code>__str__()</code>","text":"<p>Return the brand name.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the brand name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/sensor/tables/#sensor.tables.SensorBrand.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor brand.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor brand.\"\"\"\n    return reverse(\"sensor:sensorbrand_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/tables/#sensor.tables.SensorBrandTable","title":"<code>SensorBrandTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/sensor/tables/#sensor.tables.SensorTable","title":"<code>SensorTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/sensor/tables/#sensor.tables.SensorType","title":"<code>SensorType</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Type of sensor, eg. pluviometric, wind sensor, etc.</p> <p>Attributes:</p> Name Type Description <code>sensor_type_id</code> <p>int, primary key, sensor type id.</p> <code>name</code> <p>str, sensor type name.</p>"},{"location":"reference/sensor/tables/#sensor.tables.SensorType-functions","title":"Functions","text":""},{"location":"reference/sensor/tables/#sensor.tables.SensorType.__str__","title":"<code>__str__()</code>","text":"<p>Return the sensor type name.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the sensor type name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/sensor/tables/#sensor.tables.SensorType.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor type.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor type.\"\"\"\n    return reverse(\"sensor:sensortype_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/tables/#sensor.tables.SensorTypeTable","title":"<code>SensorTypeTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/sensor/urls/","title":"urls","text":""},{"location":"reference/sensor/urls/#sensor.urls","title":"<code>sensor.urls</code>","text":""},{"location":"reference/sensor/urls/#sensor.urls-attributes","title":"Attributes","text":""},{"location":"reference/sensor/urls/#sensor.urls.app_name","title":"<code>app_name = 'sensor'</code>  <code>module-attribute</code>","text":""},{"location":"reference/sensor/urls/#sensor.urls.urlpatterns","title":"<code>urlpatterns = [path('sensor/&lt;int:pk&gt;', SensorDetailView.as_view(), name='sensor_detail'), path('sensortype/&lt;int:pk&gt;', SensorTypeDetailView.as_view(), name='sensortype_detail'), path('sensorbrand/&lt;int:pk&gt;', SensorBrandDetailView.as_view(), name='sensorbrand_detail'), path('sensor/create/', SensorCreateView.as_view(), name='sensor_create'), path('sensortype/create/', SensorTypeCreateView.as_view(), name='sensortype_create'), path('sensorbrand/create/', SensorBrandCreateView.as_view(), name='sensorbrand_create'), path('sensor/edit/&lt;int:pk&gt;', SensorEditView.as_view(), name='sensor_edit'), path('sensortype/edit/&lt;int:pk&gt;', SensorTypeEditView.as_view(), name='sensortype_edit'), path('sensorbrand/edit/&lt;int:pk&gt;', SensorBrandEditView.as_view(), name='sensorbrand_edit'), path('sensor/delete/&lt;int:pk&gt;', SensorDeleteView.as_view(), name='sensor_delete'), path('sensortype/delete/&lt;int:pk&gt;', SensorTypeDeleteView.as_view(), name='sensortype_delete'), path('sensorbrand/delete/&lt;int:pk&gt;', SensorBrandDeleteView.as_view(), name='sensorbrand_delete'), path('sensor/', SensorListView.as_view(), name='sensor_list'), path('sensortype/', SensorTypeListView.as_view(), name='sensortype_list'), path('sensorbrand/', SensorBrandListView.as_view(), name='sensorbrand_list')]</code>  <code>module-attribute</code>","text":""},{"location":"reference/sensor/urls/#sensor.urls-classes","title":"Classes","text":""},{"location":"reference/sensor/urls/#sensor.urls.SensorBrandCreateView","title":"<code>SensorBrandCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a sensor brand.</p>"},{"location":"reference/sensor/urls/#sensor.urls.SensorBrandDeleteView","title":"<code>SensorBrandDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a sensor brand.</p>"},{"location":"reference/sensor/urls/#sensor.urls.SensorBrandDetailView","title":"<code>SensorBrandDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a sensor brand.</p>"},{"location":"reference/sensor/urls/#sensor.urls.SensorBrandEditView","title":"<code>SensorBrandEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a sensor brand.</p>"},{"location":"reference/sensor/urls/#sensor.urls.SensorBrandListView","title":"<code>SensorBrandListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list sensor brands.</p>"},{"location":"reference/sensor/urls/#sensor.urls.SensorCreateView","title":"<code>SensorCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a sensor.</p>"},{"location":"reference/sensor/urls/#sensor.urls.SensorDeleteView","title":"<code>SensorDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a sensor.</p>"},{"location":"reference/sensor/urls/#sensor.urls.SensorDetailView","title":"<code>SensorDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a sensor.</p>"},{"location":"reference/sensor/urls/#sensor.urls.SensorEditView","title":"<code>SensorEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a sensor.</p>"},{"location":"reference/sensor/urls/#sensor.urls.SensorListView","title":"<code>SensorListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list sensors.</p>"},{"location":"reference/sensor/urls/#sensor.urls.SensorTypeCreateView","title":"<code>SensorTypeCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a sensor type.</p>"},{"location":"reference/sensor/urls/#sensor.urls.SensorTypeDeleteView","title":"<code>SensorTypeDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a sensor type.</p>"},{"location":"reference/sensor/urls/#sensor.urls.SensorTypeDetailView","title":"<code>SensorTypeDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a sensor type.</p>"},{"location":"reference/sensor/urls/#sensor.urls.SensorTypeEditView","title":"<code>SensorTypeEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a sensor type.</p>"},{"location":"reference/sensor/urls/#sensor.urls.SensorTypeListView","title":"<code>SensorTypeListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list sensor types.</p>"},{"location":"reference/sensor/views/","title":"views","text":""},{"location":"reference/sensor/views/#sensor.views","title":"<code>sensor.views</code>","text":""},{"location":"reference/sensor/views/#sensor.views-classes","title":"Classes","text":""},{"location":"reference/sensor/views/#sensor.views.CustomCreateView","title":"<code>CustomCreateView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>CreateView</code></p> <p>Generic create view.</p> <p>This view is used to create a new model object. The user must have the permission to create the object, otherwise a 403 error is returned.</p> <p>The view includes a form with the object data, and the context includes the title of the view and the URL to the list view.</p> <p>If provided, the <code>foreign_key_fields</code> attribute is used to limit the queryset for foreign key fields.</p> <p>If successful, the view redirects to the detail view of the created object.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>template_name</code> <code>str</code> <p>Template to be used.</p>"},{"location":"reference/sensor/views/#sensor.views.CustomCreateView-functions","title":"Functions","text":""},{"location":"reference/sensor/views/#sensor.views.CustomCreateView.form_valid","title":"<code>form_valid(form)</code>","text":"<p>Set the owner of the object to the current user.</p> <p>This is done before saving the object to the database.</p> <p>Parameters:</p> Name Type Description Default <code>form</code> <code>ModelForm</code> <p>Form with the object data.</p> required <p>Returns:</p> Name Type Description <code>HttpResponse</code> <code>HttpResponse</code> <p>Redirect to the detail view of the created object.</p> Source code in <code>management/views.py</code> <pre><code>def form_valid(self, form: forms.ModelForm) -&gt; HttpResponse:\n    \"\"\"Set the owner of the object to the current user.\n\n    This is done before saving the object to the database.\n\n    Args:\n        form (forms.ModelForm): Form with the object data.\n\n    Returns:\n        HttpResponse: Redirect to the detail view of the created object.\n    \"\"\"\n    form.instance.owner = self.request.user\n    return super().form_valid(form)\n</code></pre>"},{"location":"reference/sensor/views/#sensor.views.CustomCreateView.get_form_kwargs","title":"<code>get_form_kwargs()</code>","text":"<p>Add the user to the form kwargs, so we can filter the options.</p> Source code in <code>management/views.py</code> <pre><code>def get_form_kwargs(self):\n    \"\"\"Add the user to the form kwargs, so we can filter the options.\"\"\"\n    kwargs = super().get_form_kwargs()\n    kwargs[\"user\"] = self.request.user\n    return kwargs\n</code></pre>"},{"location":"reference/sensor/views/#sensor.views.CustomDeleteView","title":"<code>CustomDeleteView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>DeleteView</code></p> <p>Generic delete view.</p> <p>This view is used to delete a model object. The user must have the permission to delete the object, otherwise a 403 error is returned. A confirmation page is shown with the related objects that will be deleted.</p> <p>The permissions required to delete the object are <code>app_label.delete_model_name</code>. For example, the permission required to delete a <code>DataImport</code> object would be <code>importing.delete_dataimport</code>.</p> <p>If successful, the view redirects to the list view.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>template_name</code> <code>str</code> <p>Template to be used.</p>"},{"location":"reference/sensor/views/#sensor.views.CustomDetailView","title":"<code>CustomDetailView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>DetailView</code></p> <p>Generic detail view.</p> <p>This view is used to show the details of a model object. The user must have the permission to view the object, otherwise a 403 error is returned.</p> <p>The view includes a form with the object data, and the context includes the URLs for the list, delete, and edit views.</p> <p>The permissions required to view the object are <code>app_label.view_model_name</code>. For example, the permission required to view a <code>DataImport</code> object would be <code>importing.view_dataimport</code>.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>template_name</code> <code>str</code> <p>Template to be used.</p> <code>fields</code> <code>str</code> <p>Fields to be shown in the form.</p>"},{"location":"reference/sensor/views/#sensor.views.CustomDetailView-functions","title":"Functions","text":""},{"location":"reference/sensor/views/#sensor.views.CustomDetailView.get_inline","title":"<code>get_inline()</code>","text":"<p>Return the inline data for the format.</p> <p>If provided, this method should return a dictionary with the inline data to be shown in the detail view. The dictionary should have the following keys:</p> <ul> <li>title: Title of the inline data.</li> <li>header: List with the header of the table.</li> <li>objects: List with the objects to be shown in the table. Each object should be     a list with the same length as the header.</li> </ul> <p>Returns:</p> Type Description <code>dict | None</code> <p>dict | None: Inline data for the format.</p> Source code in <code>management/views.py</code> <pre><code>def get_inline(self) -&gt; dict | None:\n    \"\"\"Return the inline data for the format.\n\n    If provided, this method should return a dictionary with the inline data to be\n    shown in the detail view. The dictionary should have the following keys:\n\n    - title: Title of the inline data.\n    - header: List with the header of the table.\n    - objects: List with the objects to be shown in the table. Each object should be\n        a list with the same length as the header.\n\n    Returns:\n        dict | None: Inline data for the format.\n    \"\"\"\n    return None\n</code></pre>"},{"location":"reference/sensor/views/#sensor.views.CustomEditView","title":"<code>CustomEditView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>UpdateView</code></p> <p>Generic edit view.</p> <p>This view is used to edit a model object. The user must have the permission to edit the object, otherwise a 403 error is returned.</p> <p>The view includes a form with the object data, and the context includes the title of the view and the URL to the list view.</p> <p>The permissions required to edit the object are <code>app_label.change_model_name</code>. For example, the permission required to edit a <code>DataImport</code> object would be <code>importing.change_dataimport</code>.</p> <p>If successful or cancelled, the view redirects to the detail view of the created object.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>template_name</code> <code>str</code> <p>Template to be used.</p>"},{"location":"reference/sensor/views/#sensor.views.CustomEditView-functions","title":"Functions","text":""},{"location":"reference/sensor/views/#sensor.views.CustomEditView.get_form_kwargs","title":"<code>get_form_kwargs()</code>","text":"<p>Add the user to the form kwargs, so we can filter the options.</p> Source code in <code>management/views.py</code> <pre><code>def get_form_kwargs(self):\n    \"\"\"Add the user to the form kwargs, so we can filter the options.\"\"\"\n    kwargs = super().get_form_kwargs()\n    kwargs[\"user\"] = self.request.user\n    return kwargs\n</code></pre>"},{"location":"reference/sensor/views/#sensor.views.CustomTableView","title":"<code>CustomTableView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>SingleTableMixin</code>, <code>FilterView</code></p> <p>This view is used to show a list of model objects.</p> <p>The view includes a table with the objects, and the context includes the title of the view, the refresh URL, and the URL to create a new object.</p> <p>The permissions required to view the objects are <code>app_label.view_model_name</code>. For example, the permission required to view a <code>DataImport</code> object would be <code>importing.view_dataimport</code>.</p> <p>If provided, the <code>filter_class</code> attribute is used to create a filter form on top of the table.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>model</code> <code>Model</code> <p>Model to be used.</p> <code>table_class</code> <code>Table</code> <p>Table class to be used.</p> <code>filterset_class</code> <code>FilterSet</code> <p>Filter class to be used. If not provided, the model's default filter is used.</p> <code>template_name</code> <code>str</code> <p>Template to be used.</p> <code>paginate_by</code> <code>int</code> <p>Number of objects per page.</p> <code>show_refresh_btn</code> <code>bool</code> <p>If True, a refresh url is included in the context.</p> <code>show_new_btn</code> <code>bool</code> <p>If True, a create url is included in the context.</p>"},{"location":"reference/sensor/views/#sensor.views.CustomTableView-functions","title":"Functions","text":""},{"location":"reference/sensor/views/#sensor.views.CustomTableView.get_filterset_class","title":"<code>get_filterset_class()</code>","text":"<p>Return the filter class for the view.</p> <p>If no filter class is provided in the view, the default filter for the model is used. The default filter is created by the <code>FilterSet</code> class, and includes only the 'visibility'.</p> Source code in <code>management/views.py</code> <pre><code>def get_filterset_class(self):\n    \"\"\"Return the filter class for the view.\n\n    If no filter class is provided in the view, the default filter for the model is\n    used. The default filter is created by the `FilterSet` class, and includes only\n    the 'visibility'.\n    \"\"\"\n    if not self.filterset_class:\n\n        class VisbilityFilter(FilterSet):\n            class Meta:\n                model = self.model\n                fields = [\"visibility\"]\n\n        return VisbilityFilter\n\n    return super().get_filterset_class()\n</code></pre>"},{"location":"reference/sensor/views/#sensor.views.Sensor","title":"<code>Sensor</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Specific sensor details.</p> <p>Attributes:</p> Name Type Description <code>sensor_id</code> <code>int</code> <p>Primary key, sensor id.</p> <code>code</code> <p>(str) sensor code.</p> <code>sensor_type</code> <code>SensorType</code> <p>sensor type.</p> <code>sensor_brand</code> <code>SensorBrand</code> <p>sensor brand.</p> <code>model</code> <code>str</code> <p>specific model of the sensor.</p> <code>serial</code> <code>str</code> <p>serial number of the sensor.</p> <code>status</code> <code>bool</code> <p>sensor status.</p>"},{"location":"reference/sensor/views/#sensor.views.Sensor-functions","title":"Functions","text":""},{"location":"reference/sensor/views/#sensor.views.Sensor.__str__","title":"<code>__str__()</code>","text":"<p>Return the sensor code.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the sensor code.\"\"\"\n    return str(self.code)\n</code></pre>"},{"location":"reference/sensor/views/#sensor.views.Sensor.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor.\"\"\"\n    return reverse(\"sensor:sensor_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/views/#sensor.views.SensorBrand","title":"<code>SensorBrand</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Brand of the sensor, eg. Davis, Texas Electronics, etc.</p> <p>Attributes:</p> Name Type Description <code>brand_id</code> <p>int, primary key, sensor brand id.</p> <code>name</code> <p>str, sensor brand name.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorBrand-functions","title":"Functions","text":""},{"location":"reference/sensor/views/#sensor.views.SensorBrand.__str__","title":"<code>__str__()</code>","text":"<p>Return the brand name.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the brand name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/sensor/views/#sensor.views.SensorBrand.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor brand.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor brand.\"\"\"\n    return reverse(\"sensor:sensorbrand_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/views/#sensor.views.SensorBrandCreateView","title":"<code>SensorBrandCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a sensor brand.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorBrandDeleteView","title":"<code>SensorBrandDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a sensor brand.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorBrandDetailView","title":"<code>SensorBrandDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a sensor brand.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorBrandEditView","title":"<code>SensorBrandEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a sensor brand.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorBrandListView","title":"<code>SensorBrandListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list sensor brands.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorBrandTable","title":"<code>SensorBrandTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/sensor/views/#sensor.views.SensorCreateView","title":"<code>SensorCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a sensor.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorDeleteView","title":"<code>SensorDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a sensor.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorDetailView","title":"<code>SensorDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a sensor.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorEditView","title":"<code>SensorEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a sensor.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorFilter","title":"<code>SensorFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/sensor/views/#sensor.views.SensorListView","title":"<code>SensorListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list sensors.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorTable","title":"<code>SensorTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/sensor/views/#sensor.views.SensorType","title":"<code>SensorType</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Type of sensor, eg. pluviometric, wind sensor, etc.</p> <p>Attributes:</p> Name Type Description <code>sensor_type_id</code> <p>int, primary key, sensor type id.</p> <code>name</code> <p>str, sensor type name.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorType-functions","title":"Functions","text":""},{"location":"reference/sensor/views/#sensor.views.SensorType.__str__","title":"<code>__str__()</code>","text":"<p>Return the sensor type name.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the sensor type name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/sensor/views/#sensor.views.SensorType.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor type.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor type.\"\"\"\n    return reverse(\"sensor:sensortype_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/views/#sensor.views.SensorTypeCreateView","title":"<code>SensorTypeCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a sensor type.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorTypeDeleteView","title":"<code>SensorTypeDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a sensor type.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorTypeDetailView","title":"<code>SensorTypeDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a sensor type.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorTypeEditView","title":"<code>SensorTypeEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a sensor type.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorTypeListView","title":"<code>SensorTypeListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to list sensor types.</p>"},{"location":"reference/sensor/views/#sensor.views.SensorTypeTable","title":"<code>SensorTypeTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/sensor/signals/","title":"signals","text":""},{"location":"reference/sensor/signals/#sensor.signals","title":"<code>sensor.signals</code>","text":""},{"location":"reference/sensor/signals/handlers/","title":"handlers","text":""},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers","title":"<code>sensor.signals.handlers</code>","text":""},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers-attributes","title":"Attributes","text":""},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers.User","title":"<code>User = get_user_model()</code>  <code>module-attribute</code>","text":""},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers-classes","title":"Classes","text":""},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers.Sensor","title":"<code>Sensor</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Specific sensor details.</p> <p>Attributes:</p> Name Type Description <code>sensor_id</code> <code>int</code> <p>Primary key, sensor id.</p> <code>code</code> <p>(str) sensor code.</p> <code>sensor_type</code> <code>SensorType</code> <p>sensor type.</p> <code>sensor_brand</code> <code>SensorBrand</code> <p>sensor brand.</p> <code>model</code> <code>str</code> <p>specific model of the sensor.</p> <code>serial</code> <code>str</code> <p>serial number of the sensor.</p> <code>status</code> <code>bool</code> <p>sensor status.</p>"},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers.Sensor-functions","title":"Functions","text":""},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers.Sensor.__str__","title":"<code>__str__()</code>","text":"<p>Return the sensor code.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the sensor code.\"\"\"\n    return str(self.code)\n</code></pre>"},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers.Sensor.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor.\"\"\"\n    return reverse(\"sensor:sensor_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers.SensorBrand","title":"<code>SensorBrand</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Brand of the sensor, eg. Davis, Texas Electronics, etc.</p> <p>Attributes:</p> Name Type Description <code>brand_id</code> <p>int, primary key, sensor brand id.</p> <code>name</code> <p>str, sensor brand name.</p>"},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers.SensorBrand-functions","title":"Functions","text":""},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers.SensorBrand.__str__","title":"<code>__str__()</code>","text":"<p>Return the brand name.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the brand name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers.SensorBrand.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor brand.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor brand.\"\"\"\n    return reverse(\"sensor:sensorbrand_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers.SensorType","title":"<code>SensorType</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Type of sensor, eg. pluviometric, wind sensor, etc.</p> <p>Attributes:</p> Name Type Description <code>sensor_type_id</code> <p>int, primary key, sensor type id.</p> <code>name</code> <p>str, sensor type name.</p>"},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers.SensorType-functions","title":"Functions","text":""},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers.SensorType.__str__","title":"<code>__str__()</code>","text":"<p>Return the sensor type name.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the sensor type name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers.SensorType.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor type.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor type.\"\"\"\n    return reverse(\"sensor:sensortype_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers-functions","title":"Functions","text":""},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers.set_model_permissions","title":"<code>set_model_permissions(sender, **kwargs)</code>","text":"<p>Set model-level permissions.</p> Source code in <code>sensor/signals/handlers.py</code> <pre><code>@receiver(post_migrate)\ndef set_model_permissions(sender, **kwargs):\n    \"\"\"Set model-level permissions.\"\"\"\n    for model in [\n        SensorType,\n        SensorBrand,\n        Sensor,\n    ]:\n        model.set_model_permissions()\n</code></pre>"},{"location":"reference/sensor/signals/handlers/#sensor.signals.handlers.set_object_permissions","title":"<code>set_object_permissions(sender, instance, **kwargs)</code>","text":"<p>Set object-level permissions\".</p> Source code in <code>sensor/signals/handlers.py</code> <pre><code>@receiver(post_save, sender=SensorType)\n@receiver(post_save, sender=SensorBrand)\n@receiver(post_save, sender=Sensor)\ndef set_object_permissions(sender, instance, **kwargs):\n    \"\"\"Set object-level permissions\".\"\"\"\n    instance.set_object_permissions()\n</code></pre>"},{"location":"reference/station/","title":"station","text":""},{"location":"reference/station/#station","title":"<code>station</code>","text":""},{"location":"reference/station/admin/","title":"admin","text":""},{"location":"reference/station/admin/#station.admin","title":"<code>station.admin</code>","text":""},{"location":"reference/station/admin/#station.admin-classes","title":"Classes","text":""},{"location":"reference/station/admin/#station.admin.Basin","title":"<code>Basin</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>River(s) basin where the station is located e.g. El Carmen.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the basin, e.g. El Carmen.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the basin.</p> <code>file</code> <code>FileField</code> <p>PDF file with details of the basin.</p>"},{"location":"reference/station/admin/#station.admin.Basin-functions","title":"Functions","text":""},{"location":"reference/station/admin/#station.admin.Basin.__str__","title":"<code>__str__()</code>","text":"<p>Return the basin name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the basin name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/admin/#station.admin.Basin.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the basin.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the basin.\"\"\"\n    return reverse(\"station:basin_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/admin/#station.admin.BasinAdmin","title":"<code>BasinAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the Basin model.</p>"},{"location":"reference/station/admin/#station.admin.Country","title":"<code>Country</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>The country where a station or region is in.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Country name.</p>"},{"location":"reference/station/admin/#station.admin.Country-functions","title":"Functions","text":""},{"location":"reference/station/admin/#station.admin.Country.__str__","title":"<code>__str__()</code>","text":"<p>Return the country name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the country name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/admin/#station.admin.Country.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the country.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the country.\"\"\"\n    return reverse(\"station:country_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/admin/#station.admin.CountryAdmin","title":"<code>CountryAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the Country model.</p>"},{"location":"reference/station/admin/#station.admin.Ecosystem","title":"<code>Ecosystem</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>The ecosystem associated with a station.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the ecosystem, e.g. rain forest.</p>"},{"location":"reference/station/admin/#station.admin.Ecosystem-functions","title":"Functions","text":""},{"location":"reference/station/admin/#station.admin.Ecosystem.__str__","title":"<code>__str__()</code>","text":"<p>Return the ecosystem name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the ecosystem name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/admin/#station.admin.Ecosystem.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the ecosystem.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the ecosystem.\"\"\"\n    return reverse(\"station:ecosystem_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/admin/#station.admin.EcosystemAdmin","title":"<code>EcosystemAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the Ecosystem model.</p>"},{"location":"reference/station/admin/#station.admin.Institution","title":"<code>Institution</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Institutional partner responsible for a station.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the institution.</p>"},{"location":"reference/station/admin/#station.admin.Institution-functions","title":"Functions","text":""},{"location":"reference/station/admin/#station.admin.Institution.__str__","title":"<code>__str__()</code>","text":"<p>Return the institution name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the institution name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/admin/#station.admin.Institution.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the institution.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the institution.\"\"\"\n    return reverse(\"station:institution_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/admin/#station.admin.InstitutionAdmin","title":"<code>InstitutionAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the Institution model.</p>"},{"location":"reference/station/admin/#station.admin.PermissionsBaseAdmin","title":"<code>PermissionsBaseAdmin</code>","text":"<p>               Bases: <code>GuardedModelAdmin</code></p> <p>Base admin class for models that require permissions.</p>"},{"location":"reference/station/admin/#station.admin.PermissionsBaseAdmin-functions","title":"Functions","text":""},{"location":"reference/station/admin/#station.admin.PermissionsBaseAdmin.formfield_for_choice_field","title":"<code>formfield_for_choice_field(db_field, request, **kwargs)</code>","text":"<p>Limit the queryset for choice fields.</p> Source code in <code>management/admin.py</code> <pre><code>def formfield_for_choice_field(self, db_field, request, **kwargs):\n    \"\"\"Limit the queryset for choice fields.\"\"\"\n    if db_field.name == \"visibility\":\n        kwargs[\"initial\"] = \"private\"\n        if self.limit_visibility_level and not request.user.is_superuser:\n            kwargs[\"disabled\"] = True\n    return super().formfield_for_choice_field(db_field, request, **kwargs)\n</code></pre>"},{"location":"reference/station/admin/#station.admin.PermissionsBaseAdmin.formfield_for_foreignkey","title":"<code>formfield_for_foreignkey(db_field, request, **kwargs)</code>","text":"<p>Limit the queryset for foreign key fields.</p> Source code in <code>management/admin.py</code> <pre><code>def formfield_for_foreignkey(self, db_field, request, **kwargs):\n    \"\"\"Limit the queryset for foreign key fields.\"\"\"\n    if db_field.name in self.foreign_key_fields:\n        kwargs[\"queryset\"] = get_queryset(db_field, request.user)\n    if db_field.name == \"owner\" and not request.user.is_superuser:\n        kwargs[\"initial\"] = request.user.id\n        kwargs[\"disabled\"] = True\n    return super().formfield_for_foreignkey(db_field, request, **kwargs)\n</code></pre>"},{"location":"reference/station/admin/#station.admin.PermissionsBaseAdmin.get_queryset","title":"<code>get_queryset(request)</code>","text":"<p>Return a queryset of the objects that the user has view permissions for.</p> Source code in <code>management/admin.py</code> <pre><code>def get_queryset(self, request):\n    \"\"\"Return a queryset of the objects that the user has view permissions for.\"\"\"\n    qs = super().get_queryset(request)\n    return get_objects_for_user(\n        request.user, f\"{self.opts.app_label}.view_{self.opts.model_name}\", qs\n    )\n</code></pre>"},{"location":"reference/station/admin/#station.admin.PermissionsBaseAdmin.has_change_permission","title":"<code>has_change_permission(request, obj=None)</code>","text":"<p>Check if the user has the correct permission to change the object.</p> Source code in <code>management/admin.py</code> <pre><code>def has_change_permission(self, request, obj=None):\n    \"\"\"Check if the user has the correct permission to change the object.\"\"\"\n    if obj is not None:\n        return request.user.has_perm(\n            f\"{self.opts.app_label}.change_{self.opts.model_name}\", obj\n        )\n    return True\n</code></pre>"},{"location":"reference/station/admin/#station.admin.PermissionsBaseAdmin.has_delete_permission","title":"<code>has_delete_permission(request, obj=None)</code>","text":"<p>Check if the user has the correct permission to delete the object.</p> Source code in <code>management/admin.py</code> <pre><code>def has_delete_permission(self, request, obj=None):\n    \"\"\"Check if the user has the correct permission to delete the object.\"\"\"\n    return request.user.has_perm(\n        f\"{self.opts.app_label}.delete_{self.opts.model_name}\", obj\n    )\n</code></pre>"},{"location":"reference/station/admin/#station.admin.PermissionsBaseAdmin.has_view_permission","title":"<code>has_view_permission(request, obj=None)</code>","text":"<p>Check if the user has the correct permission to view the object.</p> Source code in <code>management/admin.py</code> <pre><code>def has_view_permission(self, request, obj=None):\n    \"\"\"Check if the user has the correct permission to view the object.\"\"\"\n    if obj is not None:\n        return request.user.has_perm(\n            f\"{self.opts.app_label}.view_{self.opts.model_name}\", obj\n        )\n</code></pre>"},{"location":"reference/station/admin/#station.admin.PermissionsBaseAdmin.obj_perms_manage_view","title":"<code>obj_perms_manage_view(request, object_pk)</code>","text":"<p>Prevents permission scalation at object level.</p> <p>Only allows users with change permissions for this object to change the object permissions.</p> Source code in <code>management/admin.py</code> <pre><code>def obj_perms_manage_view(self, request, object_pk):\n    \"\"\"Prevents permission scalation at object level.\n\n    Only allows users with change permissions for this object to change the object\n    permissions.\n    \"\"\"\n    obj = self.get_object(request, object_pk)\n    if not request.user.has_perm(\n        f\"{self.opts.app_label}.change_{self.opts.model_name}\", obj\n    ):\n        post_url = reverse(\"admin:index\", current_app=self.admin_site.name)\n        return redirect(post_url)\n\n    return super().obj_perms_manage_view(request, object_pk)\n</code></pre>"},{"location":"reference/station/admin/#station.admin.Place","title":"<code>Place</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Specific place that a station is situated.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the place, e.g. Huaraz.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the location.</p>"},{"location":"reference/station/admin/#station.admin.Place-functions","title":"Functions","text":""},{"location":"reference/station/admin/#station.admin.Place.__str__","title":"<code>__str__()</code>","text":"<p>Return the place name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the place name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/admin/#station.admin.Place.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the place.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the place.\"\"\"\n    return reverse(\"station:place_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/admin/#station.admin.PlaceAdmin","title":"<code>PlaceAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the Place model.</p>"},{"location":"reference/station/admin/#station.admin.PlaceBasin","title":"<code>PlaceBasin</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Associates a Basin with a Place and an image.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>place</code> <code>Place</code> <p>Place of the association.</p> <code>basin</code> <code>Basin</code> <p>Basin of the association.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the place within the basin.</p>"},{"location":"reference/station/admin/#station.admin.PlaceBasin-functions","title":"Functions","text":""},{"location":"reference/station/admin/#station.admin.PlaceBasin.__str__","title":"<code>__str__()</code>","text":"<p>Return the place-basin association.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the place-basin association.\"\"\"\n    return str(self.place) + \" - \" + str(self.basin)\n</code></pre>"},{"location":"reference/station/admin/#station.admin.PlaceBasin.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the place-basin association.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the place-basin association.\"\"\"\n    return reverse(\"station:placebasin_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/admin/#station.admin.PlaceBasinAdmin","title":"<code>PlaceBasinAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the PlaceBasin model.</p>"},{"location":"reference/station/admin/#station.admin.Region","title":"<code>Region</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A region within a country.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the region.</p> <code>country</code> <code>Country</code> <p>Country where the region is located.</p>"},{"location":"reference/station/admin/#station.admin.Region-functions","title":"Functions","text":""},{"location":"reference/station/admin/#station.admin.Region.__str__","title":"<code>__str__()</code>","text":"<p>Return the region name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the region name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/admin/#station.admin.Region.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the region.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the region.\"\"\"\n    return reverse(\"station:region_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/admin/#station.admin.RegionAdmin","title":"<code>RegionAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the Region model.</p>"},{"location":"reference/station/admin/#station.admin.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/station/admin/#station.admin.Station-attributes","title":"Attributes","text":""},{"location":"reference/station/admin/#station.admin.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/station/admin/#station.admin.Station-functions","title":"Functions","text":""},{"location":"reference/station/admin/#station.admin.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/station/admin/#station.admin.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/admin/#station.admin.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/station/admin/#station.admin.StationAdmin","title":"<code>StationAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the Station model.</p>"},{"location":"reference/station/admin/#station.admin.StationType","title":"<code>StationType</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Type of the station, indicating what it measures.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the station type, e.g. pluvometric, hydrological.</p>"},{"location":"reference/station/admin/#station.admin.StationType-functions","title":"Functions","text":""},{"location":"reference/station/admin/#station.admin.StationType.__str__","title":"<code>__str__()</code>","text":"<p>Return the station type name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station type name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/admin/#station.admin.StationType.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station type.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station type.\"\"\"\n    return reverse(\"station:stationtype_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/admin/#station.admin.StationTypeAdmin","title":"<code>StationTypeAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the StationType model.</p>"},{"location":"reference/station/apps/","title":"apps","text":""},{"location":"reference/station/apps/#station.apps","title":"<code>station.apps</code>","text":""},{"location":"reference/station/apps/#station.apps-classes","title":"Classes","text":""},{"location":"reference/station/apps/#station.apps.StationConfig","title":"<code>StationConfig</code>","text":"<p>               Bases: <code>AppConfig</code></p>"},{"location":"reference/station/countries/","title":"countries","text":""},{"location":"reference/station/countries/#station.countries","title":"<code>station.countries</code>","text":"<p>Provide a frozen set of countries.</p> <p>The result of the command:</p> <pre><code>&gt;&gt;&gt; import pycountry\n&gt;&gt;&gt; countries = tuple(sorted([(c.name, c.name) for c in pycountry.countries]))\n</code></pre>"},{"location":"reference/station/countries/#station.countries-attributes","title":"Attributes","text":""},{"location":"reference/station/countries/#station.countries.COUNTRIES","title":"<code>COUNTRIES = (('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia, Plurinational State of', 'Bolivia, Plurinational State of'), ('Bonaire, Sint Eustatius and Saba', 'Bonaire, Sint Eustatius and Saba'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Indian Ocean Territory', 'British Indian Ocean Territory'), ('Brunei Darussalam', 'Brunei Darussalam'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cabo Verde', 'Cabo Verde'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Cocos (Keeling) Islands', 'Cocos (Keeling) Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Congo', 'Congo'), ('Congo, The Democratic Republic of the', 'Congo, The Democratic Republic of the'), ('Cook Islands', 'Cook Islands'), ('Costa Rica', 'Costa Rica'), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Cura\u00e7ao', 'Cura\u00e7ao'), ('Cyprus', 'Cyprus'), ('Czechia', 'Czechia'), (\"C\u00f4te d'Ivoire\", \"C\u00f4te d'Ivoire\"), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Eswatini', 'Eswatini'), ('Ethiopia', 'Ethiopia'), ('Falkland Islands (Malvinas)', 'Falkland Islands (Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern Territories', 'French Southern Territories'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Holy See (Vatican City State)', 'Holy See (Vatican City State)'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indonesia', 'Indonesia'), ('Iran, Islamic Republic of', 'Iran, Islamic Republic of'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Japan', 'Japan'), ('Jersey', 'Jersey'), ('Jordan', 'Jordan'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kiribati', 'Kiribati'), (\"Korea, Democratic People's Republic of\", \"Korea, Democratic People's Republic of\"), ('Korea, Republic of', 'Korea, Republic of'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), (\"Lao People's Democratic Republic\", \"Lao People's Democratic Republic\"), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macao', 'Macao'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mexico', 'Mexico'), ('Micronesia, Federated States of', 'Micronesia, Federated States of'), ('Moldova, Republic of', 'Moldova, Republic of'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Macedonia', 'North Macedonia'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palestine, State of', 'Palestine, State of'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn', 'Pitcairn'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Romania', 'Romania'), ('Russian Federation', 'Russian Federation'), ('Rwanda', 'Rwanda'), ('R\u00e9union', 'R\u00e9union'), ('Saint Barth\u00e9lemy', 'Saint Barth\u00e9lemy'), ('Saint Helena, Ascension and Tristan da Cunha', 'Saint Helena, Ascension and Tristan da Cunha'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Martin (French part)', 'Saint Martin (French part)'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten (Dutch part)', 'Sint Maarten (Dutch part)'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Sudan', 'South Sudan'), ('Spain', 'Spain'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard and Jan Mayen', 'Svalbard and Jan Mayen'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syrian Arab Republic', 'Syrian Arab Republic'), ('Taiwan, Province of China', 'Taiwan, Province of China'), ('Tajikistan', 'Tajikistan'), ('Tanzania, United Republic of', 'Tanzania, United Republic of'), ('Thailand', 'Thailand'), ('Timor-Leste', 'Timor-Leste'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tunisia', 'Tunisia'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('T\u00fcrkiye', 'T\u00fcrkiye'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('United States', 'United States'), ('United States Minor Outlying Islands', 'United States Minor Outlying Islands'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela, Bolivarian Republic of', 'Venezuela, Bolivarian Republic of'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands, British', 'Virgin Islands, British'), ('Virgin Islands, U.S.', 'Virgin Islands, U.S.'), ('Wallis and Futuna', 'Wallis and Futuna'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('\u00c5land Islands', '\u00c5land Islands'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/station/filters/","title":"filters","text":""},{"location":"reference/station/filters/#station.filters","title":"<code>station.filters</code>","text":""},{"location":"reference/station/filters/#station.filters-classes","title":"Classes","text":""},{"location":"reference/station/filters/#station.filters.Basin","title":"<code>Basin</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>River(s) basin where the station is located e.g. El Carmen.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the basin, e.g. El Carmen.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the basin.</p> <code>file</code> <code>FileField</code> <p>PDF file with details of the basin.</p>"},{"location":"reference/station/filters/#station.filters.Basin-functions","title":"Functions","text":""},{"location":"reference/station/filters/#station.filters.Basin.__str__","title":"<code>__str__()</code>","text":"<p>Return the basin name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the basin name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/filters/#station.filters.Basin.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the basin.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the basin.\"\"\"\n    return reverse(\"station:basin_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/filters/#station.filters.Country","title":"<code>Country</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>The country where a station or region is in.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Country name.</p>"},{"location":"reference/station/filters/#station.filters.Country-functions","title":"Functions","text":""},{"location":"reference/station/filters/#station.filters.Country.__str__","title":"<code>__str__()</code>","text":"<p>Return the country name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the country name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/filters/#station.filters.Country.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the country.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the country.\"\"\"\n    return reverse(\"station:country_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/filters/#station.filters.FilterVisible","title":"<code>FilterVisible(target, model, field=None)</code>","text":"<p>Filter objects the user has permission to view.</p> <p>Standard filter shows ALL objects available in the database when faced with a ForeignKey field. This filter shows only the objects that appear in the target model objects that the user has permission to view.</p> <p>If field is None, the name of the <code>model</code> model is used.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>type[Model]</code> <p>Model containing the objects.</p> required <code>model</code> <code>type[Model]</code> <p>Model of the objects to display.</p> required <code>field</code> <code>str | None</code> <p>Field to filter by. Defaults to None.</p> <code>None</code> Source code in <code>management/filters.py</code> <pre><code>def __init__(\n    self, target: type[Model], model: type[Model], field: str | None = None\n) -&gt; None:\n    self.target = target\n    self.model = model\n    self.field = field or model.__name__.lower()\n    self.permission = f\"{target._meta.app_label}.view_{target._meta.model_name}\"\n</code></pre>"},{"location":"reference/station/filters/#station.filters.Institution","title":"<code>Institution</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Institutional partner responsible for a station.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the institution.</p>"},{"location":"reference/station/filters/#station.filters.Institution-functions","title":"Functions","text":""},{"location":"reference/station/filters/#station.filters.Institution.__str__","title":"<code>__str__()</code>","text":"<p>Return the institution name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the institution name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/filters/#station.filters.Institution.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the institution.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the institution.\"\"\"\n    return reverse(\"station:institution_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/filters/#station.filters.Place","title":"<code>Place</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Specific place that a station is situated.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the place, e.g. Huaraz.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the location.</p>"},{"location":"reference/station/filters/#station.filters.Place-functions","title":"Functions","text":""},{"location":"reference/station/filters/#station.filters.Place.__str__","title":"<code>__str__()</code>","text":"<p>Return the place name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the place name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/filters/#station.filters.Place.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the place.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the place.\"\"\"\n    return reverse(\"station:place_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/filters/#station.filters.PlaceBasin","title":"<code>PlaceBasin</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Associates a Basin with a Place and an image.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>place</code> <code>Place</code> <p>Place of the association.</p> <code>basin</code> <code>Basin</code> <p>Basin of the association.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the place within the basin.</p>"},{"location":"reference/station/filters/#station.filters.PlaceBasin-functions","title":"Functions","text":""},{"location":"reference/station/filters/#station.filters.PlaceBasin.__str__","title":"<code>__str__()</code>","text":"<p>Return the place-basin association.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the place-basin association.\"\"\"\n    return str(self.place) + \" - \" + str(self.basin)\n</code></pre>"},{"location":"reference/station/filters/#station.filters.PlaceBasin.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the place-basin association.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the place-basin association.\"\"\"\n    return reverse(\"station:placebasin_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/filters/#station.filters.PlaceBasinFilter","title":"<code>PlaceBasinFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/station/filters/#station.filters.Region","title":"<code>Region</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A region within a country.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the region.</p> <code>country</code> <code>Country</code> <p>Country where the region is located.</p>"},{"location":"reference/station/filters/#station.filters.Region-functions","title":"Functions","text":""},{"location":"reference/station/filters/#station.filters.Region.__str__","title":"<code>__str__()</code>","text":"<p>Return the region name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the region name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/filters/#station.filters.Region.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the region.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the region.\"\"\"\n    return reverse(\"station:region_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/filters/#station.filters.RegionFilter","title":"<code>RegionFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/station/filters/#station.filters.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/station/filters/#station.filters.Station-attributes","title":"Attributes","text":""},{"location":"reference/station/filters/#station.filters.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/station/filters/#station.filters.Station-functions","title":"Functions","text":""},{"location":"reference/station/filters/#station.filters.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/station/filters/#station.filters.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/filters/#station.filters.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/station/filters/#station.filters.StationFilter","title":"<code>StationFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/station/filters/#station.filters.StationType","title":"<code>StationType</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Type of the station, indicating what it measures.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the station type, e.g. pluvometric, hydrological.</p>"},{"location":"reference/station/filters/#station.filters.StationType-functions","title":"Functions","text":""},{"location":"reference/station/filters/#station.filters.StationType.__str__","title":"<code>__str__()</code>","text":"<p>Return the station type name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station type name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/filters/#station.filters.StationType.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station type.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station type.\"\"\"\n    return reverse(\"station:stationtype_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/functions/","title":"functions","text":""},{"location":"reference/station/functions/#station.functions","title":"<code>station.functions</code>","text":""},{"location":"reference/station/functions/#station.functions-classes","title":"Classes","text":""},{"location":"reference/station/functions/#station.functions.Measurement","title":"<code>Measurement</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Class to store the measurements and their validation status.</p> <p>This class holds the value of a given variable and station at a specific time, as well as auxiliary information such as maximum and minimum values, depth and direction, for vector quantities. All of these have a <code>raw</code> version where a backup of the original data is kept, should this change at any point.</p> <p>Flags to monitor its validation status, if the data is active (and therefore can be used for reporting) and if it has actually been used for that is also included.</p> <p>Attributes:</p> Name Type Description <code>depth</code> <code>int</code> <p>Depth of the measurement.</p> <code>direction</code> <code>Decimal</code> <p>Direction of the measurement, useful for vector quantities.</p> <code>raw_value</code> <code>Decimal</code> <p>Original value of the measurement.</p> <code>raw_maximum</code> <code>Decimal</code> <p>Original maximum value of the measurement.</p> <code>raw_minimum</code> <code>Decimal</code> <p>Original minimum value of the measurement.</p> <code>raw_direction</code> <code>Decimal</code> <p>Original direction of the measurement.</p> <code>raw_depth</code> <code>int</code> <p>Original depth of the measurement.</p> <code>is_validated</code> <code>bool</code> <p>Flag to indicate if the measurement has been validated.</p> <code>is_active</code> <code>bool</code> <p>Flag to indicate if the measurement is active. An inactive measurement is not used for reporting</p>"},{"location":"reference/station/functions/#station.functions.Measurement-attributes","title":"Attributes","text":""},{"location":"reference/station/functions/#station.functions.Measurement.overwritten","title":"<code>overwritten: bool</code>  <code>property</code>","text":"<p>Indicates if any of the values associated to the entry have been overwritten.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if any raw field is different to the corresponding standard field.</p>"},{"location":"reference/station/functions/#station.functions.Measurement.raws","title":"<code>raws: tuple[str, ...]</code>  <code>property</code>","text":"<p>Return the raw fields of the measurement.</p> <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>tuple[str]: Tuple with the names of the raw fields of the measurement.</p>"},{"location":"reference/station/functions/#station.functions.Measurement-functions","title":"Functions","text":""},{"location":"reference/station/functions/#station.functions.Measurement.clean","title":"<code>clean()</code>","text":"<p>Check consistency of validation, reporting and backs-up values.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Check consistency of validation, reporting and backs-up values.\"\"\"\n    # Check consistency of validation\n    if not self.is_validated and not self.is_active:\n        raise ValidationError(\"Only validated entries can be declared as inactive.\")\n\n    # Backup values to raws, if needed\n    for r in self.raws:\n        value = getattr(self, r.removeprefix(\"raw_\"))\n        if value and not getattr(self, r):\n            setattr(self, r, value)\n</code></pre>"},{"location":"reference/station/functions/#station.functions.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/station/functions/#station.functions.Station-attributes","title":"Attributes","text":""},{"location":"reference/station/functions/#station.functions.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/station/functions/#station.functions.Station-functions","title":"Functions","text":""},{"location":"reference/station/functions/#station.functions.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/station/functions/#station.functions.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/functions/#station.functions.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/station/functions/#station.functions-functions","title":"Functions","text":""},{"location":"reference/station/functions/#station.functions.update_variables_for_station","title":"<code>update_variables_for_station(*station_codes)</code>","text":"<p>Update the variables for the given station codes.</p> <p>The variables are updated based on the measurements associated with the station. The variables are saved as a comma-separated string in the variables field of the station model.</p> <p>Parameters:</p> Name Type Description Default <code>station_codes</code> <code>tuple[str]</code> <p>Station codes for which to update the variables. If not provided, all station codes with measurements are considered.</p> <code>()</code> Source code in <code>station/functions.py</code> <pre><code>def update_variables_for_station(*station_codes) -&gt; None:\n    \"\"\"Update the variables for the given station codes.\n\n    The variables are updated based on the measurements associated with the station.\n    The variables are saved as a comma-separated string in the variables field of the\n    station model.\n\n    Args:\n        station_codes (tuple[str]): Station codes for which to update the variables.\n            If not provided, all station codes with measurements are considered.\n    \"\"\"\n\n    # We get the station codes from the Measurement model if not provided\n    # Only station codes with measurements are considered\n    station_codes = (\n        station_codes\n        or Measurement.objects.values_list(\n            \"station__station_code\", flat=True\n        ).distinct()\n    )\n\n    # Get the variables for each station and save them as a comma-separated string\n    for station_code in station_codes:\n        variables = (\n            Measurement.objects.filter(station__station_code=station_code)\n            .values_list(\"variable__variable_code\", flat=True)\n            .distinct()\n        )\n        if variables:\n            station = Station.objects.get(station_code=station_code)\n            station.variables = variables = \",\".join(variables)\n            station.full_clean()\n            station.save()\n</code></pre>"},{"location":"reference/station/models/","title":"models","text":""},{"location":"reference/station/models/#station.models","title":"<code>station.models</code>","text":""},{"location":"reference/station/models/#station.models-attributes","title":"Attributes","text":""},{"location":"reference/station/models/#station.models.BASIN_FILE_PATH","title":"<code>BASIN_FILE_PATH = 'station/basin_file/'</code>  <code>module-attribute</code>","text":""},{"location":"reference/station/models/#station.models.BASIN_IMAGE_PATH","title":"<code>BASIN_IMAGE_PATH = 'station/basin_image/'</code>  <code>module-attribute</code>","text":""},{"location":"reference/station/models/#station.models.COUNTRIES","title":"<code>COUNTRIES = (('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia, Plurinational State of', 'Bolivia, Plurinational State of'), ('Bonaire, Sint Eustatius and Saba', 'Bonaire, Sint Eustatius and Saba'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Indian Ocean Territory', 'British Indian Ocean Territory'), ('Brunei Darussalam', 'Brunei Darussalam'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cabo Verde', 'Cabo Verde'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Cocos (Keeling) Islands', 'Cocos (Keeling) Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Congo', 'Congo'), ('Congo, The Democratic Republic of the', 'Congo, The Democratic Republic of the'), ('Cook Islands', 'Cook Islands'), ('Costa Rica', 'Costa Rica'), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Cura\u00e7ao', 'Cura\u00e7ao'), ('Cyprus', 'Cyprus'), ('Czechia', 'Czechia'), (\"C\u00f4te d'Ivoire\", \"C\u00f4te d'Ivoire\"), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Eswatini', 'Eswatini'), ('Ethiopia', 'Ethiopia'), ('Falkland Islands (Malvinas)', 'Falkland Islands (Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern Territories', 'French Southern Territories'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Holy See (Vatican City State)', 'Holy See (Vatican City State)'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indonesia', 'Indonesia'), ('Iran, Islamic Republic of', 'Iran, Islamic Republic of'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Japan', 'Japan'), ('Jersey', 'Jersey'), ('Jordan', 'Jordan'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kiribati', 'Kiribati'), (\"Korea, Democratic People's Republic of\", \"Korea, Democratic People's Republic of\"), ('Korea, Republic of', 'Korea, Republic of'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), (\"Lao People's Democratic Republic\", \"Lao People's Democratic Republic\"), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macao', 'Macao'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mexico', 'Mexico'), ('Micronesia, Federated States of', 'Micronesia, Federated States of'), ('Moldova, Republic of', 'Moldova, Republic of'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Macedonia', 'North Macedonia'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palestine, State of', 'Palestine, State of'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn', 'Pitcairn'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Romania', 'Romania'), ('Russian Federation', 'Russian Federation'), ('Rwanda', 'Rwanda'), ('R\u00e9union', 'R\u00e9union'), ('Saint Barth\u00e9lemy', 'Saint Barth\u00e9lemy'), ('Saint Helena, Ascension and Tristan da Cunha', 'Saint Helena, Ascension and Tristan da Cunha'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Martin (French part)', 'Saint Martin (French part)'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten (Dutch part)', 'Sint Maarten (Dutch part)'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Sudan', 'South Sudan'), ('Spain', 'Spain'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard and Jan Mayen', 'Svalbard and Jan Mayen'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syrian Arab Republic', 'Syrian Arab Republic'), ('Taiwan, Province of China', 'Taiwan, Province of China'), ('Tajikistan', 'Tajikistan'), ('Tanzania, United Republic of', 'Tanzania, United Republic of'), ('Thailand', 'Thailand'), ('Timor-Leste', 'Timor-Leste'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tunisia', 'Tunisia'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('T\u00fcrkiye', 'T\u00fcrkiye'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('United States', 'United States'), ('United States Minor Outlying Islands', 'United States Minor Outlying Islands'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela, Bolivarian Republic of', 'Venezuela, Bolivarian Republic of'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands, British', 'Virgin Islands, British'), ('Virgin Islands, U.S.', 'Virgin Islands, U.S.'), ('Wallis and Futuna', 'Wallis and Futuna'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('\u00c5land Islands', '\u00c5land Islands'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/station/models/#station.models.PLACE_BASIN_IMAGE_PATH","title":"<code>PLACE_BASIN_IMAGE_PATH = 'station/place_basin_image/'</code>  <code>module-attribute</code>","text":""},{"location":"reference/station/models/#station.models.PLACE_IMAGE_PATH","title":"<code>PLACE_IMAGE_PATH = 'station/place_image/'</code>  <code>module-attribute</code>","text":""},{"location":"reference/station/models/#station.models.STATION_IMAGE_PATH","title":"<code>STATION_IMAGE_PATH = 'station/station_image/'</code>  <code>module-attribute</code>","text":""},{"location":"reference/station/models/#station.models.TIMEZONES","title":"<code>TIMEZONES = (('Africa/Abidjan', 'Africa/Abidjan'), ('Africa/Accra', 'Africa/Accra'), ('Africa/Addis_Ababa', 'Africa/Addis_Ababa'), ('Africa/Algiers', 'Africa/Algiers'), ('Africa/Asmara', 'Africa/Asmara'), ('Africa/Asmera', 'Africa/Asmera'), ('Africa/Bamako', 'Africa/Bamako'), ('Africa/Bangui', 'Africa/Bangui'), ('Africa/Banjul', 'Africa/Banjul'), ('Africa/Bissau', 'Africa/Bissau'), ('Africa/Blantyre', 'Africa/Blantyre'), ('Africa/Brazzaville', 'Africa/Brazzaville'), ('Africa/Bujumbura', 'Africa/Bujumbura'), ('Africa/Cairo', 'Africa/Cairo'), ('Africa/Casablanca', 'Africa/Casablanca'), ('Africa/Ceuta', 'Africa/Ceuta'), ('Africa/Conakry', 'Africa/Conakry'), ('Africa/Dakar', 'Africa/Dakar'), ('Africa/Dar_es_Salaam', 'Africa/Dar_es_Salaam'), ('Africa/Djibouti', 'Africa/Djibouti'), ('Africa/Douala', 'Africa/Douala'), ('Africa/El_Aaiun', 'Africa/El_Aaiun'), ('Africa/Freetown', 'Africa/Freetown'), ('Africa/Gaborone', 'Africa/Gaborone'), ('Africa/Harare', 'Africa/Harare'), ('Africa/Johannesburg', 'Africa/Johannesburg'), ('Africa/Juba', 'Africa/Juba'), ('Africa/Kampala', 'Africa/Kampala'), ('Africa/Khartoum', 'Africa/Khartoum'), ('Africa/Kigali', 'Africa/Kigali'), ('Africa/Kinshasa', 'Africa/Kinshasa'), ('Africa/Lagos', 'Africa/Lagos'), ('Africa/Libreville', 'Africa/Libreville'), ('Africa/Lome', 'Africa/Lome'), ('Africa/Luanda', 'Africa/Luanda'), ('Africa/Lubumbashi', 'Africa/Lubumbashi'), ('Africa/Lusaka', 'Africa/Lusaka'), ('Africa/Malabo', 'Africa/Malabo'), ('Africa/Maputo', 'Africa/Maputo'), ('Africa/Maseru', 'Africa/Maseru'), ('Africa/Mbabane', 'Africa/Mbabane'), ('Africa/Mogadishu', 'Africa/Mogadishu'), ('Africa/Monrovia', 'Africa/Monrovia'), ('Africa/Nairobi', 'Africa/Nairobi'), ('Africa/Ndjamena', 'Africa/Ndjamena'), ('Africa/Niamey', 'Africa/Niamey'), ('Africa/Nouakchott', 'Africa/Nouakchott'), ('Africa/Ouagadougou', 'Africa/Ouagadougou'), ('Africa/Porto-Novo', 'Africa/Porto-Novo'), ('Africa/Sao_Tome', 'Africa/Sao_Tome'), ('Africa/Timbuktu', 'Africa/Timbuktu'), ('Africa/Tripoli', 'Africa/Tripoli'), ('Africa/Tunis', 'Africa/Tunis'), ('Africa/Windhoek', 'Africa/Windhoek'), ('America/Adak', 'America/Adak'), ('America/Anchorage', 'America/Anchorage'), ('America/Anguilla', 'America/Anguilla'), ('America/Antigua', 'America/Antigua'), ('America/Araguaina', 'America/Araguaina'), ('America/Argentina/Buenos_Aires', 'America/Argentina/Buenos_Aires'), ('America/Argentina/Catamarca', 'America/Argentina/Catamarca'), ('America/Argentina/ComodRivadavia', 'America/Argentina/ComodRivadavia'), ('America/Argentina/Cordoba', 'America/Argentina/Cordoba'), ('America/Argentina/Jujuy', 'America/Argentina/Jujuy'), ('America/Argentina/La_Rioja', 'America/Argentina/La_Rioja'), ('America/Argentina/Mendoza', 'America/Argentina/Mendoza'), ('America/Argentina/Rio_Gallegos', 'America/Argentina/Rio_Gallegos'), ('America/Argentina/Salta', 'America/Argentina/Salta'), ('America/Argentina/San_Juan', 'America/Argentina/San_Juan'), ('America/Argentina/San_Luis', 'America/Argentina/San_Luis'), ('America/Argentina/Tucuman', 'America/Argentina/Tucuman'), ('America/Argentina/Ushuaia', 'America/Argentina/Ushuaia'), ('America/Aruba', 'America/Aruba'), ('America/Asuncion', 'America/Asuncion'), ('America/Atikokan', 'America/Atikokan'), ('America/Atka', 'America/Atka'), ('America/Bahia', 'America/Bahia'), ('America/Bahia_Banderas', 'America/Bahia_Banderas'), ('America/Barbados', 'America/Barbados'), ('America/Belem', 'America/Belem'), ('America/Belize', 'America/Belize'), ('America/Blanc-Sablon', 'America/Blanc-Sablon'), ('America/Boa_Vista', 'America/Boa_Vista'), ('America/Bogota', 'America/Bogota'), ('America/Boise', 'America/Boise'), ('America/Buenos_Aires', 'America/Buenos_Aires'), ('America/Cambridge_Bay', 'America/Cambridge_Bay'), ('America/Campo_Grande', 'America/Campo_Grande'), ('America/Cancun', 'America/Cancun'), ('America/Caracas', 'America/Caracas'), ('America/Catamarca', 'America/Catamarca'), ('America/Cayenne', 'America/Cayenne'), ('America/Cayman', 'America/Cayman'), ('America/Chicago', 'America/Chicago'), ('America/Chihuahua', 'America/Chihuahua'), ('America/Ciudad_Juarez', 'America/Ciudad_Juarez'), ('America/Coral_Harbour', 'America/Coral_Harbour'), ('America/Cordoba', 'America/Cordoba'), ('America/Costa_Rica', 'America/Costa_Rica'), ('America/Creston', 'America/Creston'), ('America/Cuiaba', 'America/Cuiaba'), ('America/Curacao', 'America/Curacao'), ('America/Danmarkshavn', 'America/Danmarkshavn'), ('America/Dawson', 'America/Dawson'), ('America/Dawson_Creek', 'America/Dawson_Creek'), ('America/Denver', 'America/Denver'), ('America/Detroit', 'America/Detroit'), ('America/Dominica', 'America/Dominica'), ('America/Edmonton', 'America/Edmonton'), ('America/Eirunepe', 'America/Eirunepe'), ('America/El_Salvador', 'America/El_Salvador'), ('America/Ensenada', 'America/Ensenada'), ('America/Fort_Nelson', 'America/Fort_Nelson'), ('America/Fort_Wayne', 'America/Fort_Wayne'), ('America/Fortaleza', 'America/Fortaleza'), ('America/Glace_Bay', 'America/Glace_Bay'), ('America/Godthab', 'America/Godthab'), ('America/Goose_Bay', 'America/Goose_Bay'), ('America/Grand_Turk', 'America/Grand_Turk'), ('America/Grenada', 'America/Grenada'), ('America/Guadeloupe', 'America/Guadeloupe'), ('America/Guatemala', 'America/Guatemala'), ('America/Guayaquil', 'America/Guayaquil'), ('America/Guyana', 'America/Guyana'), ('America/Halifax', 'America/Halifax'), ('America/Havana', 'America/Havana'), ('America/Hermosillo', 'America/Hermosillo'), ('America/Indiana/Indianapolis', 'America/Indiana/Indianapolis'), ('America/Indiana/Knox', 'America/Indiana/Knox'), ('America/Indiana/Marengo', 'America/Indiana/Marengo'), ('America/Indiana/Petersburg', 'America/Indiana/Petersburg'), ('America/Indiana/Tell_City', 'America/Indiana/Tell_City'), ('America/Indiana/Vevay', 'America/Indiana/Vevay'), ('America/Indiana/Vincennes', 'America/Indiana/Vincennes'), ('America/Indiana/Winamac', 'America/Indiana/Winamac'), ('America/Indianapolis', 'America/Indianapolis'), ('America/Inuvik', 'America/Inuvik'), ('America/Iqaluit', 'America/Iqaluit'), ('America/Jamaica', 'America/Jamaica'), ('America/Jujuy', 'America/Jujuy'), ('America/Juneau', 'America/Juneau'), ('America/Kentucky/Louisville', 'America/Kentucky/Louisville'), ('America/Kentucky/Monticello', 'America/Kentucky/Monticello'), ('America/Knox_IN', 'America/Knox_IN'), ('America/Kralendijk', 'America/Kralendijk'), ('America/La_Paz', 'America/La_Paz'), ('America/Lima', 'America/Lima'), ('America/Los_Angeles', 'America/Los_Angeles'), ('America/Louisville', 'America/Louisville'), ('America/Lower_Princes', 'America/Lower_Princes'), ('America/Maceio', 'America/Maceio'), ('America/Managua', 'America/Managua'), ('America/Manaus', 'America/Manaus'), ('America/Marigot', 'America/Marigot'), ('America/Martinique', 'America/Martinique'), ('America/Matamoros', 'America/Matamoros'), ('America/Mazatlan', 'America/Mazatlan'), ('America/Mendoza', 'America/Mendoza'), ('America/Menominee', 'America/Menominee'), ('America/Merida', 'America/Merida'), ('America/Metlakatla', 'America/Metlakatla'), ('America/Mexico_City', 'America/Mexico_City'), ('America/Miquelon', 'America/Miquelon'), ('America/Moncton', 'America/Moncton'), ('America/Monterrey', 'America/Monterrey'), ('America/Montevideo', 'America/Montevideo'), ('America/Montreal', 'America/Montreal'), ('America/Montserrat', 'America/Montserrat'), ('America/Nassau', 'America/Nassau'), ('America/New_York', 'America/New_York'), ('America/Nipigon', 'America/Nipigon'), ('America/Nome', 'America/Nome'), ('America/Noronha', 'America/Noronha'), ('America/North_Dakota/Beulah', 'America/North_Dakota/Beulah'), ('America/North_Dakota/Center', 'America/North_Dakota/Center'), ('America/North_Dakota/New_Salem', 'America/North_Dakota/New_Salem'), ('America/Nuuk', 'America/Nuuk'), ('America/Ojinaga', 'America/Ojinaga'), ('America/Panama', 'America/Panama'), ('America/Pangnirtung', 'America/Pangnirtung'), ('America/Paramaribo', 'America/Paramaribo'), ('America/Phoenix', 'America/Phoenix'), ('America/Port-au-Prince', 'America/Port-au-Prince'), ('America/Port_of_Spain', 'America/Port_of_Spain'), ('America/Porto_Acre', 'America/Porto_Acre'), ('America/Porto_Velho', 'America/Porto_Velho'), ('America/Puerto_Rico', 'America/Puerto_Rico'), ('America/Punta_Arenas', 'America/Punta_Arenas'), ('America/Rainy_River', 'America/Rainy_River'), ('America/Rankin_Inlet', 'America/Rankin_Inlet'), ('America/Recife', 'America/Recife'), ('America/Regina', 'America/Regina'), ('America/Resolute', 'America/Resolute'), ('America/Rio_Branco', 'America/Rio_Branco'), ('America/Rosario', 'America/Rosario'), ('America/Santa_Isabel', 'America/Santa_Isabel'), ('America/Santarem', 'America/Santarem'), ('America/Santiago', 'America/Santiago'), ('America/Santo_Domingo', 'America/Santo_Domingo'), ('America/Sao_Paulo', 'America/Sao_Paulo'), ('America/Scoresbysund', 'America/Scoresbysund'), ('America/Shiprock', 'America/Shiprock'), ('America/Sitka', 'America/Sitka'), ('America/St_Barthelemy', 'America/St_Barthelemy'), ('America/St_Johns', 'America/St_Johns'), ('America/St_Kitts', 'America/St_Kitts'), ('America/St_Lucia', 'America/St_Lucia'), ('America/St_Thomas', 'America/St_Thomas'), ('America/St_Vincent', 'America/St_Vincent'), ('America/Swift_Current', 'America/Swift_Current'), ('America/Tegucigalpa', 'America/Tegucigalpa'), ('America/Thule', 'America/Thule'), ('America/Thunder_Bay', 'America/Thunder_Bay'), ('America/Tijuana', 'America/Tijuana'), ('America/Toronto', 'America/Toronto'), ('America/Tortola', 'America/Tortola'), ('America/Vancouver', 'America/Vancouver'), ('America/Virgin', 'America/Virgin'), ('America/Whitehorse', 'America/Whitehorse'), ('America/Winnipeg', 'America/Winnipeg'), ('America/Yakutat', 'America/Yakutat'), ('America/Yellowknife', 'America/Yellowknife'), ('Antarctica/Casey', 'Antarctica/Casey'), ('Antarctica/Davis', 'Antarctica/Davis'), ('Antarctica/DumontDUrville', 'Antarctica/DumontDUrville'), ('Antarctica/Macquarie', 'Antarctica/Macquarie'), ('Antarctica/Mawson', 'Antarctica/Mawson'), ('Antarctica/McMurdo', 'Antarctica/McMurdo'), ('Antarctica/Palmer', 'Antarctica/Palmer'), ('Antarctica/Rothera', 'Antarctica/Rothera'), ('Antarctica/South_Pole', 'Antarctica/South_Pole'), ('Antarctica/Syowa', 'Antarctica/Syowa'), ('Antarctica/Troll', 'Antarctica/Troll'), ('Antarctica/Vostok', 'Antarctica/Vostok'), ('Arctic/Longyearbyen', 'Arctic/Longyearbyen'), ('Asia/Aden', 'Asia/Aden'), ('Asia/Almaty', 'Asia/Almaty'), ('Asia/Amman', 'Asia/Amman'), ('Asia/Anadyr', 'Asia/Anadyr'), ('Asia/Aqtau', 'Asia/Aqtau'), ('Asia/Aqtobe', 'Asia/Aqtobe'), ('Asia/Ashgabat', 'Asia/Ashgabat'), ('Asia/Ashkhabad', 'Asia/Ashkhabad'), ('Asia/Atyrau', 'Asia/Atyrau'), ('Asia/Baghdad', 'Asia/Baghdad'), ('Asia/Bahrain', 'Asia/Bahrain'), ('Asia/Baku', 'Asia/Baku'), ('Asia/Bangkok', 'Asia/Bangkok'), ('Asia/Barnaul', 'Asia/Barnaul'), ('Asia/Beirut', 'Asia/Beirut'), ('Asia/Bishkek', 'Asia/Bishkek'), ('Asia/Brunei', 'Asia/Brunei'), ('Asia/Calcutta', 'Asia/Calcutta'), ('Asia/Chita', 'Asia/Chita'), ('Asia/Choibalsan', 'Asia/Choibalsan'), ('Asia/Chongqing', 'Asia/Chongqing'), ('Asia/Chungking', 'Asia/Chungking'), ('Asia/Colombo', 'Asia/Colombo'), ('Asia/Dacca', 'Asia/Dacca'), ('Asia/Damascus', 'Asia/Damascus'), ('Asia/Dhaka', 'Asia/Dhaka'), ('Asia/Dili', 'Asia/Dili'), ('Asia/Dubai', 'Asia/Dubai'), ('Asia/Dushanbe', 'Asia/Dushanbe'), ('Asia/Famagusta', 'Asia/Famagusta'), ('Asia/Gaza', 'Asia/Gaza'), ('Asia/Harbin', 'Asia/Harbin'), ('Asia/Hebron', 'Asia/Hebron'), ('Asia/Ho_Chi_Minh', 'Asia/Ho_Chi_Minh'), ('Asia/Hong_Kong', 'Asia/Hong_Kong'), ('Asia/Hovd', 'Asia/Hovd'), ('Asia/Irkutsk', 'Asia/Irkutsk'), ('Asia/Istanbul', 'Asia/Istanbul'), ('Asia/Jakarta', 'Asia/Jakarta'), ('Asia/Jayapura', 'Asia/Jayapura'), ('Asia/Jerusalem', 'Asia/Jerusalem'), ('Asia/Kabul', 'Asia/Kabul'), ('Asia/Kamchatka', 'Asia/Kamchatka'), ('Asia/Karachi', 'Asia/Karachi'), ('Asia/Kashgar', 'Asia/Kashgar'), ('Asia/Kathmandu', 'Asia/Kathmandu'), ('Asia/Katmandu', 'Asia/Katmandu'), ('Asia/Khandyga', 'Asia/Khandyga'), ('Asia/Kolkata', 'Asia/Kolkata'), ('Asia/Krasnoyarsk', 'Asia/Krasnoyarsk'), ('Asia/Kuala_Lumpur', 'Asia/Kuala_Lumpur'), ('Asia/Kuching', 'Asia/Kuching'), ('Asia/Kuwait', 'Asia/Kuwait'), ('Asia/Macao', 'Asia/Macao'), ('Asia/Macau', 'Asia/Macau'), ('Asia/Magadan', 'Asia/Magadan'), ('Asia/Makassar', 'Asia/Makassar'), ('Asia/Manila', 'Asia/Manila'), ('Asia/Muscat', 'Asia/Muscat'), ('Asia/Nicosia', 'Asia/Nicosia'), ('Asia/Novokuznetsk', 'Asia/Novokuznetsk'), ('Asia/Novosibirsk', 'Asia/Novosibirsk'), ('Asia/Omsk', 'Asia/Omsk'), ('Asia/Oral', 'Asia/Oral'), ('Asia/Phnom_Penh', 'Asia/Phnom_Penh'), ('Asia/Pontianak', 'Asia/Pontianak'), ('Asia/Pyongyang', 'Asia/Pyongyang'), ('Asia/Qatar', 'Asia/Qatar'), ('Asia/Qostanay', 'Asia/Qostanay'), ('Asia/Qyzylorda', 'Asia/Qyzylorda'), ('Asia/Rangoon', 'Asia/Rangoon'), ('Asia/Riyadh', 'Asia/Riyadh'), ('Asia/Saigon', 'Asia/Saigon'), ('Asia/Sakhalin', 'Asia/Sakhalin'), ('Asia/Samarkand', 'Asia/Samarkand'), ('Asia/Seoul', 'Asia/Seoul'), ('Asia/Shanghai', 'Asia/Shanghai'), ('Asia/Singapore', 'Asia/Singapore'), ('Asia/Srednekolymsk', 'Asia/Srednekolymsk'), ('Asia/Taipei', 'Asia/Taipei'), ('Asia/Tashkent', 'Asia/Tashkent'), ('Asia/Tbilisi', 'Asia/Tbilisi'), ('Asia/Tehran', 'Asia/Tehran'), ('Asia/Tel_Aviv', 'Asia/Tel_Aviv'), ('Asia/Thimbu', 'Asia/Thimbu'), ('Asia/Thimphu', 'Asia/Thimphu'), ('Asia/Tokyo', 'Asia/Tokyo'), ('Asia/Tomsk', 'Asia/Tomsk'), ('Asia/Ujung_Pandang', 'Asia/Ujung_Pandang'), ('Asia/Ulaanbaatar', 'Asia/Ulaanbaatar'), ('Asia/Ulan_Bator', 'Asia/Ulan_Bator'), ('Asia/Urumqi', 'Asia/Urumqi'), ('Asia/Ust-Nera', 'Asia/Ust-Nera'), ('Asia/Vientiane', 'Asia/Vientiane'), ('Asia/Vladivostok', 'Asia/Vladivostok'), ('Asia/Yakutsk', 'Asia/Yakutsk'), ('Asia/Yangon', 'Asia/Yangon'), ('Asia/Yekaterinburg', 'Asia/Yekaterinburg'), ('Asia/Yerevan', 'Asia/Yerevan'), ('Atlantic/Azores', 'Atlantic/Azores'), ('Atlantic/Bermuda', 'Atlantic/Bermuda'), ('Atlantic/Canary', 'Atlantic/Canary'), ('Atlantic/Cape_Verde', 'Atlantic/Cape_Verde'), ('Atlantic/Faeroe', 'Atlantic/Faeroe'), ('Atlantic/Faroe', 'Atlantic/Faroe'), ('Atlantic/Jan_Mayen', 'Atlantic/Jan_Mayen'), ('Atlantic/Madeira', 'Atlantic/Madeira'), ('Atlantic/Reykjavik', 'Atlantic/Reykjavik'), ('Atlantic/South_Georgia', 'Atlantic/South_Georgia'), ('Atlantic/St_Helena', 'Atlantic/St_Helena'), ('Atlantic/Stanley', 'Atlantic/Stanley'), ('Australia/ACT', 'Australia/ACT'), ('Australia/Adelaide', 'Australia/Adelaide'), ('Australia/Brisbane', 'Australia/Brisbane'), ('Australia/Broken_Hill', 'Australia/Broken_Hill'), ('Australia/Canberra', 'Australia/Canberra'), ('Australia/Currie', 'Australia/Currie'), ('Australia/Darwin', 'Australia/Darwin'), ('Australia/Eucla', 'Australia/Eucla'), ('Australia/Hobart', 'Australia/Hobart'), ('Australia/LHI', 'Australia/LHI'), ('Australia/Lindeman', 'Australia/Lindeman'), ('Australia/Lord_Howe', 'Australia/Lord_Howe'), ('Australia/Melbourne', 'Australia/Melbourne'), ('Australia/NSW', 'Australia/NSW'), ('Australia/North', 'Australia/North'), ('Australia/Perth', 'Australia/Perth'), ('Australia/Queensland', 'Australia/Queensland'), ('Australia/South', 'Australia/South'), ('Australia/Sydney', 'Australia/Sydney'), ('Australia/Tasmania', 'Australia/Tasmania'), ('Australia/Victoria', 'Australia/Victoria'), ('Australia/West', 'Australia/West'), ('Australia/Yancowinna', 'Australia/Yancowinna'), ('Brazil/Acre', 'Brazil/Acre'), ('Brazil/DeNoronha', 'Brazil/DeNoronha'), ('Brazil/East', 'Brazil/East'), ('Brazil/West', 'Brazil/West'), ('CET', 'CET'), ('CST6CDT', 'CST6CDT'), ('Canada/Atlantic', 'Canada/Atlantic'), ('Canada/Central', 'Canada/Central'), ('Canada/Eastern', 'Canada/Eastern'), ('Canada/Mountain', 'Canada/Mountain'), ('Canada/Newfoundland', 'Canada/Newfoundland'), ('Canada/Pacific', 'Canada/Pacific'), ('Canada/Saskatchewan', 'Canada/Saskatchewan'), ('Canada/Yukon', 'Canada/Yukon'), ('Chile/Continental', 'Chile/Continental'), ('Chile/EasterIsland', 'Chile/EasterIsland'), ('Cuba', 'Cuba'), ('EET', 'EET'), ('EST', 'EST'), ('EST5EDT', 'EST5EDT'), ('Egypt', 'Egypt'), ('Eire', 'Eire'), ('Etc/GMT', 'Etc/GMT'), ('Etc/GMT+0', 'Etc/GMT+0'), ('Etc/GMT+1', 'Etc/GMT+1'), ('Etc/GMT+10', 'Etc/GMT+10'), ('Etc/GMT+11', 'Etc/GMT+11'), ('Etc/GMT+12', 'Etc/GMT+12'), ('Etc/GMT+2', 'Etc/GMT+2'), ('Etc/GMT+3', 'Etc/GMT+3'), ('Etc/GMT+4', 'Etc/GMT+4'), ('Etc/GMT+5', 'Etc/GMT+5'), ('Etc/GMT+6', 'Etc/GMT+6'), ('Etc/GMT+7', 'Etc/GMT+7'), ('Etc/GMT+8', 'Etc/GMT+8'), ('Etc/GMT+9', 'Etc/GMT+9'), ('Etc/GMT-0', 'Etc/GMT-0'), ('Etc/GMT-1', 'Etc/GMT-1'), ('Etc/GMT-10', 'Etc/GMT-10'), ('Etc/GMT-11', 'Etc/GMT-11'), ('Etc/GMT-12', 'Etc/GMT-12'), ('Etc/GMT-13', 'Etc/GMT-13'), ('Etc/GMT-14', 'Etc/GMT-14'), ('Etc/GMT-2', 'Etc/GMT-2'), ('Etc/GMT-3', 'Etc/GMT-3'), ('Etc/GMT-4', 'Etc/GMT-4'), ('Etc/GMT-5', 'Etc/GMT-5'), ('Etc/GMT-6', 'Etc/GMT-6'), ('Etc/GMT-7', 'Etc/GMT-7'), ('Etc/GMT-8', 'Etc/GMT-8'), ('Etc/GMT-9', 'Etc/GMT-9'), ('Etc/GMT0', 'Etc/GMT0'), ('Etc/Greenwich', 'Etc/Greenwich'), ('Etc/UCT', 'Etc/UCT'), ('Etc/UTC', 'Etc/UTC'), ('Etc/Universal', 'Etc/Universal'), ('Etc/Zulu', 'Etc/Zulu'), ('Europe/Amsterdam', 'Europe/Amsterdam'), ('Europe/Andorra', 'Europe/Andorra'), ('Europe/Astrakhan', 'Europe/Astrakhan'), ('Europe/Athens', 'Europe/Athens'), ('Europe/Belfast', 'Europe/Belfast'), ('Europe/Belgrade', 'Europe/Belgrade'), ('Europe/Berlin', 'Europe/Berlin'), ('Europe/Bratislava', 'Europe/Bratislava'), ('Europe/Brussels', 'Europe/Brussels'), ('Europe/Bucharest', 'Europe/Bucharest'), ('Europe/Budapest', 'Europe/Budapest'), ('Europe/Busingen', 'Europe/Busingen'), ('Europe/Chisinau', 'Europe/Chisinau'), ('Europe/Copenhagen', 'Europe/Copenhagen'), ('Europe/Dublin', 'Europe/Dublin'), ('Europe/Gibraltar', 'Europe/Gibraltar'), ('Europe/Guernsey', 'Europe/Guernsey'), ('Europe/Helsinki', 'Europe/Helsinki'), ('Europe/Isle_of_Man', 'Europe/Isle_of_Man'), ('Europe/Istanbul', 'Europe/Istanbul'), ('Europe/Jersey', 'Europe/Jersey'), ('Europe/Kaliningrad', 'Europe/Kaliningrad'), ('Europe/Kiev', 'Europe/Kiev'), ('Europe/Kirov', 'Europe/Kirov'), ('Europe/Kyiv', 'Europe/Kyiv'), ('Europe/Lisbon', 'Europe/Lisbon'), ('Europe/Ljubljana', 'Europe/Ljubljana'), ('Europe/London', 'Europe/London'), ('Europe/Luxembourg', 'Europe/Luxembourg'), ('Europe/Madrid', 'Europe/Madrid'), ('Europe/Malta', 'Europe/Malta'), ('Europe/Mariehamn', 'Europe/Mariehamn'), ('Europe/Minsk', 'Europe/Minsk'), ('Europe/Monaco', 'Europe/Monaco'), ('Europe/Moscow', 'Europe/Moscow'), ('Europe/Nicosia', 'Europe/Nicosia'), ('Europe/Oslo', 'Europe/Oslo'), ('Europe/Paris', 'Europe/Paris'), ('Europe/Podgorica', 'Europe/Podgorica'), ('Europe/Prague', 'Europe/Prague'), ('Europe/Riga', 'Europe/Riga'), ('Europe/Rome', 'Europe/Rome'), ('Europe/Samara', 'Europe/Samara'), ('Europe/San_Marino', 'Europe/San_Marino'), ('Europe/Sarajevo', 'Europe/Sarajevo'), ('Europe/Saratov', 'Europe/Saratov'), ('Europe/Simferopol', 'Europe/Simferopol'), ('Europe/Skopje', 'Europe/Skopje'), ('Europe/Sofia', 'Europe/Sofia'), ('Europe/Stockholm', 'Europe/Stockholm'), ('Europe/Tallinn', 'Europe/Tallinn'), ('Europe/Tirane', 'Europe/Tirane'), ('Europe/Tiraspol', 'Europe/Tiraspol'), ('Europe/Ulyanovsk', 'Europe/Ulyanovsk'), ('Europe/Uzhgorod', 'Europe/Uzhgorod'), ('Europe/Vaduz', 'Europe/Vaduz'), ('Europe/Vatican', 'Europe/Vatican'), ('Europe/Vienna', 'Europe/Vienna'), ('Europe/Vilnius', 'Europe/Vilnius'), ('Europe/Volgograd', 'Europe/Volgograd'), ('Europe/Warsaw', 'Europe/Warsaw'), ('Europe/Zagreb', 'Europe/Zagreb'), ('Europe/Zaporozhye', 'Europe/Zaporozhye'), ('Europe/Zurich', 'Europe/Zurich'), ('Factory', 'Factory'), ('GB', 'GB'), ('GB-Eire', 'GB-Eire'), ('GMT', 'GMT'), ('GMT+0', 'GMT+0'), ('GMT-0', 'GMT-0'), ('GMT0', 'GMT0'), ('Greenwich', 'Greenwich'), ('HST', 'HST'), ('Hongkong', 'Hongkong'), ('Iceland', 'Iceland'), ('Indian/Antananarivo', 'Indian/Antananarivo'), ('Indian/Chagos', 'Indian/Chagos'), ('Indian/Christmas', 'Indian/Christmas'), ('Indian/Cocos', 'Indian/Cocos'), ('Indian/Comoro', 'Indian/Comoro'), ('Indian/Kerguelen', 'Indian/Kerguelen'), ('Indian/Mahe', 'Indian/Mahe'), ('Indian/Maldives', 'Indian/Maldives'), ('Indian/Mauritius', 'Indian/Mauritius'), ('Indian/Mayotte', 'Indian/Mayotte'), ('Indian/Reunion', 'Indian/Reunion'), ('Iran', 'Iran'), ('Israel', 'Israel'), ('Jamaica', 'Jamaica'), ('Japan', 'Japan'), ('Kwajalein', 'Kwajalein'), ('Libya', 'Libya'), ('MET', 'MET'), ('MST', 'MST'), ('MST7MDT', 'MST7MDT'), ('Mexico/BajaNorte', 'Mexico/BajaNorte'), ('Mexico/BajaSur', 'Mexico/BajaSur'), ('Mexico/General', 'Mexico/General'), ('NZ', 'NZ'), ('NZ-CHAT', 'NZ-CHAT'), ('Navajo', 'Navajo'), ('PRC', 'PRC'), ('PST8PDT', 'PST8PDT'), ('Pacific/Apia', 'Pacific/Apia'), ('Pacific/Auckland', 'Pacific/Auckland'), ('Pacific/Bougainville', 'Pacific/Bougainville'), ('Pacific/Chatham', 'Pacific/Chatham'), ('Pacific/Chuuk', 'Pacific/Chuuk'), ('Pacific/Easter', 'Pacific/Easter'), ('Pacific/Efate', 'Pacific/Efate'), ('Pacific/Enderbury', 'Pacific/Enderbury'), ('Pacific/Fakaofo', 'Pacific/Fakaofo'), ('Pacific/Fiji', 'Pacific/Fiji'), ('Pacific/Funafuti', 'Pacific/Funafuti'), ('Pacific/Galapagos', 'Pacific/Galapagos'), ('Pacific/Gambier', 'Pacific/Gambier'), ('Pacific/Guadalcanal', 'Pacific/Guadalcanal'), ('Pacific/Guam', 'Pacific/Guam'), ('Pacific/Honolulu', 'Pacific/Honolulu'), ('Pacific/Johnston', 'Pacific/Johnston'), ('Pacific/Kanton', 'Pacific/Kanton'), ('Pacific/Kiritimati', 'Pacific/Kiritimati'), ('Pacific/Kosrae', 'Pacific/Kosrae'), ('Pacific/Kwajalein', 'Pacific/Kwajalein'), ('Pacific/Majuro', 'Pacific/Majuro'), ('Pacific/Marquesas', 'Pacific/Marquesas'), ('Pacific/Midway', 'Pacific/Midway'), ('Pacific/Nauru', 'Pacific/Nauru'), ('Pacific/Niue', 'Pacific/Niue'), ('Pacific/Norfolk', 'Pacific/Norfolk'), ('Pacific/Noumea', 'Pacific/Noumea'), ('Pacific/Pago_Pago', 'Pacific/Pago_Pago'), ('Pacific/Palau', 'Pacific/Palau'), ('Pacific/Pitcairn', 'Pacific/Pitcairn'), ('Pacific/Pohnpei', 'Pacific/Pohnpei'), ('Pacific/Ponape', 'Pacific/Ponape'), ('Pacific/Port_Moresby', 'Pacific/Port_Moresby'), ('Pacific/Rarotonga', 'Pacific/Rarotonga'), ('Pacific/Saipan', 'Pacific/Saipan'), ('Pacific/Samoa', 'Pacific/Samoa'), ('Pacific/Tahiti', 'Pacific/Tahiti'), ('Pacific/Tarawa', 'Pacific/Tarawa'), ('Pacific/Tongatapu', 'Pacific/Tongatapu'), ('Pacific/Truk', 'Pacific/Truk'), ('Pacific/Wake', 'Pacific/Wake'), ('Pacific/Wallis', 'Pacific/Wallis'), ('Pacific/Yap', 'Pacific/Yap'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('ROC', 'ROC'), ('ROK', 'ROK'), ('Singapore', 'Singapore'), ('Turkey', 'Turkey'), ('UCT', 'UCT'), ('US/Alaska', 'US/Alaska'), ('US/Aleutian', 'US/Aleutian'), ('US/Arizona', 'US/Arizona'), ('US/Central', 'US/Central'), ('US/East-Indiana', 'US/East-Indiana'), ('US/Eastern', 'US/Eastern'), ('US/Hawaii', 'US/Hawaii'), ('US/Indiana-Starke', 'US/Indiana-Starke'), ('US/Michigan', 'US/Michigan'), ('US/Mountain', 'US/Mountain'), ('US/Pacific', 'US/Pacific'), ('US/Samoa', 'US/Samoa'), ('UTC', 'UTC'), ('Universal', 'Universal'), ('W-SU', 'W-SU'), ('WET', 'WET'), ('Zulu', 'Zulu'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/station/models/#station.models.User","title":"<code>User = get_user_model()</code>  <code>module-attribute</code>","text":""},{"location":"reference/station/models/#station.models-classes","title":"Classes","text":""},{"location":"reference/station/models/#station.models.Basin","title":"<code>Basin</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>River(s) basin where the station is located e.g. El Carmen.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the basin, e.g. El Carmen.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the basin.</p> <code>file</code> <code>FileField</code> <p>PDF file with details of the basin.</p>"},{"location":"reference/station/models/#station.models.Basin-functions","title":"Functions","text":""},{"location":"reference/station/models/#station.models.Basin.__str__","title":"<code>__str__()</code>","text":"<p>Return the basin name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the basin name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/models/#station.models.Basin.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the basin.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the basin.\"\"\"\n    return reverse(\"station:basin_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/models/#station.models.Country","title":"<code>Country</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>The country where a station or region is in.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Country name.</p>"},{"location":"reference/station/models/#station.models.Country-functions","title":"Functions","text":""},{"location":"reference/station/models/#station.models.Country.__str__","title":"<code>__str__()</code>","text":"<p>Return the country name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the country name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/models/#station.models.Country.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the country.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the country.\"\"\"\n    return reverse(\"station:country_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/models/#station.models.Ecosystem","title":"<code>Ecosystem</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>The ecosystem associated with a station.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the ecosystem, e.g. rain forest.</p>"},{"location":"reference/station/models/#station.models.Ecosystem-functions","title":"Functions","text":""},{"location":"reference/station/models/#station.models.Ecosystem.__str__","title":"<code>__str__()</code>","text":"<p>Return the ecosystem name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the ecosystem name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/models/#station.models.Ecosystem.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the ecosystem.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the ecosystem.\"\"\"\n    return reverse(\"station:ecosystem_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/models/#station.models.Institution","title":"<code>Institution</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Institutional partner responsible for a station.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the institution.</p>"},{"location":"reference/station/models/#station.models.Institution-functions","title":"Functions","text":""},{"location":"reference/station/models/#station.models.Institution.__str__","title":"<code>__str__()</code>","text":"<p>Return the institution name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the institution name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/models/#station.models.Institution.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the institution.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the institution.\"\"\"\n    return reverse(\"station:institution_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/models/#station.models.PermissionsBase","title":"<code>PermissionsBase</code>","text":"<p>               Bases: <code>Model</code></p> <p>Base model for models that require permissions.</p>"},{"location":"reference/station/models/#station.models.PermissionsBase-functions","title":"Functions","text":""},{"location":"reference/station/models/#station.models.PermissionsBase.set_model_permissions","title":"<code>set_model_permissions()</code>  <code>classmethod</code>","text":"<p>Set model-level add permissions.</p> Source code in <code>management/models.py</code> <pre><code>@classmethod\ndef set_model_permissions(cls):\n    \"\"\"Set model-level add permissions.\"\"\"\n    apply_add_permissions_to_standard_group(cls)\n</code></pre>"},{"location":"reference/station/models/#station.models.PermissionsBase.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level delete, change and view permissions.</p> Source code in <code>management/models.py</code> <pre><code>def set_object_permissions(self):\n    \"\"\"Set object-level delete, change and view permissions.\"\"\"\n    delete, change, view, add = _get_perm_codenames(self.__class__)\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # View permissions based on permissions level\n    if self.visibility in [\"public\", \"internal\"]:\n        assign_perm(view, standard_group, self)\n        assign_perm(view, anonymous_user, self)\n        if self.owner:\n            remove_perm(view, self.owner, self)\n    elif self.visibility == \"private\" and self.owner:\n        remove_perm(view, standard_group, self)\n        remove_perm(view, anonymous_user, self)\n        if self.owner:\n            assign_perm(view, self.owner, self)\n\n    # Assign change and delete permissions for owner\n    for perm in [change, delete]:\n        remove_perm(perm, standard_group, self)\n        remove_perm(perm, anonymous_user, self)\n        if self.owner:\n            assign_perm(perm, self.owner, self)\n</code></pre>"},{"location":"reference/station/models/#station.models.Place","title":"<code>Place</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Specific place that a station is situated.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the place, e.g. Huaraz.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the location.</p>"},{"location":"reference/station/models/#station.models.Place-functions","title":"Functions","text":""},{"location":"reference/station/models/#station.models.Place.__str__","title":"<code>__str__()</code>","text":"<p>Return the place name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the place name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/models/#station.models.Place.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the place.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the place.\"\"\"\n    return reverse(\"station:place_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/models/#station.models.PlaceBasin","title":"<code>PlaceBasin</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Associates a Basin with a Place and an image.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>place</code> <code>Place</code> <p>Place of the association.</p> <code>basin</code> <code>Basin</code> <p>Basin of the association.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the place within the basin.</p>"},{"location":"reference/station/models/#station.models.PlaceBasin-functions","title":"Functions","text":""},{"location":"reference/station/models/#station.models.PlaceBasin.__str__","title":"<code>__str__()</code>","text":"<p>Return the place-basin association.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the place-basin association.\"\"\"\n    return str(self.place) + \" - \" + str(self.basin)\n</code></pre>"},{"location":"reference/station/models/#station.models.PlaceBasin.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the place-basin association.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the place-basin association.\"\"\"\n    return reverse(\"station:placebasin_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/models/#station.models.Region","title":"<code>Region</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A region within a country.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the region.</p> <code>country</code> <code>Country</code> <p>Country where the region is located.</p>"},{"location":"reference/station/models/#station.models.Region-functions","title":"Functions","text":""},{"location":"reference/station/models/#station.models.Region.__str__","title":"<code>__str__()</code>","text":"<p>Return the region name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the region name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/models/#station.models.Region.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the region.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the region.\"\"\"\n    return reverse(\"station:region_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/models/#station.models.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/station/models/#station.models.Station-attributes","title":"Attributes","text":""},{"location":"reference/station/models/#station.models.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/station/models/#station.models.Station-functions","title":"Functions","text":""},{"location":"reference/station/models/#station.models.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/station/models/#station.models.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/models/#station.models.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/station/models/#station.models.StationType","title":"<code>StationType</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Type of the station, indicating what it measures.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the station type, e.g. pluvometric, hydrological.</p>"},{"location":"reference/station/models/#station.models.StationType-functions","title":"Functions","text":""},{"location":"reference/station/models/#station.models.StationType.__str__","title":"<code>__str__()</code>","text":"<p>Return the station type name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station type name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/models/#station.models.StationType.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station type.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station type.\"\"\"\n    return reverse(\"station:stationtype_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/tables/","title":"tables","text":""},{"location":"reference/station/tables/#station.tables","title":"<code>station.tables</code>","text":""},{"location":"reference/station/tables/#station.tables-classes","title":"Classes","text":""},{"location":"reference/station/tables/#station.tables.Basin","title":"<code>Basin</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>River(s) basin where the station is located e.g. El Carmen.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the basin, e.g. El Carmen.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the basin.</p> <code>file</code> <code>FileField</code> <p>PDF file with details of the basin.</p>"},{"location":"reference/station/tables/#station.tables.Basin-functions","title":"Functions","text":""},{"location":"reference/station/tables/#station.tables.Basin.__str__","title":"<code>__str__()</code>","text":"<p>Return the basin name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the basin name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/tables/#station.tables.Basin.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the basin.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the basin.\"\"\"\n    return reverse(\"station:basin_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/tables/#station.tables.BasinTable","title":"<code>BasinTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/tables/#station.tables.Country","title":"<code>Country</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>The country where a station or region is in.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Country name.</p>"},{"location":"reference/station/tables/#station.tables.Country-functions","title":"Functions","text":""},{"location":"reference/station/tables/#station.tables.Country.__str__","title":"<code>__str__()</code>","text":"<p>Return the country name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the country name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/tables/#station.tables.Country.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the country.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the country.\"\"\"\n    return reverse(\"station:country_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/tables/#station.tables.CountryTable","title":"<code>CountryTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/tables/#station.tables.Ecosystem","title":"<code>Ecosystem</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>The ecosystem associated with a station.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the ecosystem, e.g. rain forest.</p>"},{"location":"reference/station/tables/#station.tables.Ecosystem-functions","title":"Functions","text":""},{"location":"reference/station/tables/#station.tables.Ecosystem.__str__","title":"<code>__str__()</code>","text":"<p>Return the ecosystem name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the ecosystem name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/tables/#station.tables.Ecosystem.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the ecosystem.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the ecosystem.\"\"\"\n    return reverse(\"station:ecosystem_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/tables/#station.tables.EcosystemTable","title":"<code>EcosystemTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/tables/#station.tables.Institution","title":"<code>Institution</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Institutional partner responsible for a station.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the institution.</p>"},{"location":"reference/station/tables/#station.tables.Institution-functions","title":"Functions","text":""},{"location":"reference/station/tables/#station.tables.Institution.__str__","title":"<code>__str__()</code>","text":"<p>Return the institution name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the institution name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/tables/#station.tables.Institution.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the institution.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the institution.\"\"\"\n    return reverse(\"station:institution_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/tables/#station.tables.InstitutionTable","title":"<code>InstitutionTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/tables/#station.tables.Place","title":"<code>Place</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Specific place that a station is situated.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the place, e.g. Huaraz.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the location.</p>"},{"location":"reference/station/tables/#station.tables.Place-functions","title":"Functions","text":""},{"location":"reference/station/tables/#station.tables.Place.__str__","title":"<code>__str__()</code>","text":"<p>Return the place name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the place name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/tables/#station.tables.Place.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the place.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the place.\"\"\"\n    return reverse(\"station:place_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/tables/#station.tables.PlaceBasin","title":"<code>PlaceBasin</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Associates a Basin with a Place and an image.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>place</code> <code>Place</code> <p>Place of the association.</p> <code>basin</code> <code>Basin</code> <p>Basin of the association.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the place within the basin.</p>"},{"location":"reference/station/tables/#station.tables.PlaceBasin-functions","title":"Functions","text":""},{"location":"reference/station/tables/#station.tables.PlaceBasin.__str__","title":"<code>__str__()</code>","text":"<p>Return the place-basin association.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the place-basin association.\"\"\"\n    return str(self.place) + \" - \" + str(self.basin)\n</code></pre>"},{"location":"reference/station/tables/#station.tables.PlaceBasin.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the place-basin association.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the place-basin association.\"\"\"\n    return reverse(\"station:placebasin_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/tables/#station.tables.PlaceBasinTable","title":"<code>PlaceBasinTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/tables/#station.tables.PlaceTable","title":"<code>PlaceTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/tables/#station.tables.Region","title":"<code>Region</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A region within a country.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the region.</p> <code>country</code> <code>Country</code> <p>Country where the region is located.</p>"},{"location":"reference/station/tables/#station.tables.Region-functions","title":"Functions","text":""},{"location":"reference/station/tables/#station.tables.Region.__str__","title":"<code>__str__()</code>","text":"<p>Return the region name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the region name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/tables/#station.tables.Region.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the region.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the region.\"\"\"\n    return reverse(\"station:region_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/tables/#station.tables.RegionTable","title":"<code>RegionTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/tables/#station.tables.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/station/tables/#station.tables.Station-attributes","title":"Attributes","text":""},{"location":"reference/station/tables/#station.tables.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/station/tables/#station.tables.Station-functions","title":"Functions","text":""},{"location":"reference/station/tables/#station.tables.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/station/tables/#station.tables.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/tables/#station.tables.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/station/tables/#station.tables.StationTable","title":"<code>StationTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/tables/#station.tables.StationType","title":"<code>StationType</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Type of the station, indicating what it measures.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the station type, e.g. pluvometric, hydrological.</p>"},{"location":"reference/station/tables/#station.tables.StationType-functions","title":"Functions","text":""},{"location":"reference/station/tables/#station.tables.StationType.__str__","title":"<code>__str__()</code>","text":"<p>Return the station type name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station type name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/tables/#station.tables.StationType.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station type.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station type.\"\"\"\n    return reverse(\"station:stationtype_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/tables/#station.tables.StationTypeTable","title":"<code>StationTypeTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/timezones/","title":"timezones","text":""},{"location":"reference/station/timezones/#station.timezones","title":"<code>station.timezones</code>","text":"<p>Provide a frozen set of timezones.</p> <p>The result of the command:</p> <pre><code>&gt;&gt;&gt; import zoneinfo\n&gt;&gt;&gt; tuple([(val, val) for val in sorted(zoneinfo.available_timezones())])\n</code></pre>"},{"location":"reference/station/timezones/#station.timezones-attributes","title":"Attributes","text":""},{"location":"reference/station/timezones/#station.timezones.TIMEZONES","title":"<code>TIMEZONES = (('Africa/Abidjan', 'Africa/Abidjan'), ('Africa/Accra', 'Africa/Accra'), ('Africa/Addis_Ababa', 'Africa/Addis_Ababa'), ('Africa/Algiers', 'Africa/Algiers'), ('Africa/Asmara', 'Africa/Asmara'), ('Africa/Asmera', 'Africa/Asmera'), ('Africa/Bamako', 'Africa/Bamako'), ('Africa/Bangui', 'Africa/Bangui'), ('Africa/Banjul', 'Africa/Banjul'), ('Africa/Bissau', 'Africa/Bissau'), ('Africa/Blantyre', 'Africa/Blantyre'), ('Africa/Brazzaville', 'Africa/Brazzaville'), ('Africa/Bujumbura', 'Africa/Bujumbura'), ('Africa/Cairo', 'Africa/Cairo'), ('Africa/Casablanca', 'Africa/Casablanca'), ('Africa/Ceuta', 'Africa/Ceuta'), ('Africa/Conakry', 'Africa/Conakry'), ('Africa/Dakar', 'Africa/Dakar'), ('Africa/Dar_es_Salaam', 'Africa/Dar_es_Salaam'), ('Africa/Djibouti', 'Africa/Djibouti'), ('Africa/Douala', 'Africa/Douala'), ('Africa/El_Aaiun', 'Africa/El_Aaiun'), ('Africa/Freetown', 'Africa/Freetown'), ('Africa/Gaborone', 'Africa/Gaborone'), ('Africa/Harare', 'Africa/Harare'), ('Africa/Johannesburg', 'Africa/Johannesburg'), ('Africa/Juba', 'Africa/Juba'), ('Africa/Kampala', 'Africa/Kampala'), ('Africa/Khartoum', 'Africa/Khartoum'), ('Africa/Kigali', 'Africa/Kigali'), ('Africa/Kinshasa', 'Africa/Kinshasa'), ('Africa/Lagos', 'Africa/Lagos'), ('Africa/Libreville', 'Africa/Libreville'), ('Africa/Lome', 'Africa/Lome'), ('Africa/Luanda', 'Africa/Luanda'), ('Africa/Lubumbashi', 'Africa/Lubumbashi'), ('Africa/Lusaka', 'Africa/Lusaka'), ('Africa/Malabo', 'Africa/Malabo'), ('Africa/Maputo', 'Africa/Maputo'), ('Africa/Maseru', 'Africa/Maseru'), ('Africa/Mbabane', 'Africa/Mbabane'), ('Africa/Mogadishu', 'Africa/Mogadishu'), ('Africa/Monrovia', 'Africa/Monrovia'), ('Africa/Nairobi', 'Africa/Nairobi'), ('Africa/Ndjamena', 'Africa/Ndjamena'), ('Africa/Niamey', 'Africa/Niamey'), ('Africa/Nouakchott', 'Africa/Nouakchott'), ('Africa/Ouagadougou', 'Africa/Ouagadougou'), ('Africa/Porto-Novo', 'Africa/Porto-Novo'), ('Africa/Sao_Tome', 'Africa/Sao_Tome'), ('Africa/Timbuktu', 'Africa/Timbuktu'), ('Africa/Tripoli', 'Africa/Tripoli'), ('Africa/Tunis', 'Africa/Tunis'), ('Africa/Windhoek', 'Africa/Windhoek'), ('America/Adak', 'America/Adak'), ('America/Anchorage', 'America/Anchorage'), ('America/Anguilla', 'America/Anguilla'), ('America/Antigua', 'America/Antigua'), ('America/Araguaina', 'America/Araguaina'), ('America/Argentina/Buenos_Aires', 'America/Argentina/Buenos_Aires'), ('America/Argentina/Catamarca', 'America/Argentina/Catamarca'), ('America/Argentina/ComodRivadavia', 'America/Argentina/ComodRivadavia'), ('America/Argentina/Cordoba', 'America/Argentina/Cordoba'), ('America/Argentina/Jujuy', 'America/Argentina/Jujuy'), ('America/Argentina/La_Rioja', 'America/Argentina/La_Rioja'), ('America/Argentina/Mendoza', 'America/Argentina/Mendoza'), ('America/Argentina/Rio_Gallegos', 'America/Argentina/Rio_Gallegos'), ('America/Argentina/Salta', 'America/Argentina/Salta'), ('America/Argentina/San_Juan', 'America/Argentina/San_Juan'), ('America/Argentina/San_Luis', 'America/Argentina/San_Luis'), ('America/Argentina/Tucuman', 'America/Argentina/Tucuman'), ('America/Argentina/Ushuaia', 'America/Argentina/Ushuaia'), ('America/Aruba', 'America/Aruba'), ('America/Asuncion', 'America/Asuncion'), ('America/Atikokan', 'America/Atikokan'), ('America/Atka', 'America/Atka'), ('America/Bahia', 'America/Bahia'), ('America/Bahia_Banderas', 'America/Bahia_Banderas'), ('America/Barbados', 'America/Barbados'), ('America/Belem', 'America/Belem'), ('America/Belize', 'America/Belize'), ('America/Blanc-Sablon', 'America/Blanc-Sablon'), ('America/Boa_Vista', 'America/Boa_Vista'), ('America/Bogota', 'America/Bogota'), ('America/Boise', 'America/Boise'), ('America/Buenos_Aires', 'America/Buenos_Aires'), ('America/Cambridge_Bay', 'America/Cambridge_Bay'), ('America/Campo_Grande', 'America/Campo_Grande'), ('America/Cancun', 'America/Cancun'), ('America/Caracas', 'America/Caracas'), ('America/Catamarca', 'America/Catamarca'), ('America/Cayenne', 'America/Cayenne'), ('America/Cayman', 'America/Cayman'), ('America/Chicago', 'America/Chicago'), ('America/Chihuahua', 'America/Chihuahua'), ('America/Ciudad_Juarez', 'America/Ciudad_Juarez'), ('America/Coral_Harbour', 'America/Coral_Harbour'), ('America/Cordoba', 'America/Cordoba'), ('America/Costa_Rica', 'America/Costa_Rica'), ('America/Creston', 'America/Creston'), ('America/Cuiaba', 'America/Cuiaba'), ('America/Curacao', 'America/Curacao'), ('America/Danmarkshavn', 'America/Danmarkshavn'), ('America/Dawson', 'America/Dawson'), ('America/Dawson_Creek', 'America/Dawson_Creek'), ('America/Denver', 'America/Denver'), ('America/Detroit', 'America/Detroit'), ('America/Dominica', 'America/Dominica'), ('America/Edmonton', 'America/Edmonton'), ('America/Eirunepe', 'America/Eirunepe'), ('America/El_Salvador', 'America/El_Salvador'), ('America/Ensenada', 'America/Ensenada'), ('America/Fort_Nelson', 'America/Fort_Nelson'), ('America/Fort_Wayne', 'America/Fort_Wayne'), ('America/Fortaleza', 'America/Fortaleza'), ('America/Glace_Bay', 'America/Glace_Bay'), ('America/Godthab', 'America/Godthab'), ('America/Goose_Bay', 'America/Goose_Bay'), ('America/Grand_Turk', 'America/Grand_Turk'), ('America/Grenada', 'America/Grenada'), ('America/Guadeloupe', 'America/Guadeloupe'), ('America/Guatemala', 'America/Guatemala'), ('America/Guayaquil', 'America/Guayaquil'), ('America/Guyana', 'America/Guyana'), ('America/Halifax', 'America/Halifax'), ('America/Havana', 'America/Havana'), ('America/Hermosillo', 'America/Hermosillo'), ('America/Indiana/Indianapolis', 'America/Indiana/Indianapolis'), ('America/Indiana/Knox', 'America/Indiana/Knox'), ('America/Indiana/Marengo', 'America/Indiana/Marengo'), ('America/Indiana/Petersburg', 'America/Indiana/Petersburg'), ('America/Indiana/Tell_City', 'America/Indiana/Tell_City'), ('America/Indiana/Vevay', 'America/Indiana/Vevay'), ('America/Indiana/Vincennes', 'America/Indiana/Vincennes'), ('America/Indiana/Winamac', 'America/Indiana/Winamac'), ('America/Indianapolis', 'America/Indianapolis'), ('America/Inuvik', 'America/Inuvik'), ('America/Iqaluit', 'America/Iqaluit'), ('America/Jamaica', 'America/Jamaica'), ('America/Jujuy', 'America/Jujuy'), ('America/Juneau', 'America/Juneau'), ('America/Kentucky/Louisville', 'America/Kentucky/Louisville'), ('America/Kentucky/Monticello', 'America/Kentucky/Monticello'), ('America/Knox_IN', 'America/Knox_IN'), ('America/Kralendijk', 'America/Kralendijk'), ('America/La_Paz', 'America/La_Paz'), ('America/Lima', 'America/Lima'), ('America/Los_Angeles', 'America/Los_Angeles'), ('America/Louisville', 'America/Louisville'), ('America/Lower_Princes', 'America/Lower_Princes'), ('America/Maceio', 'America/Maceio'), ('America/Managua', 'America/Managua'), ('America/Manaus', 'America/Manaus'), ('America/Marigot', 'America/Marigot'), ('America/Martinique', 'America/Martinique'), ('America/Matamoros', 'America/Matamoros'), ('America/Mazatlan', 'America/Mazatlan'), ('America/Mendoza', 'America/Mendoza'), ('America/Menominee', 'America/Menominee'), ('America/Merida', 'America/Merida'), ('America/Metlakatla', 'America/Metlakatla'), ('America/Mexico_City', 'America/Mexico_City'), ('America/Miquelon', 'America/Miquelon'), ('America/Moncton', 'America/Moncton'), ('America/Monterrey', 'America/Monterrey'), ('America/Montevideo', 'America/Montevideo'), ('America/Montreal', 'America/Montreal'), ('America/Montserrat', 'America/Montserrat'), ('America/Nassau', 'America/Nassau'), ('America/New_York', 'America/New_York'), ('America/Nipigon', 'America/Nipigon'), ('America/Nome', 'America/Nome'), ('America/Noronha', 'America/Noronha'), ('America/North_Dakota/Beulah', 'America/North_Dakota/Beulah'), ('America/North_Dakota/Center', 'America/North_Dakota/Center'), ('America/North_Dakota/New_Salem', 'America/North_Dakota/New_Salem'), ('America/Nuuk', 'America/Nuuk'), ('America/Ojinaga', 'America/Ojinaga'), ('America/Panama', 'America/Panama'), ('America/Pangnirtung', 'America/Pangnirtung'), ('America/Paramaribo', 'America/Paramaribo'), ('America/Phoenix', 'America/Phoenix'), ('America/Port-au-Prince', 'America/Port-au-Prince'), ('America/Port_of_Spain', 'America/Port_of_Spain'), ('America/Porto_Acre', 'America/Porto_Acre'), ('America/Porto_Velho', 'America/Porto_Velho'), ('America/Puerto_Rico', 'America/Puerto_Rico'), ('America/Punta_Arenas', 'America/Punta_Arenas'), ('America/Rainy_River', 'America/Rainy_River'), ('America/Rankin_Inlet', 'America/Rankin_Inlet'), ('America/Recife', 'America/Recife'), ('America/Regina', 'America/Regina'), ('America/Resolute', 'America/Resolute'), ('America/Rio_Branco', 'America/Rio_Branco'), ('America/Rosario', 'America/Rosario'), ('America/Santa_Isabel', 'America/Santa_Isabel'), ('America/Santarem', 'America/Santarem'), ('America/Santiago', 'America/Santiago'), ('America/Santo_Domingo', 'America/Santo_Domingo'), ('America/Sao_Paulo', 'America/Sao_Paulo'), ('America/Scoresbysund', 'America/Scoresbysund'), ('America/Shiprock', 'America/Shiprock'), ('America/Sitka', 'America/Sitka'), ('America/St_Barthelemy', 'America/St_Barthelemy'), ('America/St_Johns', 'America/St_Johns'), ('America/St_Kitts', 'America/St_Kitts'), ('America/St_Lucia', 'America/St_Lucia'), ('America/St_Thomas', 'America/St_Thomas'), ('America/St_Vincent', 'America/St_Vincent'), ('America/Swift_Current', 'America/Swift_Current'), ('America/Tegucigalpa', 'America/Tegucigalpa'), ('America/Thule', 'America/Thule'), ('America/Thunder_Bay', 'America/Thunder_Bay'), ('America/Tijuana', 'America/Tijuana'), ('America/Toronto', 'America/Toronto'), ('America/Tortola', 'America/Tortola'), ('America/Vancouver', 'America/Vancouver'), ('America/Virgin', 'America/Virgin'), ('America/Whitehorse', 'America/Whitehorse'), ('America/Winnipeg', 'America/Winnipeg'), ('America/Yakutat', 'America/Yakutat'), ('America/Yellowknife', 'America/Yellowknife'), ('Antarctica/Casey', 'Antarctica/Casey'), ('Antarctica/Davis', 'Antarctica/Davis'), ('Antarctica/DumontDUrville', 'Antarctica/DumontDUrville'), ('Antarctica/Macquarie', 'Antarctica/Macquarie'), ('Antarctica/Mawson', 'Antarctica/Mawson'), ('Antarctica/McMurdo', 'Antarctica/McMurdo'), ('Antarctica/Palmer', 'Antarctica/Palmer'), ('Antarctica/Rothera', 'Antarctica/Rothera'), ('Antarctica/South_Pole', 'Antarctica/South_Pole'), ('Antarctica/Syowa', 'Antarctica/Syowa'), ('Antarctica/Troll', 'Antarctica/Troll'), ('Antarctica/Vostok', 'Antarctica/Vostok'), ('Arctic/Longyearbyen', 'Arctic/Longyearbyen'), ('Asia/Aden', 'Asia/Aden'), ('Asia/Almaty', 'Asia/Almaty'), ('Asia/Amman', 'Asia/Amman'), ('Asia/Anadyr', 'Asia/Anadyr'), ('Asia/Aqtau', 'Asia/Aqtau'), ('Asia/Aqtobe', 'Asia/Aqtobe'), ('Asia/Ashgabat', 'Asia/Ashgabat'), ('Asia/Ashkhabad', 'Asia/Ashkhabad'), ('Asia/Atyrau', 'Asia/Atyrau'), ('Asia/Baghdad', 'Asia/Baghdad'), ('Asia/Bahrain', 'Asia/Bahrain'), ('Asia/Baku', 'Asia/Baku'), ('Asia/Bangkok', 'Asia/Bangkok'), ('Asia/Barnaul', 'Asia/Barnaul'), ('Asia/Beirut', 'Asia/Beirut'), ('Asia/Bishkek', 'Asia/Bishkek'), ('Asia/Brunei', 'Asia/Brunei'), ('Asia/Calcutta', 'Asia/Calcutta'), ('Asia/Chita', 'Asia/Chita'), ('Asia/Choibalsan', 'Asia/Choibalsan'), ('Asia/Chongqing', 'Asia/Chongqing'), ('Asia/Chungking', 'Asia/Chungking'), ('Asia/Colombo', 'Asia/Colombo'), ('Asia/Dacca', 'Asia/Dacca'), ('Asia/Damascus', 'Asia/Damascus'), ('Asia/Dhaka', 'Asia/Dhaka'), ('Asia/Dili', 'Asia/Dili'), ('Asia/Dubai', 'Asia/Dubai'), ('Asia/Dushanbe', 'Asia/Dushanbe'), ('Asia/Famagusta', 'Asia/Famagusta'), ('Asia/Gaza', 'Asia/Gaza'), ('Asia/Harbin', 'Asia/Harbin'), ('Asia/Hebron', 'Asia/Hebron'), ('Asia/Ho_Chi_Minh', 'Asia/Ho_Chi_Minh'), ('Asia/Hong_Kong', 'Asia/Hong_Kong'), ('Asia/Hovd', 'Asia/Hovd'), ('Asia/Irkutsk', 'Asia/Irkutsk'), ('Asia/Istanbul', 'Asia/Istanbul'), ('Asia/Jakarta', 'Asia/Jakarta'), ('Asia/Jayapura', 'Asia/Jayapura'), ('Asia/Jerusalem', 'Asia/Jerusalem'), ('Asia/Kabul', 'Asia/Kabul'), ('Asia/Kamchatka', 'Asia/Kamchatka'), ('Asia/Karachi', 'Asia/Karachi'), ('Asia/Kashgar', 'Asia/Kashgar'), ('Asia/Kathmandu', 'Asia/Kathmandu'), ('Asia/Katmandu', 'Asia/Katmandu'), ('Asia/Khandyga', 'Asia/Khandyga'), ('Asia/Kolkata', 'Asia/Kolkata'), ('Asia/Krasnoyarsk', 'Asia/Krasnoyarsk'), ('Asia/Kuala_Lumpur', 'Asia/Kuala_Lumpur'), ('Asia/Kuching', 'Asia/Kuching'), ('Asia/Kuwait', 'Asia/Kuwait'), ('Asia/Macao', 'Asia/Macao'), ('Asia/Macau', 'Asia/Macau'), ('Asia/Magadan', 'Asia/Magadan'), ('Asia/Makassar', 'Asia/Makassar'), ('Asia/Manila', 'Asia/Manila'), ('Asia/Muscat', 'Asia/Muscat'), ('Asia/Nicosia', 'Asia/Nicosia'), ('Asia/Novokuznetsk', 'Asia/Novokuznetsk'), ('Asia/Novosibirsk', 'Asia/Novosibirsk'), ('Asia/Omsk', 'Asia/Omsk'), ('Asia/Oral', 'Asia/Oral'), ('Asia/Phnom_Penh', 'Asia/Phnom_Penh'), ('Asia/Pontianak', 'Asia/Pontianak'), ('Asia/Pyongyang', 'Asia/Pyongyang'), ('Asia/Qatar', 'Asia/Qatar'), ('Asia/Qostanay', 'Asia/Qostanay'), ('Asia/Qyzylorda', 'Asia/Qyzylorda'), ('Asia/Rangoon', 'Asia/Rangoon'), ('Asia/Riyadh', 'Asia/Riyadh'), ('Asia/Saigon', 'Asia/Saigon'), ('Asia/Sakhalin', 'Asia/Sakhalin'), ('Asia/Samarkand', 'Asia/Samarkand'), ('Asia/Seoul', 'Asia/Seoul'), ('Asia/Shanghai', 'Asia/Shanghai'), ('Asia/Singapore', 'Asia/Singapore'), ('Asia/Srednekolymsk', 'Asia/Srednekolymsk'), ('Asia/Taipei', 'Asia/Taipei'), ('Asia/Tashkent', 'Asia/Tashkent'), ('Asia/Tbilisi', 'Asia/Tbilisi'), ('Asia/Tehran', 'Asia/Tehran'), ('Asia/Tel_Aviv', 'Asia/Tel_Aviv'), ('Asia/Thimbu', 'Asia/Thimbu'), ('Asia/Thimphu', 'Asia/Thimphu'), ('Asia/Tokyo', 'Asia/Tokyo'), ('Asia/Tomsk', 'Asia/Tomsk'), ('Asia/Ujung_Pandang', 'Asia/Ujung_Pandang'), ('Asia/Ulaanbaatar', 'Asia/Ulaanbaatar'), ('Asia/Ulan_Bator', 'Asia/Ulan_Bator'), ('Asia/Urumqi', 'Asia/Urumqi'), ('Asia/Ust-Nera', 'Asia/Ust-Nera'), ('Asia/Vientiane', 'Asia/Vientiane'), ('Asia/Vladivostok', 'Asia/Vladivostok'), ('Asia/Yakutsk', 'Asia/Yakutsk'), ('Asia/Yangon', 'Asia/Yangon'), ('Asia/Yekaterinburg', 'Asia/Yekaterinburg'), ('Asia/Yerevan', 'Asia/Yerevan'), ('Atlantic/Azores', 'Atlantic/Azores'), ('Atlantic/Bermuda', 'Atlantic/Bermuda'), ('Atlantic/Canary', 'Atlantic/Canary'), ('Atlantic/Cape_Verde', 'Atlantic/Cape_Verde'), ('Atlantic/Faeroe', 'Atlantic/Faeroe'), ('Atlantic/Faroe', 'Atlantic/Faroe'), ('Atlantic/Jan_Mayen', 'Atlantic/Jan_Mayen'), ('Atlantic/Madeira', 'Atlantic/Madeira'), ('Atlantic/Reykjavik', 'Atlantic/Reykjavik'), ('Atlantic/South_Georgia', 'Atlantic/South_Georgia'), ('Atlantic/St_Helena', 'Atlantic/St_Helena'), ('Atlantic/Stanley', 'Atlantic/Stanley'), ('Australia/ACT', 'Australia/ACT'), ('Australia/Adelaide', 'Australia/Adelaide'), ('Australia/Brisbane', 'Australia/Brisbane'), ('Australia/Broken_Hill', 'Australia/Broken_Hill'), ('Australia/Canberra', 'Australia/Canberra'), ('Australia/Currie', 'Australia/Currie'), ('Australia/Darwin', 'Australia/Darwin'), ('Australia/Eucla', 'Australia/Eucla'), ('Australia/Hobart', 'Australia/Hobart'), ('Australia/LHI', 'Australia/LHI'), ('Australia/Lindeman', 'Australia/Lindeman'), ('Australia/Lord_Howe', 'Australia/Lord_Howe'), ('Australia/Melbourne', 'Australia/Melbourne'), ('Australia/NSW', 'Australia/NSW'), ('Australia/North', 'Australia/North'), ('Australia/Perth', 'Australia/Perth'), ('Australia/Queensland', 'Australia/Queensland'), ('Australia/South', 'Australia/South'), ('Australia/Sydney', 'Australia/Sydney'), ('Australia/Tasmania', 'Australia/Tasmania'), ('Australia/Victoria', 'Australia/Victoria'), ('Australia/West', 'Australia/West'), ('Australia/Yancowinna', 'Australia/Yancowinna'), ('Brazil/Acre', 'Brazil/Acre'), ('Brazil/DeNoronha', 'Brazil/DeNoronha'), ('Brazil/East', 'Brazil/East'), ('Brazil/West', 'Brazil/West'), ('CET', 'CET'), ('CST6CDT', 'CST6CDT'), ('Canada/Atlantic', 'Canada/Atlantic'), ('Canada/Central', 'Canada/Central'), ('Canada/Eastern', 'Canada/Eastern'), ('Canada/Mountain', 'Canada/Mountain'), ('Canada/Newfoundland', 'Canada/Newfoundland'), ('Canada/Pacific', 'Canada/Pacific'), ('Canada/Saskatchewan', 'Canada/Saskatchewan'), ('Canada/Yukon', 'Canada/Yukon'), ('Chile/Continental', 'Chile/Continental'), ('Chile/EasterIsland', 'Chile/EasterIsland'), ('Cuba', 'Cuba'), ('EET', 'EET'), ('EST', 'EST'), ('EST5EDT', 'EST5EDT'), ('Egypt', 'Egypt'), ('Eire', 'Eire'), ('Etc/GMT', 'Etc/GMT'), ('Etc/GMT+0', 'Etc/GMT+0'), ('Etc/GMT+1', 'Etc/GMT+1'), ('Etc/GMT+10', 'Etc/GMT+10'), ('Etc/GMT+11', 'Etc/GMT+11'), ('Etc/GMT+12', 'Etc/GMT+12'), ('Etc/GMT+2', 'Etc/GMT+2'), ('Etc/GMT+3', 'Etc/GMT+3'), ('Etc/GMT+4', 'Etc/GMT+4'), ('Etc/GMT+5', 'Etc/GMT+5'), ('Etc/GMT+6', 'Etc/GMT+6'), ('Etc/GMT+7', 'Etc/GMT+7'), ('Etc/GMT+8', 'Etc/GMT+8'), ('Etc/GMT+9', 'Etc/GMT+9'), ('Etc/GMT-0', 'Etc/GMT-0'), ('Etc/GMT-1', 'Etc/GMT-1'), ('Etc/GMT-10', 'Etc/GMT-10'), ('Etc/GMT-11', 'Etc/GMT-11'), ('Etc/GMT-12', 'Etc/GMT-12'), ('Etc/GMT-13', 'Etc/GMT-13'), ('Etc/GMT-14', 'Etc/GMT-14'), ('Etc/GMT-2', 'Etc/GMT-2'), ('Etc/GMT-3', 'Etc/GMT-3'), ('Etc/GMT-4', 'Etc/GMT-4'), ('Etc/GMT-5', 'Etc/GMT-5'), ('Etc/GMT-6', 'Etc/GMT-6'), ('Etc/GMT-7', 'Etc/GMT-7'), ('Etc/GMT-8', 'Etc/GMT-8'), ('Etc/GMT-9', 'Etc/GMT-9'), ('Etc/GMT0', 'Etc/GMT0'), ('Etc/Greenwich', 'Etc/Greenwich'), ('Etc/UCT', 'Etc/UCT'), ('Etc/UTC', 'Etc/UTC'), ('Etc/Universal', 'Etc/Universal'), ('Etc/Zulu', 'Etc/Zulu'), ('Europe/Amsterdam', 'Europe/Amsterdam'), ('Europe/Andorra', 'Europe/Andorra'), ('Europe/Astrakhan', 'Europe/Astrakhan'), ('Europe/Athens', 'Europe/Athens'), ('Europe/Belfast', 'Europe/Belfast'), ('Europe/Belgrade', 'Europe/Belgrade'), ('Europe/Berlin', 'Europe/Berlin'), ('Europe/Bratislava', 'Europe/Bratislava'), ('Europe/Brussels', 'Europe/Brussels'), ('Europe/Bucharest', 'Europe/Bucharest'), ('Europe/Budapest', 'Europe/Budapest'), ('Europe/Busingen', 'Europe/Busingen'), ('Europe/Chisinau', 'Europe/Chisinau'), ('Europe/Copenhagen', 'Europe/Copenhagen'), ('Europe/Dublin', 'Europe/Dublin'), ('Europe/Gibraltar', 'Europe/Gibraltar'), ('Europe/Guernsey', 'Europe/Guernsey'), ('Europe/Helsinki', 'Europe/Helsinki'), ('Europe/Isle_of_Man', 'Europe/Isle_of_Man'), ('Europe/Istanbul', 'Europe/Istanbul'), ('Europe/Jersey', 'Europe/Jersey'), ('Europe/Kaliningrad', 'Europe/Kaliningrad'), ('Europe/Kiev', 'Europe/Kiev'), ('Europe/Kirov', 'Europe/Kirov'), ('Europe/Kyiv', 'Europe/Kyiv'), ('Europe/Lisbon', 'Europe/Lisbon'), ('Europe/Ljubljana', 'Europe/Ljubljana'), ('Europe/London', 'Europe/London'), ('Europe/Luxembourg', 'Europe/Luxembourg'), ('Europe/Madrid', 'Europe/Madrid'), ('Europe/Malta', 'Europe/Malta'), ('Europe/Mariehamn', 'Europe/Mariehamn'), ('Europe/Minsk', 'Europe/Minsk'), ('Europe/Monaco', 'Europe/Monaco'), ('Europe/Moscow', 'Europe/Moscow'), ('Europe/Nicosia', 'Europe/Nicosia'), ('Europe/Oslo', 'Europe/Oslo'), ('Europe/Paris', 'Europe/Paris'), ('Europe/Podgorica', 'Europe/Podgorica'), ('Europe/Prague', 'Europe/Prague'), ('Europe/Riga', 'Europe/Riga'), ('Europe/Rome', 'Europe/Rome'), ('Europe/Samara', 'Europe/Samara'), ('Europe/San_Marino', 'Europe/San_Marino'), ('Europe/Sarajevo', 'Europe/Sarajevo'), ('Europe/Saratov', 'Europe/Saratov'), ('Europe/Simferopol', 'Europe/Simferopol'), ('Europe/Skopje', 'Europe/Skopje'), ('Europe/Sofia', 'Europe/Sofia'), ('Europe/Stockholm', 'Europe/Stockholm'), ('Europe/Tallinn', 'Europe/Tallinn'), ('Europe/Tirane', 'Europe/Tirane'), ('Europe/Tiraspol', 'Europe/Tiraspol'), ('Europe/Ulyanovsk', 'Europe/Ulyanovsk'), ('Europe/Uzhgorod', 'Europe/Uzhgorod'), ('Europe/Vaduz', 'Europe/Vaduz'), ('Europe/Vatican', 'Europe/Vatican'), ('Europe/Vienna', 'Europe/Vienna'), ('Europe/Vilnius', 'Europe/Vilnius'), ('Europe/Volgograd', 'Europe/Volgograd'), ('Europe/Warsaw', 'Europe/Warsaw'), ('Europe/Zagreb', 'Europe/Zagreb'), ('Europe/Zaporozhye', 'Europe/Zaporozhye'), ('Europe/Zurich', 'Europe/Zurich'), ('Factory', 'Factory'), ('GB', 'GB'), ('GB-Eire', 'GB-Eire'), ('GMT', 'GMT'), ('GMT+0', 'GMT+0'), ('GMT-0', 'GMT-0'), ('GMT0', 'GMT0'), ('Greenwich', 'Greenwich'), ('HST', 'HST'), ('Hongkong', 'Hongkong'), ('Iceland', 'Iceland'), ('Indian/Antananarivo', 'Indian/Antananarivo'), ('Indian/Chagos', 'Indian/Chagos'), ('Indian/Christmas', 'Indian/Christmas'), ('Indian/Cocos', 'Indian/Cocos'), ('Indian/Comoro', 'Indian/Comoro'), ('Indian/Kerguelen', 'Indian/Kerguelen'), ('Indian/Mahe', 'Indian/Mahe'), ('Indian/Maldives', 'Indian/Maldives'), ('Indian/Mauritius', 'Indian/Mauritius'), ('Indian/Mayotte', 'Indian/Mayotte'), ('Indian/Reunion', 'Indian/Reunion'), ('Iran', 'Iran'), ('Israel', 'Israel'), ('Jamaica', 'Jamaica'), ('Japan', 'Japan'), ('Kwajalein', 'Kwajalein'), ('Libya', 'Libya'), ('MET', 'MET'), ('MST', 'MST'), ('MST7MDT', 'MST7MDT'), ('Mexico/BajaNorte', 'Mexico/BajaNorte'), ('Mexico/BajaSur', 'Mexico/BajaSur'), ('Mexico/General', 'Mexico/General'), ('NZ', 'NZ'), ('NZ-CHAT', 'NZ-CHAT'), ('Navajo', 'Navajo'), ('PRC', 'PRC'), ('PST8PDT', 'PST8PDT'), ('Pacific/Apia', 'Pacific/Apia'), ('Pacific/Auckland', 'Pacific/Auckland'), ('Pacific/Bougainville', 'Pacific/Bougainville'), ('Pacific/Chatham', 'Pacific/Chatham'), ('Pacific/Chuuk', 'Pacific/Chuuk'), ('Pacific/Easter', 'Pacific/Easter'), ('Pacific/Efate', 'Pacific/Efate'), ('Pacific/Enderbury', 'Pacific/Enderbury'), ('Pacific/Fakaofo', 'Pacific/Fakaofo'), ('Pacific/Fiji', 'Pacific/Fiji'), ('Pacific/Funafuti', 'Pacific/Funafuti'), ('Pacific/Galapagos', 'Pacific/Galapagos'), ('Pacific/Gambier', 'Pacific/Gambier'), ('Pacific/Guadalcanal', 'Pacific/Guadalcanal'), ('Pacific/Guam', 'Pacific/Guam'), ('Pacific/Honolulu', 'Pacific/Honolulu'), ('Pacific/Johnston', 'Pacific/Johnston'), ('Pacific/Kanton', 'Pacific/Kanton'), ('Pacific/Kiritimati', 'Pacific/Kiritimati'), ('Pacific/Kosrae', 'Pacific/Kosrae'), ('Pacific/Kwajalein', 'Pacific/Kwajalein'), ('Pacific/Majuro', 'Pacific/Majuro'), ('Pacific/Marquesas', 'Pacific/Marquesas'), ('Pacific/Midway', 'Pacific/Midway'), ('Pacific/Nauru', 'Pacific/Nauru'), ('Pacific/Niue', 'Pacific/Niue'), ('Pacific/Norfolk', 'Pacific/Norfolk'), ('Pacific/Noumea', 'Pacific/Noumea'), ('Pacific/Pago_Pago', 'Pacific/Pago_Pago'), ('Pacific/Palau', 'Pacific/Palau'), ('Pacific/Pitcairn', 'Pacific/Pitcairn'), ('Pacific/Pohnpei', 'Pacific/Pohnpei'), ('Pacific/Ponape', 'Pacific/Ponape'), ('Pacific/Port_Moresby', 'Pacific/Port_Moresby'), ('Pacific/Rarotonga', 'Pacific/Rarotonga'), ('Pacific/Saipan', 'Pacific/Saipan'), ('Pacific/Samoa', 'Pacific/Samoa'), ('Pacific/Tahiti', 'Pacific/Tahiti'), ('Pacific/Tarawa', 'Pacific/Tarawa'), ('Pacific/Tongatapu', 'Pacific/Tongatapu'), ('Pacific/Truk', 'Pacific/Truk'), ('Pacific/Wake', 'Pacific/Wake'), ('Pacific/Wallis', 'Pacific/Wallis'), ('Pacific/Yap', 'Pacific/Yap'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('ROC', 'ROC'), ('ROK', 'ROK'), ('Singapore', 'Singapore'), ('Turkey', 'Turkey'), ('UCT', 'UCT'), ('US/Alaska', 'US/Alaska'), ('US/Aleutian', 'US/Aleutian'), ('US/Arizona', 'US/Arizona'), ('US/Central', 'US/Central'), ('US/East-Indiana', 'US/East-Indiana'), ('US/Eastern', 'US/Eastern'), ('US/Hawaii', 'US/Hawaii'), ('US/Indiana-Starke', 'US/Indiana-Starke'), ('US/Michigan', 'US/Michigan'), ('US/Mountain', 'US/Mountain'), ('US/Pacific', 'US/Pacific'), ('US/Samoa', 'US/Samoa'), ('UTC', 'UTC'), ('Universal', 'Universal'), ('W-SU', 'W-SU'), ('WET', 'WET'), ('Zulu', 'Zulu'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/station/urls/","title":"urls","text":""},{"location":"reference/station/urls/#station.urls","title":"<code>station.urls</code>","text":""},{"location":"reference/station/urls/#station.urls-attributes","title":"Attributes","text":""},{"location":"reference/station/urls/#station.urls.app_name","title":"<code>app_name = 'station'</code>  <code>module-attribute</code>","text":""},{"location":"reference/station/urls/#station.urls.urlpatterns","title":"<code>urlpatterns = [path('basin/&lt;int:pk&gt;', BasinDetailView.as_view(), name='basin_detail'), path('country/&lt;int:pk&gt;', CountryDetailView.as_view(), name='country_detail'), path('ecosystem/&lt;int:pk&gt;', EcosystemDetailView.as_view(), name='ecosystem_detail'), path('institution/&lt;int:pk&gt;', InstitutionDetailView.as_view(), name='institution_detail'), path('place/&lt;int:pk&gt;', PlaceDetailView.as_view(), name='place_detail'), path('stationtype/&lt;int:pk&gt;', StationTypeDetailView.as_view(), name='stationtype_detail'), path('region/&lt;int:pk&gt;', RegionDetailView.as_view(), name='region_detail'), path('placebasin/&lt;int:pk&gt;', PlaceBasinDetailView.as_view(), name='placebasin_detail'), path('station/&lt;int:pk&gt;', StationDetailView.as_view(), name='station_detail'), path('basin/create/', BasinCreateView.as_view(), name='basin_create'), path('country/create/', CountryCreateView.as_view(), name='country_create'), path('ecosystem/create/', EcosystemCreateView.as_view(), name='ecosystem_create'), path('institution/create/', InstitutionCreateView.as_view(), name='institution_create'), path('place/create/', PlaceCreateView.as_view(), name='place_create'), path('stationtype/create/', StationTypeCreateView.as_view(), name='stationtype_create'), path('region/create/', RegionCreateView.as_view(), name='region_create'), path('placebasin/create/', PlaceBasinCreateView.as_view(), name='placebasin_create'), path('station/create/', StationCreateView.as_view(), name='station_create'), path('basin/edit/&lt;int:pk&gt;', BasinEditView.as_view(), name='basin_edit'), path('country/edit/&lt;int:pk&gt;', CountryEditView.as_view(), name='country_edit'), path('ecosystem/edit/&lt;int:pk&gt;', EcosystemEditView.as_view(), name='ecosystem_edit'), path('institution/edit/&lt;int:pk&gt;', InstitutionEditView.as_view(), name='institution_edit'), path('place/edit/&lt;int:pk&gt;', PlaceEditView.as_view(), name='place_edit'), path('stationtype/edit/&lt;int:pk&gt;', StationTypeEditView.as_view(), name='stationtype_edit'), path('region/edit/&lt;int:pk&gt;', RegionEditView.as_view(), name='region_edit'), path('placebasin/edit/&lt;int:pk&gt;', PlaceBasinEditView.as_view(), name='placebasin_edit'), path('station/edit/&lt;int:pk&gt;', StationEditView.as_view(), name='station_edit'), path('basin/delete/&lt;int:pk&gt;', BasinDeleteView.as_view(), name='basin_delete'), path('country/delete/&lt;int:pk&gt;', CountryDeleteView.as_view(), name='country_delete'), path('ecosystem/delete/&lt;int:pk&gt;', EcosystemDeleteView.as_view(), name='ecosystem_delete'), path('institution/delete/&lt;int:pk&gt;', InstitutionDeleteView.as_view(), name='institution_delete'), path('place/delete/&lt;int:pk&gt;', PlaceDeleteView.as_view(), name='place_delete'), path('stationtype/delete/&lt;int:pk&gt;', StationTypeDeleteView.as_view(), name='stationtype_delete'), path('region/delete/&lt;int:pk&gt;', RegionDeleteView.as_view(), name='region_delete'), path('placebasin/delete/&lt;int:pk&gt;', PlaceBasinDeleteView.as_view(), name='placebasin_delete'), path('station/delete/&lt;int:pk&gt;', StationDeleteView.as_view(), name='station_delete'), path('basin/', BasinListView.as_view(), name='basin_list'), path('country/', CountryListView.as_view(), name='country_list'), path('ecosystem/', EcosystemListView.as_view(), name='ecosystem_list'), path('institution/', InstitutionListView.as_view(), name='institution_list'), path('place/', PlaceListView.as_view(), name='place_list'), path('stationtype/', StationTypeListView.as_view(), name='stationtype_list'), path('region/', RegionListView.as_view(), name='region_list'), path('placebasin/', PlaceBasinListView.as_view(), name='placebasin_list'), path('station/', StationListView.as_view(), name='station_list')]</code>  <code>module-attribute</code>","text":""},{"location":"reference/station/urls/#station.urls-classes","title":"Classes","text":""},{"location":"reference/station/urls/#station.urls.BasinCreateView","title":"<code>BasinCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a basin.</p>"},{"location":"reference/station/urls/#station.urls.BasinDeleteView","title":"<code>BasinDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a basin.</p>"},{"location":"reference/station/urls/#station.urls.BasinDetailView","title":"<code>BasinDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a basin.</p>"},{"location":"reference/station/urls/#station.urls.BasinEditView","title":"<code>BasinEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a basin.</p>"},{"location":"reference/station/urls/#station.urls.BasinListView","title":"<code>BasinListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of basins.</p>"},{"location":"reference/station/urls/#station.urls.CountryCreateView","title":"<code>CountryCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a country.</p>"},{"location":"reference/station/urls/#station.urls.CountryDeleteView","title":"<code>CountryDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a country.</p>"},{"location":"reference/station/urls/#station.urls.CountryDetailView","title":"<code>CountryDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a country.</p>"},{"location":"reference/station/urls/#station.urls.CountryEditView","title":"<code>CountryEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a country.</p>"},{"location":"reference/station/urls/#station.urls.CountryListView","title":"<code>CountryListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of countries.</p>"},{"location":"reference/station/urls/#station.urls.EcosystemCreateView","title":"<code>EcosystemCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create an ecosystem.</p>"},{"location":"reference/station/urls/#station.urls.EcosystemDeleteView","title":"<code>EcosystemDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete an ecosystem.</p>"},{"location":"reference/station/urls/#station.urls.EcosystemDetailView","title":"<code>EcosystemDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view an ecosystem.</p>"},{"location":"reference/station/urls/#station.urls.EcosystemEditView","title":"<code>EcosystemEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit an ecosystem.</p>"},{"location":"reference/station/urls/#station.urls.EcosystemListView","title":"<code>EcosystemListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of ecosystems.</p>"},{"location":"reference/station/urls/#station.urls.InstitutionCreateView","title":"<code>InstitutionCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create an institution.</p>"},{"location":"reference/station/urls/#station.urls.InstitutionDeleteView","title":"<code>InstitutionDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete an institution.</p>"},{"location":"reference/station/urls/#station.urls.InstitutionDetailView","title":"<code>InstitutionDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view an institution.</p>"},{"location":"reference/station/urls/#station.urls.InstitutionEditView","title":"<code>InstitutionEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit an institution.</p>"},{"location":"reference/station/urls/#station.urls.InstitutionListView","title":"<code>InstitutionListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of institutions.</p>"},{"location":"reference/station/urls/#station.urls.PlaceBasinCreateView","title":"<code>PlaceBasinCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a place basin.</p>"},{"location":"reference/station/urls/#station.urls.PlaceBasinDeleteView","title":"<code>PlaceBasinDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a place basin.</p>"},{"location":"reference/station/urls/#station.urls.PlaceBasinDetailView","title":"<code>PlaceBasinDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a place basin.</p>"},{"location":"reference/station/urls/#station.urls.PlaceBasinEditView","title":"<code>PlaceBasinEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a place basin.</p>"},{"location":"reference/station/urls/#station.urls.PlaceBasinListView","title":"<code>PlaceBasinListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of place basins.</p>"},{"location":"reference/station/urls/#station.urls.PlaceCreateView","title":"<code>PlaceCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a place.</p>"},{"location":"reference/station/urls/#station.urls.PlaceDeleteView","title":"<code>PlaceDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a place.</p>"},{"location":"reference/station/urls/#station.urls.PlaceDetailView","title":"<code>PlaceDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a place.</p>"},{"location":"reference/station/urls/#station.urls.PlaceEditView","title":"<code>PlaceEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a place.</p>"},{"location":"reference/station/urls/#station.urls.PlaceListView","title":"<code>PlaceListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of places.</p>"},{"location":"reference/station/urls/#station.urls.RegionCreateView","title":"<code>RegionCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a region.</p>"},{"location":"reference/station/urls/#station.urls.RegionDeleteView","title":"<code>RegionDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a region.</p>"},{"location":"reference/station/urls/#station.urls.RegionDetailView","title":"<code>RegionDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a region.</p>"},{"location":"reference/station/urls/#station.urls.RegionEditView","title":"<code>RegionEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a region.</p>"},{"location":"reference/station/urls/#station.urls.RegionListView","title":"<code>RegionListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of regions.</p>"},{"location":"reference/station/urls/#station.urls.StationCreateView","title":"<code>StationCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a station.</p>"},{"location":"reference/station/urls/#station.urls.StationDeleteView","title":"<code>StationDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a station.</p>"},{"location":"reference/station/urls/#station.urls.StationDetailView","title":"<code>StationDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a station.</p>"},{"location":"reference/station/urls/#station.urls.StationEditView","title":"<code>StationEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a station.</p>"},{"location":"reference/station/urls/#station.urls.StationListView","title":"<code>StationListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of stations.</p>"},{"location":"reference/station/urls/#station.urls.StationTypeCreateView","title":"<code>StationTypeCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a station type.</p>"},{"location":"reference/station/urls/#station.urls.StationTypeDeleteView","title":"<code>StationTypeDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a station type.</p>"},{"location":"reference/station/urls/#station.urls.StationTypeDetailView","title":"<code>StationTypeDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a station type.</p>"},{"location":"reference/station/urls/#station.urls.StationTypeEditView","title":"<code>StationTypeEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a station type.</p>"},{"location":"reference/station/urls/#station.urls.StationTypeListView","title":"<code>StationTypeListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of station types.</p>"},{"location":"reference/station/views/","title":"views","text":""},{"location":"reference/station/views/#station.views","title":"<code>station.views</code>","text":""},{"location":"reference/station/views/#station.views-classes","title":"Classes","text":""},{"location":"reference/station/views/#station.views.Basin","title":"<code>Basin</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>River(s) basin where the station is located e.g. El Carmen.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the basin, e.g. El Carmen.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the basin.</p> <code>file</code> <code>FileField</code> <p>PDF file with details of the basin.</p>"},{"location":"reference/station/views/#station.views.Basin-functions","title":"Functions","text":""},{"location":"reference/station/views/#station.views.Basin.__str__","title":"<code>__str__()</code>","text":"<p>Return the basin name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the basin name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/views/#station.views.Basin.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the basin.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the basin.\"\"\"\n    return reverse(\"station:basin_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/views/#station.views.BasinCreateView","title":"<code>BasinCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a basin.</p>"},{"location":"reference/station/views/#station.views.BasinDeleteView","title":"<code>BasinDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a basin.</p>"},{"location":"reference/station/views/#station.views.BasinDetailView","title":"<code>BasinDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a basin.</p>"},{"location":"reference/station/views/#station.views.BasinEditView","title":"<code>BasinEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a basin.</p>"},{"location":"reference/station/views/#station.views.BasinListView","title":"<code>BasinListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of basins.</p>"},{"location":"reference/station/views/#station.views.BasinTable","title":"<code>BasinTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/views/#station.views.Country","title":"<code>Country</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>The country where a station or region is in.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Country name.</p>"},{"location":"reference/station/views/#station.views.Country-functions","title":"Functions","text":""},{"location":"reference/station/views/#station.views.Country.__str__","title":"<code>__str__()</code>","text":"<p>Return the country name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the country name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/views/#station.views.Country.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the country.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the country.\"\"\"\n    return reverse(\"station:country_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/views/#station.views.CountryCreateView","title":"<code>CountryCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a country.</p>"},{"location":"reference/station/views/#station.views.CountryDeleteView","title":"<code>CountryDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a country.</p>"},{"location":"reference/station/views/#station.views.CountryDetailView","title":"<code>CountryDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a country.</p>"},{"location":"reference/station/views/#station.views.CountryEditView","title":"<code>CountryEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a country.</p>"},{"location":"reference/station/views/#station.views.CountryListView","title":"<code>CountryListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of countries.</p>"},{"location":"reference/station/views/#station.views.CountryTable","title":"<code>CountryTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/views/#station.views.CustomCreateView","title":"<code>CustomCreateView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>CreateView</code></p> <p>Generic create view.</p> <p>This view is used to create a new model object. The user must have the permission to create the object, otherwise a 403 error is returned.</p> <p>The view includes a form with the object data, and the context includes the title of the view and the URL to the list view.</p> <p>If provided, the <code>foreign_key_fields</code> attribute is used to limit the queryset for foreign key fields.</p> <p>If successful, the view redirects to the detail view of the created object.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>template_name</code> <code>str</code> <p>Template to be used.</p>"},{"location":"reference/station/views/#station.views.CustomCreateView-functions","title":"Functions","text":""},{"location":"reference/station/views/#station.views.CustomCreateView.form_valid","title":"<code>form_valid(form)</code>","text":"<p>Set the owner of the object to the current user.</p> <p>This is done before saving the object to the database.</p> <p>Parameters:</p> Name Type Description Default <code>form</code> <code>ModelForm</code> <p>Form with the object data.</p> required <p>Returns:</p> Name Type Description <code>HttpResponse</code> <code>HttpResponse</code> <p>Redirect to the detail view of the created object.</p> Source code in <code>management/views.py</code> <pre><code>def form_valid(self, form: forms.ModelForm) -&gt; HttpResponse:\n    \"\"\"Set the owner of the object to the current user.\n\n    This is done before saving the object to the database.\n\n    Args:\n        form (forms.ModelForm): Form with the object data.\n\n    Returns:\n        HttpResponse: Redirect to the detail view of the created object.\n    \"\"\"\n    form.instance.owner = self.request.user\n    return super().form_valid(form)\n</code></pre>"},{"location":"reference/station/views/#station.views.CustomCreateView.get_form_kwargs","title":"<code>get_form_kwargs()</code>","text":"<p>Add the user to the form kwargs, so we can filter the options.</p> Source code in <code>management/views.py</code> <pre><code>def get_form_kwargs(self):\n    \"\"\"Add the user to the form kwargs, so we can filter the options.\"\"\"\n    kwargs = super().get_form_kwargs()\n    kwargs[\"user\"] = self.request.user\n    return kwargs\n</code></pre>"},{"location":"reference/station/views/#station.views.CustomDeleteView","title":"<code>CustomDeleteView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>DeleteView</code></p> <p>Generic delete view.</p> <p>This view is used to delete a model object. The user must have the permission to delete the object, otherwise a 403 error is returned. A confirmation page is shown with the related objects that will be deleted.</p> <p>The permissions required to delete the object are <code>app_label.delete_model_name</code>. For example, the permission required to delete a <code>DataImport</code> object would be <code>importing.delete_dataimport</code>.</p> <p>If successful, the view redirects to the list view.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>template_name</code> <code>str</code> <p>Template to be used.</p>"},{"location":"reference/station/views/#station.views.CustomDetailView","title":"<code>CustomDetailView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>DetailView</code></p> <p>Generic detail view.</p> <p>This view is used to show the details of a model object. The user must have the permission to view the object, otherwise a 403 error is returned.</p> <p>The view includes a form with the object data, and the context includes the URLs for the list, delete, and edit views.</p> <p>The permissions required to view the object are <code>app_label.view_model_name</code>. For example, the permission required to view a <code>DataImport</code> object would be <code>importing.view_dataimport</code>.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>template_name</code> <code>str</code> <p>Template to be used.</p> <code>fields</code> <code>str</code> <p>Fields to be shown in the form.</p>"},{"location":"reference/station/views/#station.views.CustomDetailView-functions","title":"Functions","text":""},{"location":"reference/station/views/#station.views.CustomDetailView.get_inline","title":"<code>get_inline()</code>","text":"<p>Return the inline data for the format.</p> <p>If provided, this method should return a dictionary with the inline data to be shown in the detail view. The dictionary should have the following keys:</p> <ul> <li>title: Title of the inline data.</li> <li>header: List with the header of the table.</li> <li>objects: List with the objects to be shown in the table. Each object should be     a list with the same length as the header.</li> </ul> <p>Returns:</p> Type Description <code>dict | None</code> <p>dict | None: Inline data for the format.</p> Source code in <code>management/views.py</code> <pre><code>def get_inline(self) -&gt; dict | None:\n    \"\"\"Return the inline data for the format.\n\n    If provided, this method should return a dictionary with the inline data to be\n    shown in the detail view. The dictionary should have the following keys:\n\n    - title: Title of the inline data.\n    - header: List with the header of the table.\n    - objects: List with the objects to be shown in the table. Each object should be\n        a list with the same length as the header.\n\n    Returns:\n        dict | None: Inline data for the format.\n    \"\"\"\n    return None\n</code></pre>"},{"location":"reference/station/views/#station.views.CustomEditView","title":"<code>CustomEditView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>UpdateView</code></p> <p>Generic edit view.</p> <p>This view is used to edit a model object. The user must have the permission to edit the object, otherwise a 403 error is returned.</p> <p>The view includes a form with the object data, and the context includes the title of the view and the URL to the list view.</p> <p>The permissions required to edit the object are <code>app_label.change_model_name</code>. For example, the permission required to edit a <code>DataImport</code> object would be <code>importing.change_dataimport</code>.</p> <p>If successful or cancelled, the view redirects to the detail view of the created object.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>template_name</code> <code>str</code> <p>Template to be used.</p>"},{"location":"reference/station/views/#station.views.CustomEditView-functions","title":"Functions","text":""},{"location":"reference/station/views/#station.views.CustomEditView.get_form_kwargs","title":"<code>get_form_kwargs()</code>","text":"<p>Add the user to the form kwargs, so we can filter the options.</p> Source code in <code>management/views.py</code> <pre><code>def get_form_kwargs(self):\n    \"\"\"Add the user to the form kwargs, so we can filter the options.\"\"\"\n    kwargs = super().get_form_kwargs()\n    kwargs[\"user\"] = self.request.user\n    return kwargs\n</code></pre>"},{"location":"reference/station/views/#station.views.CustomTableView","title":"<code>CustomTableView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>SingleTableMixin</code>, <code>FilterView</code></p> <p>This view is used to show a list of model objects.</p> <p>The view includes a table with the objects, and the context includes the title of the view, the refresh URL, and the URL to create a new object.</p> <p>The permissions required to view the objects are <code>app_label.view_model_name</code>. For example, the permission required to view a <code>DataImport</code> object would be <code>importing.view_dataimport</code>.</p> <p>If provided, the <code>filter_class</code> attribute is used to create a filter form on top of the table.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>model</code> <code>Model</code> <p>Model to be used.</p> <code>table_class</code> <code>Table</code> <p>Table class to be used.</p> <code>filterset_class</code> <code>FilterSet</code> <p>Filter class to be used. If not provided, the model's default filter is used.</p> <code>template_name</code> <code>str</code> <p>Template to be used.</p> <code>paginate_by</code> <code>int</code> <p>Number of objects per page.</p> <code>show_refresh_btn</code> <code>bool</code> <p>If True, a refresh url is included in the context.</p> <code>show_new_btn</code> <code>bool</code> <p>If True, a create url is included in the context.</p>"},{"location":"reference/station/views/#station.views.CustomTableView-functions","title":"Functions","text":""},{"location":"reference/station/views/#station.views.CustomTableView.get_filterset_class","title":"<code>get_filterset_class()</code>","text":"<p>Return the filter class for the view.</p> <p>If no filter class is provided in the view, the default filter for the model is used. The default filter is created by the <code>FilterSet</code> class, and includes only the 'visibility'.</p> Source code in <code>management/views.py</code> <pre><code>def get_filterset_class(self):\n    \"\"\"Return the filter class for the view.\n\n    If no filter class is provided in the view, the default filter for the model is\n    used. The default filter is created by the `FilterSet` class, and includes only\n    the 'visibility'.\n    \"\"\"\n    if not self.filterset_class:\n\n        class VisbilityFilter(FilterSet):\n            class Meta:\n                model = self.model\n                fields = [\"visibility\"]\n\n        return VisbilityFilter\n\n    return super().get_filterset_class()\n</code></pre>"},{"location":"reference/station/views/#station.views.Ecosystem","title":"<code>Ecosystem</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>The ecosystem associated with a station.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the ecosystem, e.g. rain forest.</p>"},{"location":"reference/station/views/#station.views.Ecosystem-functions","title":"Functions","text":""},{"location":"reference/station/views/#station.views.Ecosystem.__str__","title":"<code>__str__()</code>","text":"<p>Return the ecosystem name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the ecosystem name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/views/#station.views.Ecosystem.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the ecosystem.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the ecosystem.\"\"\"\n    return reverse(\"station:ecosystem_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/views/#station.views.EcosystemCreateView","title":"<code>EcosystemCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create an ecosystem.</p>"},{"location":"reference/station/views/#station.views.EcosystemDeleteView","title":"<code>EcosystemDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete an ecosystem.</p>"},{"location":"reference/station/views/#station.views.EcosystemDetailView","title":"<code>EcosystemDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view an ecosystem.</p>"},{"location":"reference/station/views/#station.views.EcosystemEditView","title":"<code>EcosystemEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit an ecosystem.</p>"},{"location":"reference/station/views/#station.views.EcosystemListView","title":"<code>EcosystemListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of ecosystems.</p>"},{"location":"reference/station/views/#station.views.EcosystemTable","title":"<code>EcosystemTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/views/#station.views.Institution","title":"<code>Institution</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Institutional partner responsible for a station.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the institution.</p>"},{"location":"reference/station/views/#station.views.Institution-functions","title":"Functions","text":""},{"location":"reference/station/views/#station.views.Institution.__str__","title":"<code>__str__()</code>","text":"<p>Return the institution name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the institution name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/views/#station.views.Institution.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the institution.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the institution.\"\"\"\n    return reverse(\"station:institution_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/views/#station.views.InstitutionCreateView","title":"<code>InstitutionCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create an institution.</p>"},{"location":"reference/station/views/#station.views.InstitutionDeleteView","title":"<code>InstitutionDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete an institution.</p>"},{"location":"reference/station/views/#station.views.InstitutionDetailView","title":"<code>InstitutionDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view an institution.</p>"},{"location":"reference/station/views/#station.views.InstitutionEditView","title":"<code>InstitutionEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit an institution.</p>"},{"location":"reference/station/views/#station.views.InstitutionListView","title":"<code>InstitutionListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of institutions.</p>"},{"location":"reference/station/views/#station.views.InstitutionTable","title":"<code>InstitutionTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/views/#station.views.Place","title":"<code>Place</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Specific place that a station is situated.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the place, e.g. Huaraz.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the location.</p>"},{"location":"reference/station/views/#station.views.Place-functions","title":"Functions","text":""},{"location":"reference/station/views/#station.views.Place.__str__","title":"<code>__str__()</code>","text":"<p>Return the place name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the place name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/views/#station.views.Place.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the place.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the place.\"\"\"\n    return reverse(\"station:place_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/views/#station.views.PlaceBasin","title":"<code>PlaceBasin</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Associates a Basin with a Place and an image.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>place</code> <code>Place</code> <p>Place of the association.</p> <code>basin</code> <code>Basin</code> <p>Basin of the association.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the place within the basin.</p>"},{"location":"reference/station/views/#station.views.PlaceBasin-functions","title":"Functions","text":""},{"location":"reference/station/views/#station.views.PlaceBasin.__str__","title":"<code>__str__()</code>","text":"<p>Return the place-basin association.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the place-basin association.\"\"\"\n    return str(self.place) + \" - \" + str(self.basin)\n</code></pre>"},{"location":"reference/station/views/#station.views.PlaceBasin.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the place-basin association.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the place-basin association.\"\"\"\n    return reverse(\"station:placebasin_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/views/#station.views.PlaceBasinCreateView","title":"<code>PlaceBasinCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a place basin.</p>"},{"location":"reference/station/views/#station.views.PlaceBasinDeleteView","title":"<code>PlaceBasinDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a place basin.</p>"},{"location":"reference/station/views/#station.views.PlaceBasinDetailView","title":"<code>PlaceBasinDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a place basin.</p>"},{"location":"reference/station/views/#station.views.PlaceBasinEditView","title":"<code>PlaceBasinEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a place basin.</p>"},{"location":"reference/station/views/#station.views.PlaceBasinFilter","title":"<code>PlaceBasinFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/station/views/#station.views.PlaceBasinListView","title":"<code>PlaceBasinListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of place basins.</p>"},{"location":"reference/station/views/#station.views.PlaceBasinTable","title":"<code>PlaceBasinTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/views/#station.views.PlaceCreateView","title":"<code>PlaceCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a place.</p>"},{"location":"reference/station/views/#station.views.PlaceDeleteView","title":"<code>PlaceDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a place.</p>"},{"location":"reference/station/views/#station.views.PlaceDetailView","title":"<code>PlaceDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a place.</p>"},{"location":"reference/station/views/#station.views.PlaceEditView","title":"<code>PlaceEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a place.</p>"},{"location":"reference/station/views/#station.views.PlaceListView","title":"<code>PlaceListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of places.</p>"},{"location":"reference/station/views/#station.views.PlaceTable","title":"<code>PlaceTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/views/#station.views.Region","title":"<code>Region</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A region within a country.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the region.</p> <code>country</code> <code>Country</code> <p>Country where the region is located.</p>"},{"location":"reference/station/views/#station.views.Region-functions","title":"Functions","text":""},{"location":"reference/station/views/#station.views.Region.__str__","title":"<code>__str__()</code>","text":"<p>Return the region name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the region name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/views/#station.views.Region.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the region.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the region.\"\"\"\n    return reverse(\"station:region_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/views/#station.views.RegionCreateView","title":"<code>RegionCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a region.</p>"},{"location":"reference/station/views/#station.views.RegionDeleteView","title":"<code>RegionDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a region.</p>"},{"location":"reference/station/views/#station.views.RegionDetailView","title":"<code>RegionDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a region.</p>"},{"location":"reference/station/views/#station.views.RegionEditView","title":"<code>RegionEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a region.</p>"},{"location":"reference/station/views/#station.views.RegionFilter","title":"<code>RegionFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/station/views/#station.views.RegionListView","title":"<code>RegionListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of regions.</p>"},{"location":"reference/station/views/#station.views.RegionTable","title":"<code>RegionTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/views/#station.views.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/station/views/#station.views.Station-attributes","title":"Attributes","text":""},{"location":"reference/station/views/#station.views.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/station/views/#station.views.Station-functions","title":"Functions","text":""},{"location":"reference/station/views/#station.views.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/station/views/#station.views.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/views/#station.views.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/station/views/#station.views.StationCreateView","title":"<code>StationCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a station.</p>"},{"location":"reference/station/views/#station.views.StationDeleteView","title":"<code>StationDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a station.</p>"},{"location":"reference/station/views/#station.views.StationDetailView","title":"<code>StationDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a station.</p>"},{"location":"reference/station/views/#station.views.StationEditView","title":"<code>StationEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a station.</p>"},{"location":"reference/station/views/#station.views.StationFilter","title":"<code>StationFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/station/views/#station.views.StationListView","title":"<code>StationListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of stations.</p>"},{"location":"reference/station/views/#station.views.StationTable","title":"<code>StationTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/views/#station.views.StationType","title":"<code>StationType</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Type of the station, indicating what it measures.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the station type, e.g. pluvometric, hydrological.</p>"},{"location":"reference/station/views/#station.views.StationType-functions","title":"Functions","text":""},{"location":"reference/station/views/#station.views.StationType.__str__","title":"<code>__str__()</code>","text":"<p>Return the station type name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station type name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/views/#station.views.StationType.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station type.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station type.\"\"\"\n    return reverse(\"station:stationtype_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/views/#station.views.StationTypeCreateView","title":"<code>StationTypeCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a station type.</p>"},{"location":"reference/station/views/#station.views.StationTypeDeleteView","title":"<code>StationTypeDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a station type.</p>"},{"location":"reference/station/views/#station.views.StationTypeDetailView","title":"<code>StationTypeDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a station type.</p>"},{"location":"reference/station/views/#station.views.StationTypeEditView","title":"<code>StationTypeEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a station type.</p>"},{"location":"reference/station/views/#station.views.StationTypeListView","title":"<code>StationTypeListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of station types.</p>"},{"location":"reference/station/views/#station.views.StationTypeTable","title":"<code>StationTypeTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/station/signals/","title":"signals","text":""},{"location":"reference/station/signals/#station.signals","title":"<code>station.signals</code>","text":""},{"location":"reference/station/signals/handlers/","title":"handlers","text":""},{"location":"reference/station/signals/handlers/#station.signals.handlers","title":"<code>station.signals.handlers</code>","text":""},{"location":"reference/station/signals/handlers/#station.signals.handlers-attributes","title":"Attributes","text":""},{"location":"reference/station/signals/handlers/#station.signals.handlers.User","title":"<code>User = get_user_model()</code>  <code>module-attribute</code>","text":""},{"location":"reference/station/signals/handlers/#station.signals.handlers-classes","title":"Classes","text":""},{"location":"reference/station/signals/handlers/#station.signals.handlers.Basin","title":"<code>Basin</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>River(s) basin where the station is located e.g. El Carmen.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the basin, e.g. El Carmen.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the basin.</p> <code>file</code> <code>FileField</code> <p>PDF file with details of the basin.</p>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Basin-functions","title":"Functions","text":""},{"location":"reference/station/signals/handlers/#station.signals.handlers.Basin.__str__","title":"<code>__str__()</code>","text":"<p>Return the basin name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the basin name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Basin.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the basin.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the basin.\"\"\"\n    return reverse(\"station:basin_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Country","title":"<code>Country</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>The country where a station or region is in.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Country name.</p>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Country-functions","title":"Functions","text":""},{"location":"reference/station/signals/handlers/#station.signals.handlers.Country.__str__","title":"<code>__str__()</code>","text":"<p>Return the country name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the country name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Country.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the country.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the country.\"\"\"\n    return reverse(\"station:country_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Ecosystem","title":"<code>Ecosystem</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>The ecosystem associated with a station.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the ecosystem, e.g. rain forest.</p>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Ecosystem-functions","title":"Functions","text":""},{"location":"reference/station/signals/handlers/#station.signals.handlers.Ecosystem.__str__","title":"<code>__str__()</code>","text":"<p>Return the ecosystem name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the ecosystem name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Ecosystem.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the ecosystem.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the ecosystem.\"\"\"\n    return reverse(\"station:ecosystem_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Institution","title":"<code>Institution</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Institutional partner responsible for a station.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the institution.</p>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Institution-functions","title":"Functions","text":""},{"location":"reference/station/signals/handlers/#station.signals.handlers.Institution.__str__","title":"<code>__str__()</code>","text":"<p>Return the institution name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the institution name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Institution.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the institution.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the institution.\"\"\"\n    return reverse(\"station:institution_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Place","title":"<code>Place</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Specific place that a station is situated.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the place, e.g. Huaraz.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the location.</p>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Place-functions","title":"Functions","text":""},{"location":"reference/station/signals/handlers/#station.signals.handlers.Place.__str__","title":"<code>__str__()</code>","text":"<p>Return the place name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the place name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Place.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the place.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the place.\"\"\"\n    return reverse(\"station:place_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.PlaceBasin","title":"<code>PlaceBasin</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Associates a Basin with a Place and an image.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>place</code> <code>Place</code> <p>Place of the association.</p> <code>basin</code> <code>Basin</code> <p>Basin of the association.</p> <code>image</code> <code>ImageField</code> <p>Photography/Map of the place within the basin.</p>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.PlaceBasin-functions","title":"Functions","text":""},{"location":"reference/station/signals/handlers/#station.signals.handlers.PlaceBasin.__str__","title":"<code>__str__()</code>","text":"<p>Return the place-basin association.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the place-basin association.\"\"\"\n    return str(self.place) + \" - \" + str(self.basin)\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.PlaceBasin.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the place-basin association.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the place-basin association.\"\"\"\n    return reverse(\"station:placebasin_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Region","title":"<code>Region</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A region within a country.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the region.</p> <code>country</code> <code>Country</code> <p>Country where the region is located.</p>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Region-functions","title":"Functions","text":""},{"location":"reference/station/signals/handlers/#station.signals.handlers.Region.__str__","title":"<code>__str__()</code>","text":"<p>Return the region name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the region name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Region.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the region.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the region.\"\"\"\n    return reverse(\"station:region_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Station-attributes","title":"Attributes","text":""},{"location":"reference/station/signals/handlers/#station.signals.handlers.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Station-functions","title":"Functions","text":""},{"location":"reference/station/signals/handlers/#station.signals.handlers.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.StationType","title":"<code>StationType</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Type of the station, indicating what it measures.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key.</p> <code>name</code> <code>str</code> <p>Name of the station type, e.g. pluvometric, hydrological.</p>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.StationType-functions","title":"Functions","text":""},{"location":"reference/station/signals/handlers/#station.signals.handlers.StationType.__str__","title":"<code>__str__()</code>","text":"<p>Return the station type name.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station type name.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.StationType.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station type.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station type.\"\"\"\n    return reverse(\"station:stationtype_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers-functions","title":"Functions","text":""},{"location":"reference/station/signals/handlers/#station.signals.handlers.set_model_permissions","title":"<code>set_model_permissions(sender, **kwargs)</code>","text":"<p>Set model-level permissions.</p> Source code in <code>station/signals/handlers.py</code> <pre><code>@receiver(post_migrate)\ndef set_model_permissions(sender, **kwargs):\n    \"\"\"Set model-level permissions.\"\"\"\n    for model in [\n        Country,\n        Region,\n        Ecosystem,\n        Institution,\n        StationType,\n        Place,\n        Basin,\n        PlaceBasin,\n        Station,\n    ]:\n        model.set_model_permissions()\n</code></pre>"},{"location":"reference/station/signals/handlers/#station.signals.handlers.set_object_permissions","title":"<code>set_object_permissions(sender, instance, **kwargs)</code>","text":"<p>Set object-level permissions.</p> Source code in <code>station/signals/handlers.py</code> <pre><code>@receiver(post_save, sender=Country)\n@receiver(post_save, sender=Region)\n@receiver(post_save, sender=Ecosystem)\n@receiver(post_save, sender=Institution)\n@receiver(post_save, sender=StationType)\n@receiver(post_save, sender=Place)\n@receiver(post_save, sender=Basin)\n@receiver(post_save, sender=PlaceBasin)\n@receiver(post_save, sender=Station)\ndef set_object_permissions(sender, instance, **kwargs):\n    \"\"\"Set object-level permissions.\"\"\"\n    instance.set_object_permissions()\n</code></pre>"},{"location":"reference/utilities/","title":"utilities","text":""},{"location":"reference/utilities/#utilities","title":"<code>utilities</code>","text":""},{"location":"reference/utilities/functions/","title":"functions","text":""},{"location":"reference/utilities/functions/#utilities.functions","title":"<code>utilities.functions</code>","text":""},{"location":"reference/utilities/functions/#utilities.functions-attributes","title":"Attributes","text":""},{"location":"reference/utilities/functions/#utilities.functions.menu_item_divider_html","title":"<code>menu_item_divider_html = '&lt;div class=\"dropdown-divider\"&gt;&lt;/div&gt;'</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/functions/#utilities.functions.menu_item_html","title":"<code>menu_item_html = '&lt;a class=\"dropdown-item\" href=\"{url}\"&gt;{name}&lt;/a&gt;'</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/functions/#utilities.functions.menu_tab_html","title":"<code>menu_tab_html = '\\n&lt;li class=\"nav-item dropdown\"&gt;\\n    &lt;a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarInfoRed\" role=\"button\"\\n    data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"&gt;\\n {tab}\\n    &lt;/a&gt;\\n    &lt;div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"&gt;\\n {items}\\n    &lt;/div&gt;\\n&lt;/li&gt;\\n'</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/functions/#utilities.functions-classes","title":"Classes","text":""},{"location":"reference/utilities/functions/#utilities.functions.objdict","title":"<code>objdict</code>","text":"<p>               Bases: <code>dict</code></p> <p>Dictionary whose content can be manipulated as attributes.</p> <p>NOTE: Might be a better option to do this. Needs deeper analysis. NOTE: To be moved to a separates 'utilities' module.</p>"},{"location":"reference/utilities/functions/#utilities.functions-functions","title":"Functions","text":""},{"location":"reference/utilities/functions/#utilities.functions.dictfetchall","title":"<code>dictfetchall(cursor)</code>","text":"<p>Return all rows from a cursor as a list of dict.</p> <p>TODO: This is used to process low level SQL requests, so chances are it will not be needed once we are done with this. NOTE: To be moved to a separates 'utilities' module.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <code>?</code> <p>?</p> required <p>Returns:</p> Type Description <code>list[dict]</code> <p>List[Dict]: ?</p> Source code in <code>utilities/functions.py</code> <pre><code>def dictfetchall(cursor) -&gt; list[dict]:\n    \"\"\"Return all rows from a cursor as a list of dict.\n\n    TODO: This is used to process low level SQL requests, so chances are it will not be\n    needed once we are done with this.\n    NOTE: To be moved to a separates 'utilities' module.\n\n    Args:\n        cursor (?): ?\n\n    Returns:\n        List[Dict]: ?\n    \"\"\"\n    columns = [col[0] for col in cursor.description]\n    return [dict(zip(columns, row)) for row in cursor.fetchall()]\n</code></pre>"},{"location":"reference/utilities/functions/#utilities.functions.get_menu","title":"<code>get_menu(user)</code>","text":"<p>Generate the user menu in HTML, depending on its permissions.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>The user to generate the menu for.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>An HTML string with the menu items.</p> Source code in <code>utilities/functions.py</code> <pre><code>def get_menu(user: User) -&gt; str:\n    \"\"\"Generate the user menu in HTML, depending on its permissions.\n\n    Args:\n        user (User): The user to generate the menu for.\n\n    Returns:\n        str: An HTML string with the menu items.\n    \"\"\"\n    if user.is_anonymous:  # TODO check this new logic if this function is ever used\n        perms = Permission.objects.filter(Q(user=user) | Q(group__in=user.groups.all()))\n        is_superuser = False\n    else:\n        perms = Permission.objects.filter(Q(user=user) | Q(group__in=user.groups.all()))\n        is_superuser = user.is_superuser\n\n    menu = \"\"\n    for tab in menu_struct():\n        items = \"\"\n        last_is_divider = True\n        i = 0\n\n        for elements in tab.items:\n            if elements.name == \"\":\n                if last_is_divider:\n                    continue\n                items += menu_item_divider_html\n                last_is_divider = True\n                continue\n\n            app, codename = elements.permission.split(\".\")\n            if (\n                perms.filter(content_type__app_label=app, codename=codename).exists()\n                or is_superuser\n            ):\n                try:\n                    url = reverse(elements.url_name)\n                except Exception:\n                    msg = f\"URL '{elements.url_name}' not found when creating menu.\"\n                    getLogger().debug(msg)\n                    continue\n\n                items += menu_item_html.format(url=url, name=elements.name)\n                last_is_divider = False\n                i += 1\n\n        if i &gt; 0:\n            menu += menu_tab_html.format(tab=tab.name, items=items)\n\n    return menu\n</code></pre>"},{"location":"reference/utilities/functions/#utilities.functions.menu_struct","title":"<code>menu_struct(filename=None)</code>  <code>cached</code>","text":"<p>Returns the menu structure.</p> <p>As the function is cached, it will be called only once when the webapp is launched.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Name of the file to load</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Tab]</code> <p>List[Tab]: A list of tabs to include.</p> Source code in <code>utilities/frontend_menu/constants.py</code> <pre><code>@lru_cache\ndef menu_struct(filename: Path | None = None) -&gt; list[Tab]:\n    \"\"\"Returns the menu structure.\n\n    As the function is cached, it will be called only once when the webapp is launched.\n\n    Args:\n        filename (str): Name of the file to load\n\n    Returns:\n        List[Tab]: A list of tabs to include.\n    \"\"\"\n    if filename is None:\n        filename = Path(__file__).parent / \"menu.json\"\n\n    with filename.open(\"r\") as f:\n        struct = json.load(f)\n\n    formatted: list[Tab] = []\n    for tab, details in struct.items():\n        entries: list[Entry] = []\n        for entry in details.get(\"items\", []):\n            entries.append(Entry(**entry))\n        formatted.append(Tab(tab, details.get(\"permission\", \"\"), entries))\n\n    return formatted\n</code></pre>"},{"location":"reference/utilities/functions/#utilities.functions.modelo_a_tabla_html","title":"<code>modelo_a_tabla_html(modelo, col_extra)</code>","text":"<p>Extracts the entries in a query as an HTML table.</p> <p>NOTE: To be moved to a separates 'utilities' module. NOTE: There's no need to do this manually, we should use django-tables2 for             this: https://django-tables2.readthedocs.io/en/latest/</p> <p>Parameters:</p> Name Type Description Default <code>modelo</code> <code>QuerySet</code> <p>Objects to extract as HTML</p> required <code>col_extra</code> <code>bool</code> <p>If an extra column need to be included at the end.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Table in HTML with the contents of a model</p> Source code in <code>utilities/functions.py</code> <pre><code>def modelo_a_tabla_html(modelo: QuerySet, col_extra: bool) -&gt; str:\n    \"\"\"Extracts the entries in a query as an HTML table.\n\n    NOTE: To be moved to a separates 'utilities' module.\n    NOTE: There's no need to do this manually, we should use django-tables2 for\n                this: https://django-tables2.readthedocs.io/en/latest/\n\n    Args:\n        modelo (QuerySet): Objects to extract as HTML\n        col_extra (bool): If an extra column need to be included at the end.\n\n    Returns:\n        str: Table in HTML with the contents of a model\n    \"\"\"\n    html_cola = \"&lt;/td&gt;&lt;/tr&gt;\"\n    if col_extra:\n        html_cola = \"&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\"\n    html = \"\"\n    for row in modelo:\n        html += \"&lt;tr&gt;&lt;td&gt;\" + \"&lt;/td&gt;&lt;td&gt;\".join([str(i or \"\") for i in row]) + html_cola\n    return html\n</code></pre>"},{"location":"reference/utilities/load_initial_data/","title":"load_initial_data","text":""},{"location":"reference/utilities/load_initial_data/#utilities.load_initial_data","title":"<code>utilities.load_initial_data</code>","text":"<p>Script to load initial data into the system such as stations, sensors, format types etc. Currently data is stored in home/data but this will change in the future when home is refactored.</p>"},{"location":"reference/utilities/load_initial_data/#utilities.load_initial_data-attributes","title":"Attributes","text":""},{"location":"reference/utilities/load_initial_data/#utilities.load_initial_data.data_files","title":"<code>data_files = ['management_user', 'variable_unit', 'variable_variable', 'formatting_delimiter', 'formatting_extension', 'formatting_date', 'formatting_time', 'formatting_format', 'formatting_classification', 'sensor_brand', 'sensor_type', 'station_type', 'station_ecosystem', 'station_country', 'station_region', 'station_place', 'station_basin', 'station_placebasin', 'station_institution', 'station_station', 'measurement_airtemperature']</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/load_initial_data/#utilities.load_initial_data-classes","title":"Classes","text":""},{"location":"reference/utilities/load_initial_data/#utilities.load_initial_data.Measurement","title":"<code>Measurement</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Class to store the measurements and their validation status.</p> <p>This class holds the value of a given variable and station at a specific time, as well as auxiliary information such as maximum and minimum values, depth and direction, for vector quantities. All of these have a <code>raw</code> version where a backup of the original data is kept, should this change at any point.</p> <p>Flags to monitor its validation status, if the data is active (and therefore can be used for reporting) and if it has actually been used for that is also included.</p> <p>Attributes:</p> Name Type Description <code>depth</code> <code>int</code> <p>Depth of the measurement.</p> <code>direction</code> <code>Decimal</code> <p>Direction of the measurement, useful for vector quantities.</p> <code>raw_value</code> <code>Decimal</code> <p>Original value of the measurement.</p> <code>raw_maximum</code> <code>Decimal</code> <p>Original maximum value of the measurement.</p> <code>raw_minimum</code> <code>Decimal</code> <p>Original minimum value of the measurement.</p> <code>raw_direction</code> <code>Decimal</code> <p>Original direction of the measurement.</p> <code>raw_depth</code> <code>int</code> <p>Original depth of the measurement.</p> <code>is_validated</code> <code>bool</code> <p>Flag to indicate if the measurement has been validated.</p> <code>is_active</code> <code>bool</code> <p>Flag to indicate if the measurement is active. An inactive measurement is not used for reporting</p>"},{"location":"reference/utilities/load_initial_data/#utilities.load_initial_data.Measurement-attributes","title":"Attributes","text":""},{"location":"reference/utilities/load_initial_data/#utilities.load_initial_data.Measurement.overwritten","title":"<code>overwritten: bool</code>  <code>property</code>","text":"<p>Indicates if any of the values associated to the entry have been overwritten.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if any raw field is different to the corresponding standard field.</p>"},{"location":"reference/utilities/load_initial_data/#utilities.load_initial_data.Measurement.raws","title":"<code>raws: tuple[str, ...]</code>  <code>property</code>","text":"<p>Return the raw fields of the measurement.</p> <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>tuple[str]: Tuple with the names of the raw fields of the measurement.</p>"},{"location":"reference/utilities/load_initial_data/#utilities.load_initial_data.Measurement-functions","title":"Functions","text":""},{"location":"reference/utilities/load_initial_data/#utilities.load_initial_data.Measurement.clean","title":"<code>clean()</code>","text":"<p>Check consistency of validation, reporting and backs-up values.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Check consistency of validation, reporting and backs-up values.\"\"\"\n    # Check consistency of validation\n    if not self.is_validated and not self.is_active:\n        raise ValidationError(\"Only validated entries can be declared as inactive.\")\n\n    # Backup values to raws, if needed\n    for r in self.raws:\n        value = getattr(self, r.removeprefix(\"raw_\"))\n        if value and not getattr(self, r):\n            setattr(self, r, value)\n</code></pre>"},{"location":"reference/utilities/load_initial_data/#utilities.load_initial_data-functions","title":"Functions","text":""},{"location":"reference/utilities/load_initial_data/#utilities.load_initial_data.update_variables_for_station","title":"<code>update_variables_for_station(*station_codes)</code>","text":"<p>Update the variables for the given station codes.</p> <p>The variables are updated based on the measurements associated with the station. The variables are saved as a comma-separated string in the variables field of the station model.</p> <p>Parameters:</p> Name Type Description Default <code>station_codes</code> <code>tuple[str]</code> <p>Station codes for which to update the variables. If not provided, all station codes with measurements are considered.</p> <code>()</code> Source code in <code>station/functions.py</code> <pre><code>def update_variables_for_station(*station_codes) -&gt; None:\n    \"\"\"Update the variables for the given station codes.\n\n    The variables are updated based on the measurements associated with the station.\n    The variables are saved as a comma-separated string in the variables field of the\n    station model.\n\n    Args:\n        station_codes (tuple[str]): Station codes for which to update the variables.\n            If not provided, all station codes with measurements are considered.\n    \"\"\"\n\n    # We get the station codes from the Measurement model if not provided\n    # Only station codes with measurements are considered\n    station_codes = (\n        station_codes\n        or Measurement.objects.values_list(\n            \"station__station_code\", flat=True\n        ).distinct()\n    )\n\n    # Get the variables for each station and save them as a comma-separated string\n    for station_code in station_codes:\n        variables = (\n            Measurement.objects.filter(station__station_code=station_code)\n            .values_list(\"variable__variable_code\", flat=True)\n            .distinct()\n        )\n        if variables:\n            station = Station.objects.get(station_code=station_code)\n            station.variables = variables = \",\".join(variables)\n            station.full_clean()\n            station.save()\n</code></pre>"},{"location":"reference/utilities/timezones/","title":"timezones","text":""},{"location":"reference/utilities/timezones/#utilities.timezones","title":"<code>utilities.timezones</code>","text":""},{"location":"reference/utilities/timezones/#utilities.timezones-functions","title":"Functions","text":""},{"location":"reference/utilities/timezones/#utilities.timezones.to_local_time","title":"<code>to_local_time(utc_time)</code>","text":"<p>Converts a UTC time to a local time.</p> <p>Parameters:</p> Name Type Description Default <code>utc_time</code> <code>datetime</code> <p>UTC time.</p> required <p>Returns:</p> Type Description <code>datetime</code> <p>Local time.</p> Source code in <code>utilities/timezones.py</code> <pre><code>def to_local_time(utc_time: timezone.datetime) -&gt; timezone.datetime:\n    \"\"\"Converts a UTC time to a local time.\n\n    Args:\n        utc_time: UTC time.\n\n    Returns:\n        Local time.\n    \"\"\"\n    tz = timezone.get_current_timezone()\n    return utc_time.astimezone(tz)\n</code></pre>"},{"location":"reference/utilities/benchmarking/","title":"benchmarking","text":""},{"location":"reference/utilities/benchmarking/#utilities.benchmarking","title":"<code>utilities.benchmarking</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/","title":"benchmark_queries","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries","title":"<code>utilities.benchmarking.benchmark_queries</code>","text":"<p>Run a benchmark on the queries to the database.</p> <p>This script will run a series of queries to the database and measure the time it takes. The queries are random and the number of records returned is also random. The idea is to measure the performance of the database when querying for different time ranges and different variables.</p>"},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries-attributes","title":"Attributes","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.days","title":"<code>days = end_date - start_date / timedelta(days=1)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.end","title":"<code>end = Measurement.objects.latest('time').time</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.end_date","title":"<code>end_date = random_date(start_date, end)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.execution","title":"<code>execution = []</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.queries","title":"<code>queries = 500</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.records","title":"<code>records = Measurement.objects.filter(station=station, variable=variable, time__range=(start_date, end_date))</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.records_df","title":"<code>records_df = pd.DataFrame.from_records(records.values())</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.start","title":"<code>start = Measurement.objects.earliest('time').time</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.start_date","title":"<code>start_date = random_date(start, end)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.station","title":"<code>station = random.choice(stations)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.stations","title":"<code>stations = [Station.objects.get(pk=v) for v in set(Measurement.objects.values_list('station', flat=True))]</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.tend","title":"<code>tend = time.time()</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.tstart","title":"<code>tstart = time.time()</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.variable","title":"<code>variable = random.choice(variables)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.variables","title":"<code>variables = [Variable.objects.get(pk=v) for v in set(Measurement.objects.values_list('variable', flat=True))]</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.years","title":"<code>years = end - start.days // 365</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries-classes","title":"Classes","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Measurement","title":"<code>Measurement</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Class to store the measurements and their validation status.</p> <p>This class holds the value of a given variable and station at a specific time, as well as auxiliary information such as maximum and minimum values, depth and direction, for vector quantities. All of these have a <code>raw</code> version where a backup of the original data is kept, should this change at any point.</p> <p>Flags to monitor its validation status, if the data is active (and therefore can be used for reporting) and if it has actually been used for that is also included.</p> <p>Attributes:</p> Name Type Description <code>depth</code> <code>int</code> <p>Depth of the measurement.</p> <code>direction</code> <code>Decimal</code> <p>Direction of the measurement, useful for vector quantities.</p> <code>raw_value</code> <code>Decimal</code> <p>Original value of the measurement.</p> <code>raw_maximum</code> <code>Decimal</code> <p>Original maximum value of the measurement.</p> <code>raw_minimum</code> <code>Decimal</code> <p>Original minimum value of the measurement.</p> <code>raw_direction</code> <code>Decimal</code> <p>Original direction of the measurement.</p> <code>raw_depth</code> <code>int</code> <p>Original depth of the measurement.</p> <code>is_validated</code> <code>bool</code> <p>Flag to indicate if the measurement has been validated.</p> <code>is_active</code> <code>bool</code> <p>Flag to indicate if the measurement is active. An inactive measurement is not used for reporting</p>"},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Measurement-attributes","title":"Attributes","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Measurement.overwritten","title":"<code>overwritten: bool</code>  <code>property</code>","text":"<p>Indicates if any of the values associated to the entry have been overwritten.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if any raw field is different to the corresponding standard field.</p>"},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Measurement.raws","title":"<code>raws: tuple[str, ...]</code>  <code>property</code>","text":"<p>Return the raw fields of the measurement.</p> <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>tuple[str]: Tuple with the names of the raw fields of the measurement.</p>"},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Measurement-functions","title":"Functions","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Measurement.clean","title":"<code>clean()</code>","text":"<p>Check consistency of validation, reporting and backs-up values.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Check consistency of validation, reporting and backs-up values.\"\"\"\n    # Check consistency of validation\n    if not self.is_validated and not self.is_active:\n        raise ValidationError(\"Only validated entries can be declared as inactive.\")\n\n    # Backup values to raws, if needed\n    for r in self.raws:\n        value = getattr(self, r.removeprefix(\"raw_\"))\n        if value and not getattr(self, r):\n            setattr(self, r, value)\n</code></pre>"},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Station-attributes","title":"Attributes","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Station-functions","title":"Functions","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Variable-attributes","title":"Attributes","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Variable-functions","title":"Functions","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries-functions","title":"Functions","text":""},{"location":"reference/utilities/benchmarking/benchmark_queries/#utilities.benchmarking.benchmark_queries.random_date","title":"<code>random_date(start_, end_)</code>","text":"<p>This function will return a random datetime between two datetime objects.</p> Source code in <code>utilities/benchmarking/benchmark_queries.py</code> <pre><code>def random_date(start_: datetime, end_: datetime) -&gt; datetime:\n    \"\"\"This function will return a random datetime between two datetime\n    objects.\n    \"\"\"\n    delta = end_ - start_\n    int_delta = (delta.days * 24 * 60 * 60) + delta.seconds\n    random_second = random.randrange(int_delta)\n    return start_ + timedelta(seconds=random_second)\n</code></pre>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/","title":"create_synthetic_data_scenario1","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1","title":"<code>utilities.benchmarking.create_synthetic_data_scenario1</code>","text":"<p>Scenario for creating synthetic data for benchmarking purposes.</p> <p>This scenario creates synthetic data for a single station and a set of variables for a range of years. It results in a database structure where the number of records is spread evenly across the years and variables. As the default chunk time interval for the TimescaleDB is 1 day, this scenario results in many chunks (&gt;8000) with just a few records each (~3000).</p>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1-attributes","title":"Attributes","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.end","title":"<code>end = datetime(year + 1, 1, 1, tzinfo=tz)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.execution","title":"<code>execution = []</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.maximum","title":"<code>maximum: int = random.randint(20, 30)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.minimum","title":"<code>minimum: int = random.randint(-5, 5)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.nrecords","title":"<code>nrecords = 0</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.progress","title":"<code>progress = tqdm(itertools.product(years, variables), total=len(years) * len(variables), desc='Creating synthetic data')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.records","title":"<code>records = [Measurement(station=station, variable=variable, time=t, value=Decimal(random.randint(minimum, maximum)), minimum=Decimal(minimum), maximum=Decimal(maximum)) for t in pd.date_range(start, end, freq='5min', inclusive='left')]</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.start","title":"<code>start = datetime(year, 1, 1, tzinfo=tz)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.station","title":"<code>station = Station.objects.first()</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.tend","title":"<code>tend = time.time()</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.tstart","title":"<code>tstart = time.time()</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.tz","title":"<code>tz = zoneinfo.ZoneInfo(station.timezone)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.variables","title":"<code>variables = list(Variable.objects.all())[:10]</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.years","title":"<code>years = list(range(2000, 2023))</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1-classes","title":"Classes","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Measurement","title":"<code>Measurement</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Class to store the measurements and their validation status.</p> <p>This class holds the value of a given variable and station at a specific time, as well as auxiliary information such as maximum and minimum values, depth and direction, for vector quantities. All of these have a <code>raw</code> version where a backup of the original data is kept, should this change at any point.</p> <p>Flags to monitor its validation status, if the data is active (and therefore can be used for reporting) and if it has actually been used for that is also included.</p> <p>Attributes:</p> Name Type Description <code>depth</code> <code>int</code> <p>Depth of the measurement.</p> <code>direction</code> <code>Decimal</code> <p>Direction of the measurement, useful for vector quantities.</p> <code>raw_value</code> <code>Decimal</code> <p>Original value of the measurement.</p> <code>raw_maximum</code> <code>Decimal</code> <p>Original maximum value of the measurement.</p> <code>raw_minimum</code> <code>Decimal</code> <p>Original minimum value of the measurement.</p> <code>raw_direction</code> <code>Decimal</code> <p>Original direction of the measurement.</p> <code>raw_depth</code> <code>int</code> <p>Original depth of the measurement.</p> <code>is_validated</code> <code>bool</code> <p>Flag to indicate if the measurement has been validated.</p> <code>is_active</code> <code>bool</code> <p>Flag to indicate if the measurement is active. An inactive measurement is not used for reporting</p>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Measurement-attributes","title":"Attributes","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Measurement.overwritten","title":"<code>overwritten: bool</code>  <code>property</code>","text":"<p>Indicates if any of the values associated to the entry have been overwritten.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if any raw field is different to the corresponding standard field.</p>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Measurement.raws","title":"<code>raws: tuple[str, ...]</code>  <code>property</code>","text":"<p>Return the raw fields of the measurement.</p> <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>tuple[str]: Tuple with the names of the raw fields of the measurement.</p>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Measurement-functions","title":"Functions","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Measurement.clean","title":"<code>clean()</code>","text":"<p>Check consistency of validation, reporting and backs-up values.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Check consistency of validation, reporting and backs-up values.\"\"\"\n    # Check consistency of validation\n    if not self.is_validated and not self.is_active:\n        raise ValidationError(\"Only validated entries can be declared as inactive.\")\n\n    # Backup values to raws, if needed\n    for r in self.raws:\n        value = getattr(self, r.removeprefix(\"raw_\"))\n        if value and not getattr(self, r):\n            setattr(self, r, value)\n</code></pre>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Station-attributes","title":"Attributes","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Station-functions","title":"Functions","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Variable-attributes","title":"Attributes","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Variable-functions","title":"Functions","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario1/#utilities.benchmarking.create_synthetic_data_scenario1.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/","title":"create_synthetic_data_scenario2","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2","title":"<code>utilities.benchmarking.create_synthetic_data_scenario2</code>","text":"<p>Scenario for creating synthetic data for benchmarking purposes.</p> <p>This scenario creates synthetic data for a set of stations and variables for a single year. It results in a database structure where the number of records is spread evenly across the years and variables. As the default chunk time interval for the TimescaleDB is 1 day, this scenario results in not that many chunks (365) and a higher number of records per chunk that the previous scenario (~66000), although the total number of records is the same. Even per chunk, the number of records is still pretty small, sugesting that the performance will not be that different.</p>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2-attributes","title":"Attributes","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.date_range","title":"<code>date_range = pd.date_range(start, end, freq='5min', inclusive='left')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.end","title":"<code>end = datetime(2024, 1, 1, tzinfo=tz)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.execution","title":"<code>execution = []</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.maximum","title":"<code>maximum: int = random.randint(20, 30)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.minimum","title":"<code>minimum: int = random.randint(-5, 5)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.nrecords","title":"<code>nrecords = 0</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.progress","title":"<code>progress = tqdm(itertools.product(stations, variables), total=len(stations) * len(variables), desc='Creating synthetic data')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.records","title":"<code>records = [Measurement(station=station, variable=variable, time=t, value=Decimal(random.randint(minimum, maximum)), minimum=Decimal(minimum), maximum=Decimal(maximum)) for t in date_range]</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.start","title":"<code>start = datetime(2023, 1, 1, tzinfo=tz)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.stations","title":"<code>stations = list(Station.objects.all())[:23]</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.tend","title":"<code>tend = time.time()</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.tstart","title":"<code>tstart = time.time()</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.tz","title":"<code>tz = zoneinfo.ZoneInfo(stations[0].timezone)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.variables","title":"<code>variables = list(Variable.objects.all())[:10]</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2-classes","title":"Classes","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Measurement","title":"<code>Measurement</code>","text":"<p>               Bases: <code>MeasurementBase</code></p> <p>Class to store the measurements and their validation status.</p> <p>This class holds the value of a given variable and station at a specific time, as well as auxiliary information such as maximum and minimum values, depth and direction, for vector quantities. All of these have a <code>raw</code> version where a backup of the original data is kept, should this change at any point.</p> <p>Flags to monitor its validation status, if the data is active (and therefore can be used for reporting) and if it has actually been used for that is also included.</p> <p>Attributes:</p> Name Type Description <code>depth</code> <code>int</code> <p>Depth of the measurement.</p> <code>direction</code> <code>Decimal</code> <p>Direction of the measurement, useful for vector quantities.</p> <code>raw_value</code> <code>Decimal</code> <p>Original value of the measurement.</p> <code>raw_maximum</code> <code>Decimal</code> <p>Original maximum value of the measurement.</p> <code>raw_minimum</code> <code>Decimal</code> <p>Original minimum value of the measurement.</p> <code>raw_direction</code> <code>Decimal</code> <p>Original direction of the measurement.</p> <code>raw_depth</code> <code>int</code> <p>Original depth of the measurement.</p> <code>is_validated</code> <code>bool</code> <p>Flag to indicate if the measurement has been validated.</p> <code>is_active</code> <code>bool</code> <p>Flag to indicate if the measurement is active. An inactive measurement is not used for reporting</p>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Measurement-attributes","title":"Attributes","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Measurement.overwritten","title":"<code>overwritten: bool</code>  <code>property</code>","text":"<p>Indicates if any of the values associated to the entry have been overwritten.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if any raw field is different to the corresponding standard field.</p>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Measurement.raws","title":"<code>raws: tuple[str, ...]</code>  <code>property</code>","text":"<p>Return the raw fields of the measurement.</p> <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>tuple[str]: Tuple with the names of the raw fields of the measurement.</p>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Measurement-functions","title":"Functions","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Measurement.clean","title":"<code>clean()</code>","text":"<p>Check consistency of validation, reporting and backs-up values.</p> Source code in <code>measurement/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Check consistency of validation, reporting and backs-up values.\"\"\"\n    # Check consistency of validation\n    if not self.is_validated and not self.is_active:\n        raise ValidationError(\"Only validated entries can be declared as inactive.\")\n\n    # Backup values to raws, if needed\n    for r in self.raws:\n        value = getattr(self, r.removeprefix(\"raw_\"))\n        if value and not getattr(self, r):\n            setattr(self, r, value)\n</code></pre>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Station-attributes","title":"Attributes","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Station-functions","title":"Functions","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Variable-attributes","title":"Attributes","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Variable-functions","title":"Functions","text":""},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/utilities/benchmarking/create_synthetic_data_scenario2/#utilities.benchmarking.create_synthetic_data_scenario2.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/utilities/frontend_menu/","title":"frontend_menu","text":""},{"location":"reference/utilities/frontend_menu/#utilities.frontend_menu","title":"<code>utilities.frontend_menu</code>","text":""},{"location":"reference/utilities/frontend_menu/constants/","title":"constants","text":""},{"location":"reference/utilities/frontend_menu/constants/#utilities.frontend_menu.constants","title":"<code>utilities.frontend_menu.constants</code>","text":""},{"location":"reference/utilities/frontend_menu/constants/#utilities.frontend_menu.constants-attributes","title":"Attributes","text":""},{"location":"reference/utilities/frontend_menu/constants/#utilities.frontend_menu.constants.menu_item_divider_html","title":"<code>menu_item_divider_html = '&lt;div class=\"dropdown-divider\"&gt;&lt;/div&gt;'</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/frontend_menu/constants/#utilities.frontend_menu.constants.menu_item_html","title":"<code>menu_item_html = '&lt;a class=\"dropdown-item\" href=\"{url}\"&gt;{name}&lt;/a&gt;'</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/frontend_menu/constants/#utilities.frontend_menu.constants.menu_tab_html","title":"<code>menu_tab_html = '\\n&lt;li class=\"nav-item dropdown\"&gt;\\n    &lt;a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarInfoRed\" role=\"button\"\\n    data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"&gt;\\n {tab}\\n    &lt;/a&gt;\\n    &lt;div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"&gt;\\n {items}\\n    &lt;/div&gt;\\n&lt;/li&gt;\\n'</code>  <code>module-attribute</code>","text":""},{"location":"reference/utilities/frontend_menu/constants/#utilities.frontend_menu.constants-classes","title":"Classes","text":""},{"location":"reference/utilities/frontend_menu/constants/#utilities.frontend_menu.constants.Entry","title":"<code>Entry</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"reference/utilities/frontend_menu/constants/#utilities.frontend_menu.constants.Tab","title":"<code>Tab</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"reference/utilities/frontend_menu/constants/#utilities.frontend_menu.constants-functions","title":"Functions","text":""},{"location":"reference/utilities/frontend_menu/constants/#utilities.frontend_menu.constants.menu_struct","title":"<code>menu_struct(filename=None)</code>  <code>cached</code>","text":"<p>Returns the menu structure.</p> <p>As the function is cached, it will be called only once when the webapp is launched.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Name of the file to load</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Tab]</code> <p>List[Tab]: A list of tabs to include.</p> Source code in <code>utilities/frontend_menu/constants.py</code> <pre><code>@lru_cache\ndef menu_struct(filename: Path | None = None) -&gt; list[Tab]:\n    \"\"\"Returns the menu structure.\n\n    As the function is cached, it will be called only once when the webapp is launched.\n\n    Args:\n        filename (str): Name of the file to load\n\n    Returns:\n        List[Tab]: A list of tabs to include.\n    \"\"\"\n    if filename is None:\n        filename = Path(__file__).parent / \"menu.json\"\n\n    with filename.open(\"r\") as f:\n        struct = json.load(f)\n\n    formatted: list[Tab] = []\n    for tab, details in struct.items():\n        entries: list[Entry] = []\n        for entry in details.get(\"items\", []):\n            entries.append(Entry(**entry))\n        formatted.append(Tab(tab, details.get(\"permission\", \"\"), entries))\n\n    return formatted\n</code></pre>"},{"location":"reference/utilities/frontend_menu/context_processor/","title":"context_processor","text":""},{"location":"reference/utilities/frontend_menu/context_processor/#utilities.frontend_menu.context_processor","title":"<code>utilities.frontend_menu.context_processor</code>","text":""},{"location":"reference/utilities/frontend_menu/context_processor/#utilities.frontend_menu.context_processor-functions","title":"Functions","text":""},{"location":"reference/utilities/frontend_menu/context_processor/#utilities.frontend_menu.context_processor.get_menu","title":"<code>get_menu(user)</code>","text":"<p>Generate the user menu in HTML, depending on its permissions.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>The user to generate the menu for.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>An HTML string with the menu items.</p> Source code in <code>utilities/functions.py</code> <pre><code>def get_menu(user: User) -&gt; str:\n    \"\"\"Generate the user menu in HTML, depending on its permissions.\n\n    Args:\n        user (User): The user to generate the menu for.\n\n    Returns:\n        str: An HTML string with the menu items.\n    \"\"\"\n    if user.is_anonymous:  # TODO check this new logic if this function is ever used\n        perms = Permission.objects.filter(Q(user=user) | Q(group__in=user.groups.all()))\n        is_superuser = False\n    else:\n        perms = Permission.objects.filter(Q(user=user) | Q(group__in=user.groups.all()))\n        is_superuser = user.is_superuser\n\n    menu = \"\"\n    for tab in menu_struct():\n        items = \"\"\n        last_is_divider = True\n        i = 0\n\n        for elements in tab.items:\n            if elements.name == \"\":\n                if last_is_divider:\n                    continue\n                items += menu_item_divider_html\n                last_is_divider = True\n                continue\n\n            app, codename = elements.permission.split(\".\")\n            if (\n                perms.filter(content_type__app_label=app, codename=codename).exists()\n                or is_superuser\n            ):\n                try:\n                    url = reverse(elements.url_name)\n                except Exception:\n                    msg = f\"URL '{elements.url_name}' not found when creating menu.\"\n                    getLogger().debug(msg)\n                    continue\n\n                items += menu_item_html.format(url=url, name=elements.name)\n                last_is_divider = False\n                i += 1\n\n        if i &gt; 0:\n            menu += menu_tab_html.format(tab=tab.name, items=items)\n\n    return menu\n</code></pre>"},{"location":"reference/utilities/frontend_menu/context_processor/#utilities.frontend_menu.context_processor.menu","title":"<code>menu(request)</code>","text":"<p>Context processor for creating the menus.</p> <p>Using this processor is indicated in the TEMPLATES section of settings.py.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The request to process, including the 'user'.</p> required <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>Dict[str, str]: A dictionary with the menu items.</p> Source code in <code>utilities/frontend_menu/context_processor.py</code> <pre><code>def menu(request: HttpRequest) -&gt; dict[str, str]:\n    \"\"\"Context processor for creating the menus.\n\n    Using this processor is indicated in the TEMPLATES section of settings.py.\n\n    Args:\n        request (HttpRequest): The request to process, including the 'user'.\n\n    Returns:\n        Dict[str, str]: A dictionary with the menu items.\n    \"\"\"\n    return {\"menu\": get_menu(request.user)}\n</code></pre>"},{"location":"reference/variable/","title":"variable","text":""},{"location":"reference/variable/#variable","title":"<code>variable</code>","text":""},{"location":"reference/variable/admin/","title":"admin","text":""},{"location":"reference/variable/admin/#variable.admin","title":"<code>variable.admin</code>","text":""},{"location":"reference/variable/admin/#variable.admin-classes","title":"Classes","text":""},{"location":"reference/variable/admin/#variable.admin.PermissionsBaseAdmin","title":"<code>PermissionsBaseAdmin</code>","text":"<p>               Bases: <code>GuardedModelAdmin</code></p> <p>Base admin class for models that require permissions.</p>"},{"location":"reference/variable/admin/#variable.admin.PermissionsBaseAdmin-functions","title":"Functions","text":""},{"location":"reference/variable/admin/#variable.admin.PermissionsBaseAdmin.formfield_for_choice_field","title":"<code>formfield_for_choice_field(db_field, request, **kwargs)</code>","text":"<p>Limit the queryset for choice fields.</p> Source code in <code>management/admin.py</code> <pre><code>def formfield_for_choice_field(self, db_field, request, **kwargs):\n    \"\"\"Limit the queryset for choice fields.\"\"\"\n    if db_field.name == \"visibility\":\n        kwargs[\"initial\"] = \"private\"\n        if self.limit_visibility_level and not request.user.is_superuser:\n            kwargs[\"disabled\"] = True\n    return super().formfield_for_choice_field(db_field, request, **kwargs)\n</code></pre>"},{"location":"reference/variable/admin/#variable.admin.PermissionsBaseAdmin.formfield_for_foreignkey","title":"<code>formfield_for_foreignkey(db_field, request, **kwargs)</code>","text":"<p>Limit the queryset for foreign key fields.</p> Source code in <code>management/admin.py</code> <pre><code>def formfield_for_foreignkey(self, db_field, request, **kwargs):\n    \"\"\"Limit the queryset for foreign key fields.\"\"\"\n    if db_field.name in self.foreign_key_fields:\n        kwargs[\"queryset\"] = get_queryset(db_field, request.user)\n    if db_field.name == \"owner\" and not request.user.is_superuser:\n        kwargs[\"initial\"] = request.user.id\n        kwargs[\"disabled\"] = True\n    return super().formfield_for_foreignkey(db_field, request, **kwargs)\n</code></pre>"},{"location":"reference/variable/admin/#variable.admin.PermissionsBaseAdmin.get_queryset","title":"<code>get_queryset(request)</code>","text":"<p>Return a queryset of the objects that the user has view permissions for.</p> Source code in <code>management/admin.py</code> <pre><code>def get_queryset(self, request):\n    \"\"\"Return a queryset of the objects that the user has view permissions for.\"\"\"\n    qs = super().get_queryset(request)\n    return get_objects_for_user(\n        request.user, f\"{self.opts.app_label}.view_{self.opts.model_name}\", qs\n    )\n</code></pre>"},{"location":"reference/variable/admin/#variable.admin.PermissionsBaseAdmin.has_change_permission","title":"<code>has_change_permission(request, obj=None)</code>","text":"<p>Check if the user has the correct permission to change the object.</p> Source code in <code>management/admin.py</code> <pre><code>def has_change_permission(self, request, obj=None):\n    \"\"\"Check if the user has the correct permission to change the object.\"\"\"\n    if obj is not None:\n        return request.user.has_perm(\n            f\"{self.opts.app_label}.change_{self.opts.model_name}\", obj\n        )\n    return True\n</code></pre>"},{"location":"reference/variable/admin/#variable.admin.PermissionsBaseAdmin.has_delete_permission","title":"<code>has_delete_permission(request, obj=None)</code>","text":"<p>Check if the user has the correct permission to delete the object.</p> Source code in <code>management/admin.py</code> <pre><code>def has_delete_permission(self, request, obj=None):\n    \"\"\"Check if the user has the correct permission to delete the object.\"\"\"\n    return request.user.has_perm(\n        f\"{self.opts.app_label}.delete_{self.opts.model_name}\", obj\n    )\n</code></pre>"},{"location":"reference/variable/admin/#variable.admin.PermissionsBaseAdmin.has_view_permission","title":"<code>has_view_permission(request, obj=None)</code>","text":"<p>Check if the user has the correct permission to view the object.</p> Source code in <code>management/admin.py</code> <pre><code>def has_view_permission(self, request, obj=None):\n    \"\"\"Check if the user has the correct permission to view the object.\"\"\"\n    if obj is not None:\n        return request.user.has_perm(\n            f\"{self.opts.app_label}.view_{self.opts.model_name}\", obj\n        )\n</code></pre>"},{"location":"reference/variable/admin/#variable.admin.PermissionsBaseAdmin.obj_perms_manage_view","title":"<code>obj_perms_manage_view(request, object_pk)</code>","text":"<p>Prevents permission scalation at object level.</p> <p>Only allows users with change permissions for this object to change the object permissions.</p> Source code in <code>management/admin.py</code> <pre><code>def obj_perms_manage_view(self, request, object_pk):\n    \"\"\"Prevents permission scalation at object level.\n\n    Only allows users with change permissions for this object to change the object\n    permissions.\n    \"\"\"\n    obj = self.get_object(request, object_pk)\n    if not request.user.has_perm(\n        f\"{self.opts.app_label}.change_{self.opts.model_name}\", obj\n    ):\n        post_url = reverse(\"admin:index\", current_app=self.admin_site.name)\n        return redirect(post_url)\n\n    return super().obj_perms_manage_view(request, object_pk)\n</code></pre>"},{"location":"reference/variable/admin/#variable.admin.SensorInstallation","title":"<code>SensorInstallation</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Represents an installation of a Sensor at a Station, which measures a Variable.</p> <p>It includes metadata for installation and finishing date, as well as state (active or not).</p> <p>Attributes:</p> Name Type Description <code>sensorinstallation_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable</code> <code>ForeignKey</code> <p>Variable measured by the sensor.</p> <code>station</code> <code>ForeignKey</code> <p>Station where the sensor is installed.</p> <code>sensor</code> <code>ForeignKey</code> <p>Sensor used for the measurement.</p> <code>start_date</code> <code>DateField</code> <p>Start date of the installation.</p> <code>end_date</code> <code>DateField</code> <p>End date of the installation.</p> <code>state</code> <code>BooleanField</code> <p>Is the sensor active?</p>"},{"location":"reference/variable/admin/#variable.admin.SensorInstallation-functions","title":"Functions","text":""},{"location":"reference/variable/admin/#variable.admin.SensorInstallation.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:sensorinstallation_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/admin/#variable.admin.SensorInstallationAdmin","title":"<code>SensorInstallationAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the SensorInstallation model.</p>"},{"location":"reference/variable/admin/#variable.admin.SensorTypeAdmin","title":"<code>SensorTypeAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the Unit model.</p>"},{"location":"reference/variable/admin/#variable.admin.Unit","title":"<code>Unit</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Unit of measurement with a name and a symbol.</p> <p>Attributes:</p> Name Type Description <code>unit_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Name of the unit, eg. meters per second.</p> <code>initials</code> <code>CharField</code> <p>Symbol for the unit, eg. m/s.</p>"},{"location":"reference/variable/admin/#variable.admin.Unit-functions","title":"Functions","text":""},{"location":"reference/variable/admin/#variable.admin.Unit.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.initials)\n</code></pre>"},{"location":"reference/variable/admin/#variable.admin.Unit.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:unit_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/admin/#variable.admin.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/variable/admin/#variable.admin.Variable-attributes","title":"Attributes","text":""},{"location":"reference/variable/admin/#variable.admin.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/variable/admin/#variable.admin.Variable-functions","title":"Functions","text":""},{"location":"reference/variable/admin/#variable.admin.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/variable/admin/#variable.admin.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/variable/admin/#variable.admin.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/admin/#variable.admin.VariableAdmin","title":"<code>VariableAdmin</code>","text":"<p>               Bases: <code>PermissionsBaseAdmin</code></p> <p>Admin class for the Variable model.</p>"},{"location":"reference/variable/apps/","title":"apps","text":""},{"location":"reference/variable/apps/#variable.apps","title":"<code>variable.apps</code>","text":""},{"location":"reference/variable/apps/#variable.apps-classes","title":"Classes","text":""},{"location":"reference/variable/apps/#variable.apps.VariableConfig","title":"<code>VariableConfig</code>","text":"<p>               Bases: <code>AppConfig</code></p>"},{"location":"reference/variable/filters/","title":"filters","text":""},{"location":"reference/variable/filters/#variable.filters","title":"<code>variable.filters</code>","text":""},{"location":"reference/variable/filters/#variable.filters-classes","title":"Classes","text":""},{"location":"reference/variable/filters/#variable.filters.FilterVisible","title":"<code>FilterVisible(target, model, field=None)</code>","text":"<p>Filter objects the user has permission to view.</p> <p>Standard filter shows ALL objects available in the database when faced with a ForeignKey field. This filter shows only the objects that appear in the target model objects that the user has permission to view.</p> <p>If field is None, the name of the <code>model</code> model is used.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>type[Model]</code> <p>Model containing the objects.</p> required <code>model</code> <code>type[Model]</code> <p>Model of the objects to display.</p> required <code>field</code> <code>str | None</code> <p>Field to filter by. Defaults to None.</p> <code>None</code> Source code in <code>management/filters.py</code> <pre><code>def __init__(\n    self, target: type[Model], model: type[Model], field: str | None = None\n) -&gt; None:\n    self.target = target\n    self.model = model\n    self.field = field or model.__name__.lower()\n    self.permission = f\"{target._meta.app_label}.view_{target._meta.model_name}\"\n</code></pre>"},{"location":"reference/variable/filters/#variable.filters.Sensor","title":"<code>Sensor</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Specific sensor details.</p> <p>Attributes:</p> Name Type Description <code>sensor_id</code> <code>int</code> <p>Primary key, sensor id.</p> <code>code</code> <p>(str) sensor code.</p> <code>sensor_type</code> <code>SensorType</code> <p>sensor type.</p> <code>sensor_brand</code> <code>SensorBrand</code> <p>sensor brand.</p> <code>model</code> <code>str</code> <p>specific model of the sensor.</p> <code>serial</code> <code>str</code> <p>serial number of the sensor.</p> <code>status</code> <code>bool</code> <p>sensor status.</p>"},{"location":"reference/variable/filters/#variable.filters.Sensor-functions","title":"Functions","text":""},{"location":"reference/variable/filters/#variable.filters.Sensor.__str__","title":"<code>__str__()</code>","text":"<p>Return the sensor code.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the sensor code.\"\"\"\n    return str(self.code)\n</code></pre>"},{"location":"reference/variable/filters/#variable.filters.Sensor.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor.\"\"\"\n    return reverse(\"sensor:sensor_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/filters/#variable.filters.SensorInstallation","title":"<code>SensorInstallation</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Represents an installation of a Sensor at a Station, which measures a Variable.</p> <p>It includes metadata for installation and finishing date, as well as state (active or not).</p> <p>Attributes:</p> Name Type Description <code>sensorinstallation_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable</code> <code>ForeignKey</code> <p>Variable measured by the sensor.</p> <code>station</code> <code>ForeignKey</code> <p>Station where the sensor is installed.</p> <code>sensor</code> <code>ForeignKey</code> <p>Sensor used for the measurement.</p> <code>start_date</code> <code>DateField</code> <p>Start date of the installation.</p> <code>end_date</code> <code>DateField</code> <p>End date of the installation.</p> <code>state</code> <code>BooleanField</code> <p>Is the sensor active?</p>"},{"location":"reference/variable/filters/#variable.filters.SensorInstallation-functions","title":"Functions","text":""},{"location":"reference/variable/filters/#variable.filters.SensorInstallation.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:sensorinstallation_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/filters/#variable.filters.SensorInstallationFilter","title":"<code>SensorInstallationFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/variable/filters/#variable.filters.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/variable/filters/#variable.filters.Station-attributes","title":"Attributes","text":""},{"location":"reference/variable/filters/#variable.filters.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/variable/filters/#variable.filters.Station-functions","title":"Functions","text":""},{"location":"reference/variable/filters/#variable.filters.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/variable/filters/#variable.filters.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/filters/#variable.filters.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/variable/filters/#variable.filters.Unit","title":"<code>Unit</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Unit of measurement with a name and a symbol.</p> <p>Attributes:</p> Name Type Description <code>unit_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Name of the unit, eg. meters per second.</p> <code>initials</code> <code>CharField</code> <p>Symbol for the unit, eg. m/s.</p>"},{"location":"reference/variable/filters/#variable.filters.Unit-functions","title":"Functions","text":""},{"location":"reference/variable/filters/#variable.filters.Unit.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.initials)\n</code></pre>"},{"location":"reference/variable/filters/#variable.filters.Unit.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:unit_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/filters/#variable.filters.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/variable/filters/#variable.filters.Variable-attributes","title":"Attributes","text":""},{"location":"reference/variable/filters/#variable.filters.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/variable/filters/#variable.filters.Variable-functions","title":"Functions","text":""},{"location":"reference/variable/filters/#variable.filters.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/variable/filters/#variable.filters.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/variable/filters/#variable.filters.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/filters/#variable.filters.VariableFilter","title":"<code>VariableFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/variable/models/","title":"models","text":""},{"location":"reference/variable/models/#variable.models","title":"<code>variable.models</code>","text":""},{"location":"reference/variable/models/#variable.models-classes","title":"Classes","text":""},{"location":"reference/variable/models/#variable.models.PermissionsBase","title":"<code>PermissionsBase</code>","text":"<p>               Bases: <code>Model</code></p> <p>Base model for models that require permissions.</p>"},{"location":"reference/variable/models/#variable.models.PermissionsBase-functions","title":"Functions","text":""},{"location":"reference/variable/models/#variable.models.PermissionsBase.set_model_permissions","title":"<code>set_model_permissions()</code>  <code>classmethod</code>","text":"<p>Set model-level add permissions.</p> Source code in <code>management/models.py</code> <pre><code>@classmethod\ndef set_model_permissions(cls):\n    \"\"\"Set model-level add permissions.\"\"\"\n    apply_add_permissions_to_standard_group(cls)\n</code></pre>"},{"location":"reference/variable/models/#variable.models.PermissionsBase.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level delete, change and view permissions.</p> Source code in <code>management/models.py</code> <pre><code>def set_object_permissions(self):\n    \"\"\"Set object-level delete, change and view permissions.\"\"\"\n    delete, change, view, add = _get_perm_codenames(self.__class__)\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # View permissions based on permissions level\n    if self.visibility in [\"public\", \"internal\"]:\n        assign_perm(view, standard_group, self)\n        assign_perm(view, anonymous_user, self)\n        if self.owner:\n            remove_perm(view, self.owner, self)\n    elif self.visibility == \"private\" and self.owner:\n        remove_perm(view, standard_group, self)\n        remove_perm(view, anonymous_user, self)\n        if self.owner:\n            assign_perm(view, self.owner, self)\n\n    # Assign change and delete permissions for owner\n    for perm in [change, delete]:\n        remove_perm(perm, standard_group, self)\n        remove_perm(perm, anonymous_user, self)\n        if self.owner:\n            assign_perm(perm, self.owner, self)\n</code></pre>"},{"location":"reference/variable/models/#variable.models.Sensor","title":"<code>Sensor</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Specific sensor details.</p> <p>Attributes:</p> Name Type Description <code>sensor_id</code> <code>int</code> <p>Primary key, sensor id.</p> <code>code</code> <p>(str) sensor code.</p> <code>sensor_type</code> <code>SensorType</code> <p>sensor type.</p> <code>sensor_brand</code> <code>SensorBrand</code> <p>sensor brand.</p> <code>model</code> <code>str</code> <p>specific model of the sensor.</p> <code>serial</code> <code>str</code> <p>serial number of the sensor.</p> <code>status</code> <code>bool</code> <p>sensor status.</p>"},{"location":"reference/variable/models/#variable.models.Sensor-functions","title":"Functions","text":""},{"location":"reference/variable/models/#variable.models.Sensor.__str__","title":"<code>__str__()</code>","text":"<p>Return the sensor code.</p> Source code in <code>sensor/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the sensor code.\"\"\"\n    return str(self.code)\n</code></pre>"},{"location":"reference/variable/models/#variable.models.Sensor.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the sensor.</p> Source code in <code>sensor/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the sensor.\"\"\"\n    return reverse(\"sensor:sensor_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/models/#variable.models.SensorInstallation","title":"<code>SensorInstallation</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Represents an installation of a Sensor at a Station, which measures a Variable.</p> <p>It includes metadata for installation and finishing date, as well as state (active or not).</p> <p>Attributes:</p> Name Type Description <code>sensorinstallation_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable</code> <code>ForeignKey</code> <p>Variable measured by the sensor.</p> <code>station</code> <code>ForeignKey</code> <p>Station where the sensor is installed.</p> <code>sensor</code> <code>ForeignKey</code> <p>Sensor used for the measurement.</p> <code>start_date</code> <code>DateField</code> <p>Start date of the installation.</p> <code>end_date</code> <code>DateField</code> <p>End date of the installation.</p> <code>state</code> <code>BooleanField</code> <p>Is the sensor active?</p>"},{"location":"reference/variable/models/#variable.models.SensorInstallation-functions","title":"Functions","text":""},{"location":"reference/variable/models/#variable.models.SensorInstallation.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:sensorinstallation_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/models/#variable.models.Station","title":"<code>Station</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Main representation of a station, including several metadata.</p> <p>Attributes:</p> Name Type Description <code>visibility</code> <code>str</code> <p>Visibility level of the object, including an \"internal\" option.</p> <code>station_id</code> <code>int</code> <p>Primary key.</p> <code>station_code</code> <code>str</code> <p>Unique code for the station.</p> <code>station_name</code> <code>str</code> <p>Brief description of the station.</p> <code>station_type</code> <code>StationType</code> <p>Type of the station.</p> <code>country</code> <code>Country</code> <p>Country where the station is located.</p> <code>region</code> <code>Region</code> <p>Region within the Country where the station is located.</p> <code>ecosystem</code> <code>Ecosystem</code> <p>Ecosystem associated with the station.</p> <code>institution</code> <code>Institution</code> <p>Institutional partner responsible for the station.</p> <code>place_basin</code> <code>PlaceBasin</code> <p>Place-Basin association.</p> <code>station_state</code> <code>bool</code> <p>Is the station operational?</p> <code>timezone</code> <code>str</code> <p>Timezone of the station.</p> <code>station_latitude</code> <code>Decimal</code> <p>Latitude of the station, in degrees [-90 to 90].</p> <code>station_longitude</code> <code>Decimal</code> <p>Longitude of the station, in degrees [-180 to 180].</p> <code>station_altitude</code> <code>int</code> <p>Altitude of the station.</p> <code>influence_km</code> <code>Decimal</code> <p>Area of influence in km2.</p> <code>station_file</code> <code>ImageField</code> <p>Photography of the station.</p> <code>station_external</code> <code>bool</code> <p>Is the station external?</p> <code>variables</code> <code>str</code> <p>Comma-separated list of variables measured by the station.</p>"},{"location":"reference/variable/models/#variable.models.Station-attributes","title":"Attributes","text":""},{"location":"reference/variable/models/#variable.models.Station.variables_list","title":"<code>variables_list: list[str]</code>  <code>property</code>","text":"<p>Return the list of variables measured by the station.</p> <p>Only variables with data in the database are returned.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of variables measured by the station.</p>"},{"location":"reference/variable/models/#variable.models.Station-functions","title":"Functions","text":""},{"location":"reference/variable/models/#variable.models.Station.__str__","title":"<code>__str__()</code>","text":"<p>Return the station code.</p> Source code in <code>station/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the station code.\"\"\"\n    return str(self.station_code)\n</code></pre>"},{"location":"reference/variable/models/#variable.models.Station.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Return the absolute url of the station.</p> Source code in <code>station/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Return the absolute url of the station.\"\"\"\n    return reverse(\"station:station_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/models/#variable.models.Station.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level permissions.</p> <p>This method is called by the save method of the model to set the object-level permissions based on the visibility level of the object. In addition to the standard permissions for the station, the view_measurements permission is set which controls who can view the measurements associated to the station.</p> Source code in <code>station/models.py</code> <pre><code>def set_object_permissions(self) -&gt; None:\n    \"\"\"Set object-level permissions.\n\n    This method is called by the save method of the model to set the object-level\n    permissions based on the visibility level of the object. In addition to the\n    standard permissions for the station, the view_measurements permission is set\n    which controls who can view the measurements associated to the station.\n    \"\"\"\n    super().set_object_permissions()\n\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # Assign view_measurements permission based on permissions level\n    if self.visibility == \"public\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        assign_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"internal\":\n        assign_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            remove_perm(\"view_measurements\", self.owner, self)\n    elif self.visibility == \"private\":\n        remove_perm(\"view_measurements\", standard_group, self)\n        remove_perm(\"view_measurements\", anonymous_user, self)\n        if self.owner:\n            assign_perm(\"view_measurements\", self.owner, self)\n</code></pre>"},{"location":"reference/variable/models/#variable.models.Unit","title":"<code>Unit</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Unit of measurement with a name and a symbol.</p> <p>Attributes:</p> Name Type Description <code>unit_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Name of the unit, eg. meters per second.</p> <code>initials</code> <code>CharField</code> <p>Symbol for the unit, eg. m/s.</p>"},{"location":"reference/variable/models/#variable.models.Unit-functions","title":"Functions","text":""},{"location":"reference/variable/models/#variable.models.Unit.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.initials)\n</code></pre>"},{"location":"reference/variable/models/#variable.models.Unit.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:unit_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/models/#variable.models.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/variable/models/#variable.models.Variable-attributes","title":"Attributes","text":""},{"location":"reference/variable/models/#variable.models.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/variable/models/#variable.models.Variable-functions","title":"Functions","text":""},{"location":"reference/variable/models/#variable.models.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/variable/models/#variable.models.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/variable/models/#variable.models.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/tables/","title":"tables","text":""},{"location":"reference/variable/tables/#variable.tables","title":"<code>variable.tables</code>","text":""},{"location":"reference/variable/tables/#variable.tables-classes","title":"Classes","text":""},{"location":"reference/variable/tables/#variable.tables.SensorInstallation","title":"<code>SensorInstallation</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Represents an installation of a Sensor at a Station, which measures a Variable.</p> <p>It includes metadata for installation and finishing date, as well as state (active or not).</p> <p>Attributes:</p> Name Type Description <code>sensorinstallation_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable</code> <code>ForeignKey</code> <p>Variable measured by the sensor.</p> <code>station</code> <code>ForeignKey</code> <p>Station where the sensor is installed.</p> <code>sensor</code> <code>ForeignKey</code> <p>Sensor used for the measurement.</p> <code>start_date</code> <code>DateField</code> <p>Start date of the installation.</p> <code>end_date</code> <code>DateField</code> <p>End date of the installation.</p> <code>state</code> <code>BooleanField</code> <p>Is the sensor active?</p>"},{"location":"reference/variable/tables/#variable.tables.SensorInstallation-functions","title":"Functions","text":""},{"location":"reference/variable/tables/#variable.tables.SensorInstallation.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:sensorinstallation_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/tables/#variable.tables.SensorInstallationTable","title":"<code>SensorInstallationTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/variable/tables/#variable.tables.Unit","title":"<code>Unit</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Unit of measurement with a name and a symbol.</p> <p>Attributes:</p> Name Type Description <code>unit_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Name of the unit, eg. meters per second.</p> <code>initials</code> <code>CharField</code> <p>Symbol for the unit, eg. m/s.</p>"},{"location":"reference/variable/tables/#variable.tables.Unit-functions","title":"Functions","text":""},{"location":"reference/variable/tables/#variable.tables.Unit.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.initials)\n</code></pre>"},{"location":"reference/variable/tables/#variable.tables.Unit.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:unit_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/tables/#variable.tables.UnitTable","title":"<code>UnitTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/variable/tables/#variable.tables.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/variable/tables/#variable.tables.Variable-attributes","title":"Attributes","text":""},{"location":"reference/variable/tables/#variable.tables.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/variable/tables/#variable.tables.Variable-functions","title":"Functions","text":""},{"location":"reference/variable/tables/#variable.tables.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/variable/tables/#variable.tables.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/variable/tables/#variable.tables.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/tables/#variable.tables.VariableTable","title":"<code>VariableTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/variable/urls/","title":"urls","text":""},{"location":"reference/variable/urls/#variable.urls","title":"<code>variable.urls</code>","text":""},{"location":"reference/variable/urls/#variable.urls-attributes","title":"Attributes","text":""},{"location":"reference/variable/urls/#variable.urls.app_name","title":"<code>app_name = 'variable'</code>  <code>module-attribute</code>","text":""},{"location":"reference/variable/urls/#variable.urls.urlpatterns","title":"<code>urlpatterns = [path('unit/&lt;int:pk&gt;', UnitDetailView.as_view(), name='unit_detail'), path('variable/&lt;int:pk&gt;', VariableDetailView.as_view(), name='variable_detail'), path('sensorinstallation/&lt;int:pk&gt;', SensorInstallationDetailView.as_view(), name='sensorinstallation_detail'), path('unit/create/', UnitCreateView.as_view(), name='unit_create'), path('variable/create/', VariableCreateView.as_view(), name='variable_create'), path('sensorinstallation/create/', SensorInstallationCreateView.as_view(), name='sensorinstallation_create'), path('unit/edit/&lt;int:pk&gt;', UnitEditView.as_view(), name='unit_edit'), path('variable/edit/&lt;int:pk&gt;', VariableEditView.as_view(), name='variable_edit'), path('sensorinstallation/edit/&lt;int:pk&gt;', SensorInstallationEditView.as_view(), name='sensorinstallation_edit'), path('unit/delete/&lt;int:pk&gt;', UnitDeleteView.as_view(), name='unit_delete'), path('variable/delete/&lt;int:pk&gt;', VariableDeleteView.as_view(), name='variable_delete'), path('sensorinstallation/delete/&lt;int:pk&gt;', SensorInstallationDeleteView.as_view(), name='sensorinstallation_delete'), path('unit/', UnitListView.as_view(), name='unit_list'), path('variable/', VariableListView.as_view(), name='variable_list'), path('sensorinstallation/', SensorInstallationListView.as_view(), name='sensorinstallation_list')]</code>  <code>module-attribute</code>","text":""},{"location":"reference/variable/urls/#variable.urls-classes","title":"Classes","text":""},{"location":"reference/variable/urls/#variable.urls.SensorInstallationCreateView","title":"<code>SensorInstallationCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a sensor installation.</p>"},{"location":"reference/variable/urls/#variable.urls.SensorInstallationDeleteView","title":"<code>SensorInstallationDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a sensor installation.</p>"},{"location":"reference/variable/urls/#variable.urls.SensorInstallationDetailView","title":"<code>SensorInstallationDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a sensor installation.</p>"},{"location":"reference/variable/urls/#variable.urls.SensorInstallationEditView","title":"<code>SensorInstallationEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a sensor installation.</p>"},{"location":"reference/variable/urls/#variable.urls.SensorInstallationListView","title":"<code>SensorInstallationListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of sensor installations.</p>"},{"location":"reference/variable/urls/#variable.urls.UnitCreateView","title":"<code>UnitCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a unit.</p>"},{"location":"reference/variable/urls/#variable.urls.UnitDeleteView","title":"<code>UnitDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a unit.</p>"},{"location":"reference/variable/urls/#variable.urls.UnitDetailView","title":"<code>UnitDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a unit.</p>"},{"location":"reference/variable/urls/#variable.urls.UnitEditView","title":"<code>UnitEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a unit.</p>"},{"location":"reference/variable/urls/#variable.urls.UnitListView","title":"<code>UnitListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of units.</p>"},{"location":"reference/variable/urls/#variable.urls.VariableCreateView","title":"<code>VariableCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a variable.</p>"},{"location":"reference/variable/urls/#variable.urls.VariableDeleteView","title":"<code>VariableDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a variable.</p>"},{"location":"reference/variable/urls/#variable.urls.VariableDetailView","title":"<code>VariableDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a variable.</p>"},{"location":"reference/variable/urls/#variable.urls.VariableEditView","title":"<code>VariableEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a variable.</p>"},{"location":"reference/variable/urls/#variable.urls.VariableListView","title":"<code>VariableListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of variables.</p>"},{"location":"reference/variable/views/","title":"views","text":""},{"location":"reference/variable/views/#variable.views","title":"<code>variable.views</code>","text":""},{"location":"reference/variable/views/#variable.views-classes","title":"Classes","text":""},{"location":"reference/variable/views/#variable.views.CustomCreateView","title":"<code>CustomCreateView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>CreateView</code></p> <p>Generic create view.</p> <p>This view is used to create a new model object. The user must have the permission to create the object, otherwise a 403 error is returned.</p> <p>The view includes a form with the object data, and the context includes the title of the view and the URL to the list view.</p> <p>If provided, the <code>foreign_key_fields</code> attribute is used to limit the queryset for foreign key fields.</p> <p>If successful, the view redirects to the detail view of the created object.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>template_name</code> <code>str</code> <p>Template to be used.</p>"},{"location":"reference/variable/views/#variable.views.CustomCreateView-functions","title":"Functions","text":""},{"location":"reference/variable/views/#variable.views.CustomCreateView.form_valid","title":"<code>form_valid(form)</code>","text":"<p>Set the owner of the object to the current user.</p> <p>This is done before saving the object to the database.</p> <p>Parameters:</p> Name Type Description Default <code>form</code> <code>ModelForm</code> <p>Form with the object data.</p> required <p>Returns:</p> Name Type Description <code>HttpResponse</code> <code>HttpResponse</code> <p>Redirect to the detail view of the created object.</p> Source code in <code>management/views.py</code> <pre><code>def form_valid(self, form: forms.ModelForm) -&gt; HttpResponse:\n    \"\"\"Set the owner of the object to the current user.\n\n    This is done before saving the object to the database.\n\n    Args:\n        form (forms.ModelForm): Form with the object data.\n\n    Returns:\n        HttpResponse: Redirect to the detail view of the created object.\n    \"\"\"\n    form.instance.owner = self.request.user\n    return super().form_valid(form)\n</code></pre>"},{"location":"reference/variable/views/#variable.views.CustomCreateView.get_form_kwargs","title":"<code>get_form_kwargs()</code>","text":"<p>Add the user to the form kwargs, so we can filter the options.</p> Source code in <code>management/views.py</code> <pre><code>def get_form_kwargs(self):\n    \"\"\"Add the user to the form kwargs, so we can filter the options.\"\"\"\n    kwargs = super().get_form_kwargs()\n    kwargs[\"user\"] = self.request.user\n    return kwargs\n</code></pre>"},{"location":"reference/variable/views/#variable.views.CustomDeleteView","title":"<code>CustomDeleteView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>DeleteView</code></p> <p>Generic delete view.</p> <p>This view is used to delete a model object. The user must have the permission to delete the object, otherwise a 403 error is returned. A confirmation page is shown with the related objects that will be deleted.</p> <p>The permissions required to delete the object are <code>app_label.delete_model_name</code>. For example, the permission required to delete a <code>DataImport</code> object would be <code>importing.delete_dataimport</code>.</p> <p>If successful, the view redirects to the list view.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>template_name</code> <code>str</code> <p>Template to be used.</p>"},{"location":"reference/variable/views/#variable.views.CustomDetailView","title":"<code>CustomDetailView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>DetailView</code></p> <p>Generic detail view.</p> <p>This view is used to show the details of a model object. The user must have the permission to view the object, otherwise a 403 error is returned.</p> <p>The view includes a form with the object data, and the context includes the URLs for the list, delete, and edit views.</p> <p>The permissions required to view the object are <code>app_label.view_model_name</code>. For example, the permission required to view a <code>DataImport</code> object would be <code>importing.view_dataimport</code>.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>template_name</code> <code>str</code> <p>Template to be used.</p> <code>fields</code> <code>str</code> <p>Fields to be shown in the form.</p>"},{"location":"reference/variable/views/#variable.views.CustomDetailView-functions","title":"Functions","text":""},{"location":"reference/variable/views/#variable.views.CustomDetailView.get_inline","title":"<code>get_inline()</code>","text":"<p>Return the inline data for the format.</p> <p>If provided, this method should return a dictionary with the inline data to be shown in the detail view. The dictionary should have the following keys:</p> <ul> <li>title: Title of the inline data.</li> <li>header: List with the header of the table.</li> <li>objects: List with the objects to be shown in the table. Each object should be     a list with the same length as the header.</li> </ul> <p>Returns:</p> Type Description <code>dict | None</code> <p>dict | None: Inline data for the format.</p> Source code in <code>management/views.py</code> <pre><code>def get_inline(self) -&gt; dict | None:\n    \"\"\"Return the inline data for the format.\n\n    If provided, this method should return a dictionary with the inline data to be\n    shown in the detail view. The dictionary should have the following keys:\n\n    - title: Title of the inline data.\n    - header: List with the header of the table.\n    - objects: List with the objects to be shown in the table. Each object should be\n        a list with the same length as the header.\n\n    Returns:\n        dict | None: Inline data for the format.\n    \"\"\"\n    return None\n</code></pre>"},{"location":"reference/variable/views/#variable.views.CustomEditView","title":"<code>CustomEditView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>UpdateView</code></p> <p>Generic edit view.</p> <p>This view is used to edit a model object. The user must have the permission to edit the object, otherwise a 403 error is returned.</p> <p>The view includes a form with the object data, and the context includes the title of the view and the URL to the list view.</p> <p>The permissions required to edit the object are <code>app_label.change_model_name</code>. For example, the permission required to edit a <code>DataImport</code> object would be <code>importing.change_dataimport</code>.</p> <p>If successful or cancelled, the view redirects to the detail view of the created object.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>template_name</code> <code>str</code> <p>Template to be used.</p>"},{"location":"reference/variable/views/#variable.views.CustomEditView-functions","title":"Functions","text":""},{"location":"reference/variable/views/#variable.views.CustomEditView.get_form_kwargs","title":"<code>get_form_kwargs()</code>","text":"<p>Add the user to the form kwargs, so we can filter the options.</p> Source code in <code>management/views.py</code> <pre><code>def get_form_kwargs(self):\n    \"\"\"Add the user to the form kwargs, so we can filter the options.\"\"\"\n    kwargs = super().get_form_kwargs()\n    kwargs[\"user\"] = self.request.user\n    return kwargs\n</code></pre>"},{"location":"reference/variable/views/#variable.views.CustomTableView","title":"<code>CustomTableView</code>","text":"<p>               Bases: <code>URLMixin</code>, <code>LoginRequiredMixin</code>, <code>SingleTableMixin</code>, <code>FilterView</code></p> <p>This view is used to show a list of model objects.</p> <p>The view includes a table with the objects, and the context includes the title of the view, the refresh URL, and the URL to create a new object.</p> <p>The permissions required to view the objects are <code>app_label.view_model_name</code>. For example, the permission required to view a <code>DataImport</code> object would be <code>importing.view_dataimport</code>.</p> <p>If provided, the <code>filter_class</code> attribute is used to create a filter form on top of the table.</p> <p>Users need to be logged in to access this view.</p> <p>Attributes:</p> Name Type Description <code>model</code> <code>Model</code> <p>Model to be used.</p> <code>table_class</code> <code>Table</code> <p>Table class to be used.</p> <code>filterset_class</code> <code>FilterSet</code> <p>Filter class to be used. If not provided, the model's default filter is used.</p> <code>template_name</code> <code>str</code> <p>Template to be used.</p> <code>paginate_by</code> <code>int</code> <p>Number of objects per page.</p> <code>show_refresh_btn</code> <code>bool</code> <p>If True, a refresh url is included in the context.</p> <code>show_new_btn</code> <code>bool</code> <p>If True, a create url is included in the context.</p>"},{"location":"reference/variable/views/#variable.views.CustomTableView-functions","title":"Functions","text":""},{"location":"reference/variable/views/#variable.views.CustomTableView.get_filterset_class","title":"<code>get_filterset_class()</code>","text":"<p>Return the filter class for the view.</p> <p>If no filter class is provided in the view, the default filter for the model is used. The default filter is created by the <code>FilterSet</code> class, and includes only the 'visibility'.</p> Source code in <code>management/views.py</code> <pre><code>def get_filterset_class(self):\n    \"\"\"Return the filter class for the view.\n\n    If no filter class is provided in the view, the default filter for the model is\n    used. The default filter is created by the `FilterSet` class, and includes only\n    the 'visibility'.\n    \"\"\"\n    if not self.filterset_class:\n\n        class VisbilityFilter(FilterSet):\n            class Meta:\n                model = self.model\n                fields = [\"visibility\"]\n\n        return VisbilityFilter\n\n    return super().get_filterset_class()\n</code></pre>"},{"location":"reference/variable/views/#variable.views.SensorInstallation","title":"<code>SensorInstallation</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Represents an installation of a Sensor at a Station, which measures a Variable.</p> <p>It includes metadata for installation and finishing date, as well as state (active or not).</p> <p>Attributes:</p> Name Type Description <code>sensorinstallation_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable</code> <code>ForeignKey</code> <p>Variable measured by the sensor.</p> <code>station</code> <code>ForeignKey</code> <p>Station where the sensor is installed.</p> <code>sensor</code> <code>ForeignKey</code> <p>Sensor used for the measurement.</p> <code>start_date</code> <code>DateField</code> <p>Start date of the installation.</p> <code>end_date</code> <code>DateField</code> <p>End date of the installation.</p> <code>state</code> <code>BooleanField</code> <p>Is the sensor active?</p>"},{"location":"reference/variable/views/#variable.views.SensorInstallation-functions","title":"Functions","text":""},{"location":"reference/variable/views/#variable.views.SensorInstallation.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:sensorinstallation_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/views/#variable.views.SensorInstallationCreateView","title":"<code>SensorInstallationCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a sensor installation.</p>"},{"location":"reference/variable/views/#variable.views.SensorInstallationDeleteView","title":"<code>SensorInstallationDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a sensor installation.</p>"},{"location":"reference/variable/views/#variable.views.SensorInstallationDetailView","title":"<code>SensorInstallationDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a sensor installation.</p>"},{"location":"reference/variable/views/#variable.views.SensorInstallationEditView","title":"<code>SensorInstallationEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a sensor installation.</p>"},{"location":"reference/variable/views/#variable.views.SensorInstallationFilter","title":"<code>SensorInstallationFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/variable/views/#variable.views.SensorInstallationListView","title":"<code>SensorInstallationListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of sensor installations.</p>"},{"location":"reference/variable/views/#variable.views.SensorInstallationTable","title":"<code>SensorInstallationTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/variable/views/#variable.views.Unit","title":"<code>Unit</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Unit of measurement with a name and a symbol.</p> <p>Attributes:</p> Name Type Description <code>unit_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Name of the unit, eg. meters per second.</p> <code>initials</code> <code>CharField</code> <p>Symbol for the unit, eg. m/s.</p>"},{"location":"reference/variable/views/#variable.views.Unit-functions","title":"Functions","text":""},{"location":"reference/variable/views/#variable.views.Unit.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.initials)\n</code></pre>"},{"location":"reference/variable/views/#variable.views.Unit.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:unit_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/views/#variable.views.UnitCreateView","title":"<code>UnitCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a unit.</p>"},{"location":"reference/variable/views/#variable.views.UnitDeleteView","title":"<code>UnitDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a unit.</p>"},{"location":"reference/variable/views/#variable.views.UnitDetailView","title":"<code>UnitDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a unit.</p>"},{"location":"reference/variable/views/#variable.views.UnitEditView","title":"<code>UnitEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a unit.</p>"},{"location":"reference/variable/views/#variable.views.UnitListView","title":"<code>UnitListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of units.</p>"},{"location":"reference/variable/views/#variable.views.UnitTable","title":"<code>UnitTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/variable/views/#variable.views.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/variable/views/#variable.views.Variable-attributes","title":"Attributes","text":""},{"location":"reference/variable/views/#variable.views.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/variable/views/#variable.views.Variable-functions","title":"Functions","text":""},{"location":"reference/variable/views/#variable.views.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/variable/views/#variable.views.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/variable/views/#variable.views.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/views/#variable.views.VariableCreateView","title":"<code>VariableCreateView</code>","text":"<p>               Bases: <code>CustomCreateView</code></p> <p>View to create a variable.</p>"},{"location":"reference/variable/views/#variable.views.VariableDeleteView","title":"<code>VariableDeleteView</code>","text":"<p>               Bases: <code>CustomDeleteView</code></p> <p>View to delete a variable.</p>"},{"location":"reference/variable/views/#variable.views.VariableDetailView","title":"<code>VariableDetailView</code>","text":"<p>               Bases: <code>CustomDetailView</code></p> <p>View to view a variable.</p>"},{"location":"reference/variable/views/#variable.views.VariableEditView","title":"<code>VariableEditView</code>","text":"<p>               Bases: <code>CustomEditView</code></p> <p>View to edit a variable.</p>"},{"location":"reference/variable/views/#variable.views.VariableFilter","title":"<code>VariableFilter</code>","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"reference/variable/views/#variable.views.VariableListView","title":"<code>VariableListView</code>","text":"<p>               Bases: <code>CustomTableView</code></p> <p>View to display a table of variables.</p>"},{"location":"reference/variable/views/#variable.views.VariableTable","title":"<code>VariableTable</code>","text":"<p>               Bases: <code>Table</code></p>"},{"location":"reference/variable/signals/","title":"signals","text":""},{"location":"reference/variable/signals/#variable.signals","title":"<code>variable.signals</code>","text":""},{"location":"reference/variable/signals/handlers/","title":"handlers","text":""},{"location":"reference/variable/signals/handlers/#variable.signals.handlers","title":"<code>variable.signals.handlers</code>","text":""},{"location":"reference/variable/signals/handlers/#variable.signals.handlers-attributes","title":"Attributes","text":""},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.User","title":"<code>User = get_user_model()</code>  <code>module-attribute</code>","text":""},{"location":"reference/variable/signals/handlers/#variable.signals.handlers-classes","title":"Classes","text":""},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.PermissionsBase","title":"<code>PermissionsBase</code>","text":"<p>               Bases: <code>Model</code></p> <p>Base model for models that require permissions.</p>"},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.PermissionsBase-functions","title":"Functions","text":""},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.PermissionsBase.set_model_permissions","title":"<code>set_model_permissions()</code>  <code>classmethod</code>","text":"<p>Set model-level add permissions.</p> Source code in <code>management/models.py</code> <pre><code>@classmethod\ndef set_model_permissions(cls):\n    \"\"\"Set model-level add permissions.\"\"\"\n    apply_add_permissions_to_standard_group(cls)\n</code></pre>"},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.PermissionsBase.set_object_permissions","title":"<code>set_object_permissions()</code>","text":"<p>Set object-level delete, change and view permissions.</p> Source code in <code>management/models.py</code> <pre><code>def set_object_permissions(self):\n    \"\"\"Set object-level delete, change and view permissions.\"\"\"\n    delete, change, view, add = _get_perm_codenames(self.__class__)\n    standard_group = Group.objects.get(name=\"Standard\")\n    anonymous_user = get_anonymous_user()\n\n    # View permissions based on permissions level\n    if self.visibility in [\"public\", \"internal\"]:\n        assign_perm(view, standard_group, self)\n        assign_perm(view, anonymous_user, self)\n        if self.owner:\n            remove_perm(view, self.owner, self)\n    elif self.visibility == \"private\" and self.owner:\n        remove_perm(view, standard_group, self)\n        remove_perm(view, anonymous_user, self)\n        if self.owner:\n            assign_perm(view, self.owner, self)\n\n    # Assign change and delete permissions for owner\n    for perm in [change, delete]:\n        remove_perm(perm, standard_group, self)\n        remove_perm(perm, anonymous_user, self)\n        if self.owner:\n            assign_perm(perm, self.owner, self)\n</code></pre>"},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.SensorInstallation","title":"<code>SensorInstallation</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Represents an installation of a Sensor at a Station, which measures a Variable.</p> <p>It includes metadata for installation and finishing date, as well as state (active or not).</p> <p>Attributes:</p> Name Type Description <code>sensorinstallation_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable</code> <code>ForeignKey</code> <p>Variable measured by the sensor.</p> <code>station</code> <code>ForeignKey</code> <p>Station where the sensor is installed.</p> <code>sensor</code> <code>ForeignKey</code> <p>Sensor used for the measurement.</p> <code>start_date</code> <code>DateField</code> <p>Start date of the installation.</p> <code>end_date</code> <code>DateField</code> <p>End date of the installation.</p> <code>state</code> <code>BooleanField</code> <p>Is the sensor active?</p>"},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.SensorInstallation-functions","title":"Functions","text":""},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.SensorInstallation.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:sensorinstallation_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.Unit","title":"<code>Unit</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>Unit of measurement with a name and a symbol.</p> <p>Attributes:</p> Name Type Description <code>unit_id</code> <code>AutoField</code> <p>Primary key.</p> <code>name</code> <code>CharField</code> <p>Name of the unit, eg. meters per second.</p> <code>initials</code> <code>CharField</code> <p>Symbol for the unit, eg. m/s.</p>"},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.Unit-functions","title":"Functions","text":""},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.Unit.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.initials)\n</code></pre>"},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.Unit.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:unit_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>PermissionsBase</code></p> <p>A variable with a physical meaning.</p> <p>Such as precipitation, wind speed, wind direction, soil moisture, including the associated unit. It also includes metadata to help identify what is a reasonable value for the data, to flag outliers and to help with the validation process.</p> <p>The nature of the variable can be one of the following:</p> <ul> <li>sum: Cumulative value over a period of time.</li> <li>average: Average value over a period of time.</li> <li>value: One-off value.</li> </ul> <p>Attributes:</p> Name Type Description <code>variable_id</code> <code>AutoField</code> <p>Primary key.</p> <code>variable_code</code> <code>CharField</code> <p>Code of the variable, eg. airtemperature.</p> <code>name</code> <code>CharField</code> <p>Human-readable name of the variable, eg. Air temperature.</p> <code>unit</code> <code>ForeignKey</code> <p>Unit of the variable.</p> <code>maximum</code> <code>DecimalField</code> <p>Maximum value allowed for the variable.</p> <code>minimum</code> <code>DecimalField</code> <p>Minimum value allowed for the variable.</p> <code>diff_error</code> <code>DecimalField</code> <p>If two sequential values in the time-series data of this variable differ by more than this value, the validation process can mark this with an error flag.</p> <code>outlier_limit</code> <code>DecimalField</code> <p>The statistical deviation for defining outliers,  in times the standard deviation (sigma).</p> <code>null_limit</code> <code>DecimalField</code> <p>The max % of null values (missing, caused by e.g. equipment malfunction) allowed for hourly, daily, monthly data. Cumulative values are not deemed trustworthy if the number of missing values in a given period is greater than the null_limit.</p> <code>nature</code> <code>CharField</code> <p>Nature of the variable, eg. if it represents a one-off value, the average over a period of time or the cumulative value over a period</p>"},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.Variable-attributes","title":"Attributes","text":""},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.Variable.is_cumulative","title":"<code>is_cumulative: bool</code>  <code>property</code>","text":"<p>Return True if the nature of the variable is sum.</p>"},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.Variable-functions","title":"Functions","text":""},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation of the object.\"\"\"\n    return str(self.name)\n</code></pre>"},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.Variable.clean","title":"<code>clean()</code>","text":"<p>Validate the model fields.</p> Source code in <code>variable/models.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Validate the model fields.\"\"\"\n    if self.maximum &lt; self.minimum:\n        raise ValidationError(\n            {\n                \"maximum\": \"The maximum value must be greater than the minimum \"\n                \"value.\"\n            }\n        )\n    if not self.variable_code.isidentifier():\n        raise ValidationError(\n            {\n                \"variable_code\": \"The variable code must be a valid Python \"\n                \"identifier. Only letters, numbers and underscores are allowed, and\"\n                \" it cannot start with a number.\"\n            }\n        )\n    return super().clean()\n</code></pre>"},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.Variable.get_absolute_url","title":"<code>get_absolute_url()</code>","text":"<p>Get the absolute URL of the object.</p> Source code in <code>variable/models.py</code> <pre><code>def get_absolute_url(self) -&gt; str:\n    \"\"\"Get the absolute URL of the object.\"\"\"\n    return reverse(\"variable:variable_detail\", kwargs={\"pk\": self.pk})\n</code></pre>"},{"location":"reference/variable/signals/handlers/#variable.signals.handlers-functions","title":"Functions","text":""},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.set_model_permissions","title":"<code>set_model_permissions(sender, **kwargs)</code>","text":"<p>Set model-level permissions.</p> Source code in <code>variable/signals/handlers.py</code> <pre><code>@receiver(post_migrate)\ndef set_model_permissions(sender, **kwargs):\n    \"\"\"Set model-level permissions.\"\"\"\n    for model in [\n        SensorInstallation,\n        Unit,\n        Variable,\n    ]:\n        model.set_model_permissions()\n</code></pre>"},{"location":"reference/variable/signals/handlers/#variable.signals.handlers.set_object_permissions","title":"<code>set_object_permissions(sender, instance, **kwargs)</code>","text":"<p>Set object-level permissions\".</p> Source code in <code>variable/signals/handlers.py</code> <pre><code>@receiver(post_save, sender=SensorInstallation)\n@receiver(post_save, sender=Unit)\n@receiver(post_save, sender=Variable)\ndef set_object_permissions(sender, instance: PermissionsBase, **kwargs):\n    \"\"\"Set object-level permissions\".\"\"\"\n    instance.set_object_permissions()\n</code></pre>"}]}